//
// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the protocol buffer compiler.
// Source: controlclient.proto
//
import GRPC
import NIO
import NIOConcurrencyHelpers
import SwiftProtobuf


/// Usage: instantiate `ControlClient_ScsControlClient`, then call methods of this protocol to make API calls.
public protocol ControlClient_ScsControlClientProtocol: GRPCClient {
  var serviceName: String { get }
  var interceptors: ControlClient_ScsControlClientInterceptorFactoryProtocol? { get }

  func createCache(
    _ request: ControlClient__CreateCacheRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<ControlClient__CreateCacheRequest, ControlClient__CreateCacheResponse>

  func deleteCache(
    _ request: ControlClient__DeleteCacheRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<ControlClient__DeleteCacheRequest, ControlClient__DeleteCacheResponse>

  func listCaches(
    _ request: ControlClient__ListCachesRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<ControlClient__ListCachesRequest, ControlClient__ListCachesResponse>

  func flushCache(
    _ request: ControlClient__FlushCacheRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<ControlClient__FlushCacheRequest, ControlClient__FlushCacheResponse>

  func createSigningKey(
    _ request: ControlClient__CreateSigningKeyRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<ControlClient__CreateSigningKeyRequest, ControlClient__CreateSigningKeyResponse>

  func revokeSigningKey(
    _ request: ControlClient__RevokeSigningKeyRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<ControlClient__RevokeSigningKeyRequest, ControlClient__RevokeSigningKeyResponse>

  func listSigningKeys(
    _ request: ControlClient__ListSigningKeysRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<ControlClient__ListSigningKeysRequest, ControlClient__ListSigningKeysResponse>

  func createIndex(
    _ request: ControlClient__CreateIndexRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<ControlClient__CreateIndexRequest, ControlClient__CreateIndexResponse>

  func deleteIndex(
    _ request: ControlClient__DeleteIndexRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<ControlClient__DeleteIndexRequest, ControlClient__DeleteIndexResponse>

  func listIndexes(
    _ request: ControlClient__ListIndexesRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<ControlClient__ListIndexesRequest, ControlClient__ListIndexesResponse>
}

extension ControlClient_ScsControlClientProtocol {
  public var serviceName: String {
    return "control_client.ScsControl"
  }

  /// Unary call to CreateCache
  ///
  /// - Parameters:
  ///   - request: Request to send to CreateCache.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func createCache(
    _ request: ControlClient__CreateCacheRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<ControlClient__CreateCacheRequest, ControlClient__CreateCacheResponse> {
    return self.makeUnaryCall(
      path: ControlClient_ScsControlClientMetadata.Methods.createCache.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeCreateCacheInterceptors() ?? []
    )
  }

  /// Unary call to DeleteCache
  ///
  /// - Parameters:
  ///   - request: Request to send to DeleteCache.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func deleteCache(
    _ request: ControlClient__DeleteCacheRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<ControlClient__DeleteCacheRequest, ControlClient__DeleteCacheResponse> {
    return self.makeUnaryCall(
      path: ControlClient_ScsControlClientMetadata.Methods.deleteCache.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeDeleteCacheInterceptors() ?? []
    )
  }

  /// Unary call to ListCaches
  ///
  /// - Parameters:
  ///   - request: Request to send to ListCaches.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func listCaches(
    _ request: ControlClient__ListCachesRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<ControlClient__ListCachesRequest, ControlClient__ListCachesResponse> {
    return self.makeUnaryCall(
      path: ControlClient_ScsControlClientMetadata.Methods.listCaches.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeListCachesInterceptors() ?? []
    )
  }

  /// Unary call to FlushCache
  ///
  /// - Parameters:
  ///   - request: Request to send to FlushCache.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func flushCache(
    _ request: ControlClient__FlushCacheRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<ControlClient__FlushCacheRequest, ControlClient__FlushCacheResponse> {
    return self.makeUnaryCall(
      path: ControlClient_ScsControlClientMetadata.Methods.flushCache.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeFlushCacheInterceptors() ?? []
    )
  }

  /// Unary call to CreateSigningKey
  ///
  /// - Parameters:
  ///   - request: Request to send to CreateSigningKey.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func createSigningKey(
    _ request: ControlClient__CreateSigningKeyRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<ControlClient__CreateSigningKeyRequest, ControlClient__CreateSigningKeyResponse> {
    return self.makeUnaryCall(
      path: ControlClient_ScsControlClientMetadata.Methods.createSigningKey.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeCreateSigningKeyInterceptors() ?? []
    )
  }

  /// Unary call to RevokeSigningKey
  ///
  /// - Parameters:
  ///   - request: Request to send to RevokeSigningKey.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func revokeSigningKey(
    _ request: ControlClient__RevokeSigningKeyRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<ControlClient__RevokeSigningKeyRequest, ControlClient__RevokeSigningKeyResponse> {
    return self.makeUnaryCall(
      path: ControlClient_ScsControlClientMetadata.Methods.revokeSigningKey.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeRevokeSigningKeyInterceptors() ?? []
    )
  }

  /// Unary call to ListSigningKeys
  ///
  /// - Parameters:
  ///   - request: Request to send to ListSigningKeys.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func listSigningKeys(
    _ request: ControlClient__ListSigningKeysRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<ControlClient__ListSigningKeysRequest, ControlClient__ListSigningKeysResponse> {
    return self.makeUnaryCall(
      path: ControlClient_ScsControlClientMetadata.Methods.listSigningKeys.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeListSigningKeysInterceptors() ?? []
    )
  }

  /// Unary call to CreateIndex
  ///
  /// - Parameters:
  ///   - request: Request to send to CreateIndex.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func createIndex(
    _ request: ControlClient__CreateIndexRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<ControlClient__CreateIndexRequest, ControlClient__CreateIndexResponse> {
    return self.makeUnaryCall(
      path: ControlClient_ScsControlClientMetadata.Methods.createIndex.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeCreateIndexInterceptors() ?? []
    )
  }

  /// Unary call to DeleteIndex
  ///
  /// - Parameters:
  ///   - request: Request to send to DeleteIndex.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func deleteIndex(
    _ request: ControlClient__DeleteIndexRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<ControlClient__DeleteIndexRequest, ControlClient__DeleteIndexResponse> {
    return self.makeUnaryCall(
      path: ControlClient_ScsControlClientMetadata.Methods.deleteIndex.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeDeleteIndexInterceptors() ?? []
    )
  }

  /// Unary call to ListIndexes
  ///
  /// - Parameters:
  ///   - request: Request to send to ListIndexes.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func listIndexes(
    _ request: ControlClient__ListIndexesRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<ControlClient__ListIndexesRequest, ControlClient__ListIndexesResponse> {
    return self.makeUnaryCall(
      path: ControlClient_ScsControlClientMetadata.Methods.listIndexes.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeListIndexesInterceptors() ?? []
    )
  }
}

@available(*, deprecated)
extension ControlClient_ScsControlClient: @unchecked Sendable {}

@available(*, deprecated, renamed: "ControlClient_ScsControlNIOClient")
public final class ControlClient_ScsControlClient: ControlClient_ScsControlClientProtocol {
  private let lock = Lock()
  private var _defaultCallOptions: CallOptions
  private var _interceptors: ControlClient_ScsControlClientInterceptorFactoryProtocol?
  public let channel: GRPCChannel
  public var defaultCallOptions: CallOptions {
    get { self.lock.withLock { return self._defaultCallOptions } }
    set { self.lock.withLockVoid { self._defaultCallOptions = newValue } }
  }
  public var interceptors: ControlClient_ScsControlClientInterceptorFactoryProtocol? {
    get { self.lock.withLock { return self._interceptors } }
    set { self.lock.withLockVoid { self._interceptors = newValue } }
  }

  /// Creates a client for the control_client.ScsControl service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  public init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: ControlClient_ScsControlClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self._defaultCallOptions = defaultCallOptions
    self._interceptors = interceptors
  }
}

public struct ControlClient_ScsControlNIOClient: ControlClient_ScsControlClientProtocol {
  public var channel: GRPCChannel
  public var defaultCallOptions: CallOptions
  public var interceptors: ControlClient_ScsControlClientInterceptorFactoryProtocol?

  /// Creates a client for the control_client.ScsControl service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  public init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: ControlClient_ScsControlClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
public protocol ControlClient_ScsControlAsyncClientProtocol: GRPCClient {
  static var serviceDescriptor: GRPCServiceDescriptor { get }
  var interceptors: ControlClient_ScsControlClientInterceptorFactoryProtocol? { get }

  func makeCreateCacheCall(
    _ request: ControlClient__CreateCacheRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<ControlClient__CreateCacheRequest, ControlClient__CreateCacheResponse>

  func makeDeleteCacheCall(
    _ request: ControlClient__DeleteCacheRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<ControlClient__DeleteCacheRequest, ControlClient__DeleteCacheResponse>

  func makeListCachesCall(
    _ request: ControlClient__ListCachesRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<ControlClient__ListCachesRequest, ControlClient__ListCachesResponse>

  func makeFlushCacheCall(
    _ request: ControlClient__FlushCacheRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<ControlClient__FlushCacheRequest, ControlClient__FlushCacheResponse>

  func makeCreateSigningKeyCall(
    _ request: ControlClient__CreateSigningKeyRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<ControlClient__CreateSigningKeyRequest, ControlClient__CreateSigningKeyResponse>

  func makeRevokeSigningKeyCall(
    _ request: ControlClient__RevokeSigningKeyRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<ControlClient__RevokeSigningKeyRequest, ControlClient__RevokeSigningKeyResponse>

  func makeListSigningKeysCall(
    _ request: ControlClient__ListSigningKeysRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<ControlClient__ListSigningKeysRequest, ControlClient__ListSigningKeysResponse>

  func makeCreateIndexCall(
    _ request: ControlClient__CreateIndexRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<ControlClient__CreateIndexRequest, ControlClient__CreateIndexResponse>

  func makeDeleteIndexCall(
    _ request: ControlClient__DeleteIndexRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<ControlClient__DeleteIndexRequest, ControlClient__DeleteIndexResponse>

  func makeListIndexesCall(
    _ request: ControlClient__ListIndexesRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<ControlClient__ListIndexesRequest, ControlClient__ListIndexesResponse>
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension ControlClient_ScsControlAsyncClientProtocol {
  public static var serviceDescriptor: GRPCServiceDescriptor {
    return ControlClient_ScsControlClientMetadata.serviceDescriptor
  }

  public var interceptors: ControlClient_ScsControlClientInterceptorFactoryProtocol? {
    return nil
  }

  public func makeCreateCacheCall(
    _ request: ControlClient__CreateCacheRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<ControlClient__CreateCacheRequest, ControlClient__CreateCacheResponse> {
    return self.makeAsyncUnaryCall(
      path: ControlClient_ScsControlClientMetadata.Methods.createCache.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeCreateCacheInterceptors() ?? []
    )
  }

  public func makeDeleteCacheCall(
    _ request: ControlClient__DeleteCacheRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<ControlClient__DeleteCacheRequest, ControlClient__DeleteCacheResponse> {
    return self.makeAsyncUnaryCall(
      path: ControlClient_ScsControlClientMetadata.Methods.deleteCache.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeDeleteCacheInterceptors() ?? []
    )
  }

  public func makeListCachesCall(
    _ request: ControlClient__ListCachesRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<ControlClient__ListCachesRequest, ControlClient__ListCachesResponse> {
    return self.makeAsyncUnaryCall(
      path: ControlClient_ScsControlClientMetadata.Methods.listCaches.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeListCachesInterceptors() ?? []
    )
  }

  public func makeFlushCacheCall(
    _ request: ControlClient__FlushCacheRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<ControlClient__FlushCacheRequest, ControlClient__FlushCacheResponse> {
    return self.makeAsyncUnaryCall(
      path: ControlClient_ScsControlClientMetadata.Methods.flushCache.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeFlushCacheInterceptors() ?? []
    )
  }

  public func makeCreateSigningKeyCall(
    _ request: ControlClient__CreateSigningKeyRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<ControlClient__CreateSigningKeyRequest, ControlClient__CreateSigningKeyResponse> {
    return self.makeAsyncUnaryCall(
      path: ControlClient_ScsControlClientMetadata.Methods.createSigningKey.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeCreateSigningKeyInterceptors() ?? []
    )
  }

  public func makeRevokeSigningKeyCall(
    _ request: ControlClient__RevokeSigningKeyRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<ControlClient__RevokeSigningKeyRequest, ControlClient__RevokeSigningKeyResponse> {
    return self.makeAsyncUnaryCall(
      path: ControlClient_ScsControlClientMetadata.Methods.revokeSigningKey.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeRevokeSigningKeyInterceptors() ?? []
    )
  }

  public func makeListSigningKeysCall(
    _ request: ControlClient__ListSigningKeysRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<ControlClient__ListSigningKeysRequest, ControlClient__ListSigningKeysResponse> {
    return self.makeAsyncUnaryCall(
      path: ControlClient_ScsControlClientMetadata.Methods.listSigningKeys.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeListSigningKeysInterceptors() ?? []
    )
  }

  public func makeCreateIndexCall(
    _ request: ControlClient__CreateIndexRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<ControlClient__CreateIndexRequest, ControlClient__CreateIndexResponse> {
    return self.makeAsyncUnaryCall(
      path: ControlClient_ScsControlClientMetadata.Methods.createIndex.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeCreateIndexInterceptors() ?? []
    )
  }

  public func makeDeleteIndexCall(
    _ request: ControlClient__DeleteIndexRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<ControlClient__DeleteIndexRequest, ControlClient__DeleteIndexResponse> {
    return self.makeAsyncUnaryCall(
      path: ControlClient_ScsControlClientMetadata.Methods.deleteIndex.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeDeleteIndexInterceptors() ?? []
    )
  }

  public func makeListIndexesCall(
    _ request: ControlClient__ListIndexesRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<ControlClient__ListIndexesRequest, ControlClient__ListIndexesResponse> {
    return self.makeAsyncUnaryCall(
      path: ControlClient_ScsControlClientMetadata.Methods.listIndexes.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeListIndexesInterceptors() ?? []
    )
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension ControlClient_ScsControlAsyncClientProtocol {
  public func createCache(
    _ request: ControlClient__CreateCacheRequest,
    callOptions: CallOptions? = nil
  ) async throws -> ControlClient__CreateCacheResponse {
    return try await self.performAsyncUnaryCall(
      path: ControlClient_ScsControlClientMetadata.Methods.createCache.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeCreateCacheInterceptors() ?? []
    )
  }

  public func deleteCache(
    _ request: ControlClient__DeleteCacheRequest,
    callOptions: CallOptions? = nil
  ) async throws -> ControlClient__DeleteCacheResponse {
    return try await self.performAsyncUnaryCall(
      path: ControlClient_ScsControlClientMetadata.Methods.deleteCache.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeDeleteCacheInterceptors() ?? []
    )
  }

  public func listCaches(
    _ request: ControlClient__ListCachesRequest,
    callOptions: CallOptions? = nil
  ) async throws -> ControlClient__ListCachesResponse {
    return try await self.performAsyncUnaryCall(
      path: ControlClient_ScsControlClientMetadata.Methods.listCaches.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeListCachesInterceptors() ?? []
    )
  }

  public func flushCache(
    _ request: ControlClient__FlushCacheRequest,
    callOptions: CallOptions? = nil
  ) async throws -> ControlClient__FlushCacheResponse {
    return try await self.performAsyncUnaryCall(
      path: ControlClient_ScsControlClientMetadata.Methods.flushCache.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeFlushCacheInterceptors() ?? []
    )
  }

  public func createSigningKey(
    _ request: ControlClient__CreateSigningKeyRequest,
    callOptions: CallOptions? = nil
  ) async throws -> ControlClient__CreateSigningKeyResponse {
    return try await self.performAsyncUnaryCall(
      path: ControlClient_ScsControlClientMetadata.Methods.createSigningKey.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeCreateSigningKeyInterceptors() ?? []
    )
  }

  public func revokeSigningKey(
    _ request: ControlClient__RevokeSigningKeyRequest,
    callOptions: CallOptions? = nil
  ) async throws -> ControlClient__RevokeSigningKeyResponse {
    return try await self.performAsyncUnaryCall(
      path: ControlClient_ScsControlClientMetadata.Methods.revokeSigningKey.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeRevokeSigningKeyInterceptors() ?? []
    )
  }

  public func listSigningKeys(
    _ request: ControlClient__ListSigningKeysRequest,
    callOptions: CallOptions? = nil
  ) async throws -> ControlClient__ListSigningKeysResponse {
    return try await self.performAsyncUnaryCall(
      path: ControlClient_ScsControlClientMetadata.Methods.listSigningKeys.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeListSigningKeysInterceptors() ?? []
    )
  }

  public func createIndex(
    _ request: ControlClient__CreateIndexRequest,
    callOptions: CallOptions? = nil
  ) async throws -> ControlClient__CreateIndexResponse {
    return try await self.performAsyncUnaryCall(
      path: ControlClient_ScsControlClientMetadata.Methods.createIndex.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeCreateIndexInterceptors() ?? []
    )
  }

  public func deleteIndex(
    _ request: ControlClient__DeleteIndexRequest,
    callOptions: CallOptions? = nil
  ) async throws -> ControlClient__DeleteIndexResponse {
    return try await self.performAsyncUnaryCall(
      path: ControlClient_ScsControlClientMetadata.Methods.deleteIndex.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeDeleteIndexInterceptors() ?? []
    )
  }

  public func listIndexes(
    _ request: ControlClient__ListIndexesRequest,
    callOptions: CallOptions? = nil
  ) async throws -> ControlClient__ListIndexesResponse {
    return try await self.performAsyncUnaryCall(
      path: ControlClient_ScsControlClientMetadata.Methods.listIndexes.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeListIndexesInterceptors() ?? []
    )
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
public struct ControlClient_ScsControlAsyncClient: ControlClient_ScsControlAsyncClientProtocol {
  public var channel: GRPCChannel
  public var defaultCallOptions: CallOptions
  public var interceptors: ControlClient_ScsControlClientInterceptorFactoryProtocol?

  public init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: ControlClient_ScsControlClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

public protocol ControlClient_ScsControlClientInterceptorFactoryProtocol: Sendable {

  /// - Returns: Interceptors to use when invoking 'createCache'.
  func makeCreateCacheInterceptors() -> [ClientInterceptor<ControlClient__CreateCacheRequest, ControlClient__CreateCacheResponse>]

  /// - Returns: Interceptors to use when invoking 'deleteCache'.
  func makeDeleteCacheInterceptors() -> [ClientInterceptor<ControlClient__DeleteCacheRequest, ControlClient__DeleteCacheResponse>]

  /// - Returns: Interceptors to use when invoking 'listCaches'.
  func makeListCachesInterceptors() -> [ClientInterceptor<ControlClient__ListCachesRequest, ControlClient__ListCachesResponse>]

  /// - Returns: Interceptors to use when invoking 'flushCache'.
  func makeFlushCacheInterceptors() -> [ClientInterceptor<ControlClient__FlushCacheRequest, ControlClient__FlushCacheResponse>]

  /// - Returns: Interceptors to use when invoking 'createSigningKey'.
  func makeCreateSigningKeyInterceptors() -> [ClientInterceptor<ControlClient__CreateSigningKeyRequest, ControlClient__CreateSigningKeyResponse>]

  /// - Returns: Interceptors to use when invoking 'revokeSigningKey'.
  func makeRevokeSigningKeyInterceptors() -> [ClientInterceptor<ControlClient__RevokeSigningKeyRequest, ControlClient__RevokeSigningKeyResponse>]

  /// - Returns: Interceptors to use when invoking 'listSigningKeys'.
  func makeListSigningKeysInterceptors() -> [ClientInterceptor<ControlClient__ListSigningKeysRequest, ControlClient__ListSigningKeysResponse>]

  /// - Returns: Interceptors to use when invoking 'createIndex'.
  func makeCreateIndexInterceptors() -> [ClientInterceptor<ControlClient__CreateIndexRequest, ControlClient__CreateIndexResponse>]

  /// - Returns: Interceptors to use when invoking 'deleteIndex'.
  func makeDeleteIndexInterceptors() -> [ClientInterceptor<ControlClient__DeleteIndexRequest, ControlClient__DeleteIndexResponse>]

  /// - Returns: Interceptors to use when invoking 'listIndexes'.
  func makeListIndexesInterceptors() -> [ClientInterceptor<ControlClient__ListIndexesRequest, ControlClient__ListIndexesResponse>]
}

public enum ControlClient_ScsControlClientMetadata {
  public static let serviceDescriptor = GRPCServiceDescriptor(
    name: "ScsControl",
    fullName: "control_client.ScsControl",
    methods: [
      ControlClient_ScsControlClientMetadata.Methods.createCache,
      ControlClient_ScsControlClientMetadata.Methods.deleteCache,
      ControlClient_ScsControlClientMetadata.Methods.listCaches,
      ControlClient_ScsControlClientMetadata.Methods.flushCache,
      ControlClient_ScsControlClientMetadata.Methods.createSigningKey,
      ControlClient_ScsControlClientMetadata.Methods.revokeSigningKey,
      ControlClient_ScsControlClientMetadata.Methods.listSigningKeys,
      ControlClient_ScsControlClientMetadata.Methods.createIndex,
      ControlClient_ScsControlClientMetadata.Methods.deleteIndex,
      ControlClient_ScsControlClientMetadata.Methods.listIndexes,
    ]
  )

  public enum Methods {
    public static let createCache = GRPCMethodDescriptor(
      name: "CreateCache",
      path: "/control_client.ScsControl/CreateCache",
      type: GRPCCallType.unary
    )

    public static let deleteCache = GRPCMethodDescriptor(
      name: "DeleteCache",
      path: "/control_client.ScsControl/DeleteCache",
      type: GRPCCallType.unary
    )

    public static let listCaches = GRPCMethodDescriptor(
      name: "ListCaches",
      path: "/control_client.ScsControl/ListCaches",
      type: GRPCCallType.unary
    )

    public static let flushCache = GRPCMethodDescriptor(
      name: "FlushCache",
      path: "/control_client.ScsControl/FlushCache",
      type: GRPCCallType.unary
    )

    public static let createSigningKey = GRPCMethodDescriptor(
      name: "CreateSigningKey",
      path: "/control_client.ScsControl/CreateSigningKey",
      type: GRPCCallType.unary
    )

    public static let revokeSigningKey = GRPCMethodDescriptor(
      name: "RevokeSigningKey",
      path: "/control_client.ScsControl/RevokeSigningKey",
      type: GRPCCallType.unary
    )

    public static let listSigningKeys = GRPCMethodDescriptor(
      name: "ListSigningKeys",
      path: "/control_client.ScsControl/ListSigningKeys",
      type: GRPCCallType.unary
    )

    public static let createIndex = GRPCMethodDescriptor(
      name: "CreateIndex",
      path: "/control_client.ScsControl/CreateIndex",
      type: GRPCCallType.unary
    )

    public static let deleteIndex = GRPCMethodDescriptor(
      name: "DeleteIndex",
      path: "/control_client.ScsControl/DeleteIndex",
      type: GRPCCallType.unary
    )

    public static let listIndexes = GRPCMethodDescriptor(
      name: "ListIndexes",
      path: "/control_client.ScsControl/ListIndexes",
      type: GRPCCallType.unary
    )
  }
}

/// To build a server, implement a class that conforms to this protocol.
public protocol ControlClient_ScsControlProvider: CallHandlerProvider {
  var interceptors: ControlClient_ScsControlServerInterceptorFactoryProtocol? { get }

  func createCache(request: ControlClient__CreateCacheRequest, context: StatusOnlyCallContext) -> EventLoopFuture<ControlClient__CreateCacheResponse>

  func deleteCache(request: ControlClient__DeleteCacheRequest, context: StatusOnlyCallContext) -> EventLoopFuture<ControlClient__DeleteCacheResponse>

  func listCaches(request: ControlClient__ListCachesRequest, context: StatusOnlyCallContext) -> EventLoopFuture<ControlClient__ListCachesResponse>

  func flushCache(request: ControlClient__FlushCacheRequest, context: StatusOnlyCallContext) -> EventLoopFuture<ControlClient__FlushCacheResponse>

  func createSigningKey(request: ControlClient__CreateSigningKeyRequest, context: StatusOnlyCallContext) -> EventLoopFuture<ControlClient__CreateSigningKeyResponse>

  func revokeSigningKey(request: ControlClient__RevokeSigningKeyRequest, context: StatusOnlyCallContext) -> EventLoopFuture<ControlClient__RevokeSigningKeyResponse>

  func listSigningKeys(request: ControlClient__ListSigningKeysRequest, context: StatusOnlyCallContext) -> EventLoopFuture<ControlClient__ListSigningKeysResponse>

  func createIndex(request: ControlClient__CreateIndexRequest, context: StatusOnlyCallContext) -> EventLoopFuture<ControlClient__CreateIndexResponse>

  func deleteIndex(request: ControlClient__DeleteIndexRequest, context: StatusOnlyCallContext) -> EventLoopFuture<ControlClient__DeleteIndexResponse>

  func listIndexes(request: ControlClient__ListIndexesRequest, context: StatusOnlyCallContext) -> EventLoopFuture<ControlClient__ListIndexesResponse>
}

extension ControlClient_ScsControlProvider {
  public var serviceName: Substring {
    return ControlClient_ScsControlServerMetadata.serviceDescriptor.fullName[...]
  }

  /// Determines, calls and returns the appropriate request handler, depending on the request's method.
  /// Returns nil for methods not handled by this service.
  public func handle(
    method name: Substring,
    context: CallHandlerContext
  ) -> GRPCServerHandlerProtocol? {
    switch name {
    case "CreateCache":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<ControlClient__CreateCacheRequest>(),
        responseSerializer: ProtobufSerializer<ControlClient__CreateCacheResponse>(),
        interceptors: self.interceptors?.makeCreateCacheInterceptors() ?? [],
        userFunction: self.createCache(request:context:)
      )

    case "DeleteCache":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<ControlClient__DeleteCacheRequest>(),
        responseSerializer: ProtobufSerializer<ControlClient__DeleteCacheResponse>(),
        interceptors: self.interceptors?.makeDeleteCacheInterceptors() ?? [],
        userFunction: self.deleteCache(request:context:)
      )

    case "ListCaches":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<ControlClient__ListCachesRequest>(),
        responseSerializer: ProtobufSerializer<ControlClient__ListCachesResponse>(),
        interceptors: self.interceptors?.makeListCachesInterceptors() ?? [],
        userFunction: self.listCaches(request:context:)
      )

    case "FlushCache":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<ControlClient__FlushCacheRequest>(),
        responseSerializer: ProtobufSerializer<ControlClient__FlushCacheResponse>(),
        interceptors: self.interceptors?.makeFlushCacheInterceptors() ?? [],
        userFunction: self.flushCache(request:context:)
      )

    case "CreateSigningKey":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<ControlClient__CreateSigningKeyRequest>(),
        responseSerializer: ProtobufSerializer<ControlClient__CreateSigningKeyResponse>(),
        interceptors: self.interceptors?.makeCreateSigningKeyInterceptors() ?? [],
        userFunction: self.createSigningKey(request:context:)
      )

    case "RevokeSigningKey":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<ControlClient__RevokeSigningKeyRequest>(),
        responseSerializer: ProtobufSerializer<ControlClient__RevokeSigningKeyResponse>(),
        interceptors: self.interceptors?.makeRevokeSigningKeyInterceptors() ?? [],
        userFunction: self.revokeSigningKey(request:context:)
      )

    case "ListSigningKeys":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<ControlClient__ListSigningKeysRequest>(),
        responseSerializer: ProtobufSerializer<ControlClient__ListSigningKeysResponse>(),
        interceptors: self.interceptors?.makeListSigningKeysInterceptors() ?? [],
        userFunction: self.listSigningKeys(request:context:)
      )

    case "CreateIndex":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<ControlClient__CreateIndexRequest>(),
        responseSerializer: ProtobufSerializer<ControlClient__CreateIndexResponse>(),
        interceptors: self.interceptors?.makeCreateIndexInterceptors() ?? [],
        userFunction: self.createIndex(request:context:)
      )

    case "DeleteIndex":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<ControlClient__DeleteIndexRequest>(),
        responseSerializer: ProtobufSerializer<ControlClient__DeleteIndexResponse>(),
        interceptors: self.interceptors?.makeDeleteIndexInterceptors() ?? [],
        userFunction: self.deleteIndex(request:context:)
      )

    case "ListIndexes":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<ControlClient__ListIndexesRequest>(),
        responseSerializer: ProtobufSerializer<ControlClient__ListIndexesResponse>(),
        interceptors: self.interceptors?.makeListIndexesInterceptors() ?? [],
        userFunction: self.listIndexes(request:context:)
      )

    default:
      return nil
    }
  }
}

/// To implement a server, implement an object which conforms to this protocol.
@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
public protocol ControlClient_ScsControlAsyncProvider: CallHandlerProvider, Sendable {
  static var serviceDescriptor: GRPCServiceDescriptor { get }
  var interceptors: ControlClient_ScsControlServerInterceptorFactoryProtocol? { get }

  func createCache(
    request: ControlClient__CreateCacheRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> ControlClient__CreateCacheResponse

  func deleteCache(
    request: ControlClient__DeleteCacheRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> ControlClient__DeleteCacheResponse

  func listCaches(
    request: ControlClient__ListCachesRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> ControlClient__ListCachesResponse

  func flushCache(
    request: ControlClient__FlushCacheRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> ControlClient__FlushCacheResponse

  func createSigningKey(
    request: ControlClient__CreateSigningKeyRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> ControlClient__CreateSigningKeyResponse

  func revokeSigningKey(
    request: ControlClient__RevokeSigningKeyRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> ControlClient__RevokeSigningKeyResponse

  func listSigningKeys(
    request: ControlClient__ListSigningKeysRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> ControlClient__ListSigningKeysResponse

  func createIndex(
    request: ControlClient__CreateIndexRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> ControlClient__CreateIndexResponse

  func deleteIndex(
    request: ControlClient__DeleteIndexRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> ControlClient__DeleteIndexResponse

  func listIndexes(
    request: ControlClient__ListIndexesRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> ControlClient__ListIndexesResponse
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension ControlClient_ScsControlAsyncProvider {
  public static var serviceDescriptor: GRPCServiceDescriptor {
    return ControlClient_ScsControlServerMetadata.serviceDescriptor
  }

  public var serviceName: Substring {
    return ControlClient_ScsControlServerMetadata.serviceDescriptor.fullName[...]
  }

  public var interceptors: ControlClient_ScsControlServerInterceptorFactoryProtocol? {
    return nil
  }

  public func handle(
    method name: Substring,
    context: CallHandlerContext
  ) -> GRPCServerHandlerProtocol? {
    switch name {
    case "CreateCache":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<ControlClient__CreateCacheRequest>(),
        responseSerializer: ProtobufSerializer<ControlClient__CreateCacheResponse>(),
        interceptors: self.interceptors?.makeCreateCacheInterceptors() ?? [],
        wrapping: { try await self.createCache(request: $0, context: $1) }
      )

    case "DeleteCache":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<ControlClient__DeleteCacheRequest>(),
        responseSerializer: ProtobufSerializer<ControlClient__DeleteCacheResponse>(),
        interceptors: self.interceptors?.makeDeleteCacheInterceptors() ?? [],
        wrapping: { try await self.deleteCache(request: $0, context: $1) }
      )

    case "ListCaches":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<ControlClient__ListCachesRequest>(),
        responseSerializer: ProtobufSerializer<ControlClient__ListCachesResponse>(),
        interceptors: self.interceptors?.makeListCachesInterceptors() ?? [],
        wrapping: { try await self.listCaches(request: $0, context: $1) }
      )

    case "FlushCache":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<ControlClient__FlushCacheRequest>(),
        responseSerializer: ProtobufSerializer<ControlClient__FlushCacheResponse>(),
        interceptors: self.interceptors?.makeFlushCacheInterceptors() ?? [],
        wrapping: { try await self.flushCache(request: $0, context: $1) }
      )

    case "CreateSigningKey":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<ControlClient__CreateSigningKeyRequest>(),
        responseSerializer: ProtobufSerializer<ControlClient__CreateSigningKeyResponse>(),
        interceptors: self.interceptors?.makeCreateSigningKeyInterceptors() ?? [],
        wrapping: { try await self.createSigningKey(request: $0, context: $1) }
      )

    case "RevokeSigningKey":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<ControlClient__RevokeSigningKeyRequest>(),
        responseSerializer: ProtobufSerializer<ControlClient__RevokeSigningKeyResponse>(),
        interceptors: self.interceptors?.makeRevokeSigningKeyInterceptors() ?? [],
        wrapping: { try await self.revokeSigningKey(request: $0, context: $1) }
      )

    case "ListSigningKeys":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<ControlClient__ListSigningKeysRequest>(),
        responseSerializer: ProtobufSerializer<ControlClient__ListSigningKeysResponse>(),
        interceptors: self.interceptors?.makeListSigningKeysInterceptors() ?? [],
        wrapping: { try await self.listSigningKeys(request: $0, context: $1) }
      )

    case "CreateIndex":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<ControlClient__CreateIndexRequest>(),
        responseSerializer: ProtobufSerializer<ControlClient__CreateIndexResponse>(),
        interceptors: self.interceptors?.makeCreateIndexInterceptors() ?? [],
        wrapping: { try await self.createIndex(request: $0, context: $1) }
      )

    case "DeleteIndex":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<ControlClient__DeleteIndexRequest>(),
        responseSerializer: ProtobufSerializer<ControlClient__DeleteIndexResponse>(),
        interceptors: self.interceptors?.makeDeleteIndexInterceptors() ?? [],
        wrapping: { try await self.deleteIndex(request: $0, context: $1) }
      )

    case "ListIndexes":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<ControlClient__ListIndexesRequest>(),
        responseSerializer: ProtobufSerializer<ControlClient__ListIndexesResponse>(),
        interceptors: self.interceptors?.makeListIndexesInterceptors() ?? [],
        wrapping: { try await self.listIndexes(request: $0, context: $1) }
      )

    default:
      return nil
    }
  }
}

public protocol ControlClient_ScsControlServerInterceptorFactoryProtocol: Sendable {

  /// - Returns: Interceptors to use when handling 'createCache'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeCreateCacheInterceptors() -> [ServerInterceptor<ControlClient__CreateCacheRequest, ControlClient__CreateCacheResponse>]

  /// - Returns: Interceptors to use when handling 'deleteCache'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeDeleteCacheInterceptors() -> [ServerInterceptor<ControlClient__DeleteCacheRequest, ControlClient__DeleteCacheResponse>]

  /// - Returns: Interceptors to use when handling 'listCaches'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeListCachesInterceptors() -> [ServerInterceptor<ControlClient__ListCachesRequest, ControlClient__ListCachesResponse>]

  /// - Returns: Interceptors to use when handling 'flushCache'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeFlushCacheInterceptors() -> [ServerInterceptor<ControlClient__FlushCacheRequest, ControlClient__FlushCacheResponse>]

  /// - Returns: Interceptors to use when handling 'createSigningKey'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeCreateSigningKeyInterceptors() -> [ServerInterceptor<ControlClient__CreateSigningKeyRequest, ControlClient__CreateSigningKeyResponse>]

  /// - Returns: Interceptors to use when handling 'revokeSigningKey'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeRevokeSigningKeyInterceptors() -> [ServerInterceptor<ControlClient__RevokeSigningKeyRequest, ControlClient__RevokeSigningKeyResponse>]

  /// - Returns: Interceptors to use when handling 'listSigningKeys'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeListSigningKeysInterceptors() -> [ServerInterceptor<ControlClient__ListSigningKeysRequest, ControlClient__ListSigningKeysResponse>]

  /// - Returns: Interceptors to use when handling 'createIndex'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeCreateIndexInterceptors() -> [ServerInterceptor<ControlClient__CreateIndexRequest, ControlClient__CreateIndexResponse>]

  /// - Returns: Interceptors to use when handling 'deleteIndex'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeDeleteIndexInterceptors() -> [ServerInterceptor<ControlClient__DeleteIndexRequest, ControlClient__DeleteIndexResponse>]

  /// - Returns: Interceptors to use when handling 'listIndexes'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeListIndexesInterceptors() -> [ServerInterceptor<ControlClient__ListIndexesRequest, ControlClient__ListIndexesResponse>]
}

public enum ControlClient_ScsControlServerMetadata {
  public static let serviceDescriptor = GRPCServiceDescriptor(
    name: "ScsControl",
    fullName: "control_client.ScsControl",
    methods: [
      ControlClient_ScsControlServerMetadata.Methods.createCache,
      ControlClient_ScsControlServerMetadata.Methods.deleteCache,
      ControlClient_ScsControlServerMetadata.Methods.listCaches,
      ControlClient_ScsControlServerMetadata.Methods.flushCache,
      ControlClient_ScsControlServerMetadata.Methods.createSigningKey,
      ControlClient_ScsControlServerMetadata.Methods.revokeSigningKey,
      ControlClient_ScsControlServerMetadata.Methods.listSigningKeys,
      ControlClient_ScsControlServerMetadata.Methods.createIndex,
      ControlClient_ScsControlServerMetadata.Methods.deleteIndex,
      ControlClient_ScsControlServerMetadata.Methods.listIndexes,
    ]
  )

  public enum Methods {
    public static let createCache = GRPCMethodDescriptor(
      name: "CreateCache",
      path: "/control_client.ScsControl/CreateCache",
      type: GRPCCallType.unary
    )

    public static let deleteCache = GRPCMethodDescriptor(
      name: "DeleteCache",
      path: "/control_client.ScsControl/DeleteCache",
      type: GRPCCallType.unary
    )

    public static let listCaches = GRPCMethodDescriptor(
      name: "ListCaches",
      path: "/control_client.ScsControl/ListCaches",
      type: GRPCCallType.unary
    )

    public static let flushCache = GRPCMethodDescriptor(
      name: "FlushCache",
      path: "/control_client.ScsControl/FlushCache",
      type: GRPCCallType.unary
    )

    public static let createSigningKey = GRPCMethodDescriptor(
      name: "CreateSigningKey",
      path: "/control_client.ScsControl/CreateSigningKey",
      type: GRPCCallType.unary
    )

    public static let revokeSigningKey = GRPCMethodDescriptor(
      name: "RevokeSigningKey",
      path: "/control_client.ScsControl/RevokeSigningKey",
      type: GRPCCallType.unary
    )

    public static let listSigningKeys = GRPCMethodDescriptor(
      name: "ListSigningKeys",
      path: "/control_client.ScsControl/ListSigningKeys",
      type: GRPCCallType.unary
    )

    public static let createIndex = GRPCMethodDescriptor(
      name: "CreateIndex",
      path: "/control_client.ScsControl/CreateIndex",
      type: GRPCCallType.unary
    )

    public static let deleteIndex = GRPCMethodDescriptor(
      name: "DeleteIndex",
      path: "/control_client.ScsControl/DeleteIndex",
      type: GRPCCallType.unary
    )

    public static let listIndexes = GRPCMethodDescriptor(
      name: "ListIndexes",
      path: "/control_client.ScsControl/ListIndexes",
      type: GRPCCallType.unary
    )
  }
}
