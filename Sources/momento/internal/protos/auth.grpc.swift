//
// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the protocol buffer compiler.
// Source: auth.proto
//
import GRPC
import NIO
import NIOConcurrencyHelpers
import SwiftProtobuf


/// Usage: instantiate `Auth_AuthClient`, then call methods of this protocol to make API calls.
public protocol Auth_AuthClientProtocol: GRPCClient {
  var serviceName: String { get }
  var interceptors: Auth_AuthClientInterceptorFactoryProtocol? { get }

  func login(
    _ request: Auth__LoginRequest,
    callOptions: CallOptions?,
    handler: @escaping (Auth__LoginResponse) -> Void
  ) -> ServerStreamingCall<Auth__LoginRequest, Auth__LoginResponse>

  func generateApiToken(
    _ request: Auth__GenerateApiTokenRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Auth__GenerateApiTokenRequest, Auth__GenerateApiTokenResponse>

  func refreshApiToken(
    _ request: Auth__RefreshApiTokenRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Auth__RefreshApiTokenRequest, Auth__RefreshApiTokenResponse>
}

extension Auth_AuthClientProtocol {
  public var serviceName: String {
    return "auth.Auth"
  }

  /// Server streaming call to Login
  ///
  /// - Parameters:
  ///   - request: Request to send to Login.
  ///   - callOptions: Call options.
  ///   - handler: A closure called when each response is received from the server.
  /// - Returns: A `ServerStreamingCall` with futures for the metadata and status.
  public func login(
    _ request: Auth__LoginRequest,
    callOptions: CallOptions? = nil,
    handler: @escaping (Auth__LoginResponse) -> Void
  ) -> ServerStreamingCall<Auth__LoginRequest, Auth__LoginResponse> {
    return self.makeServerStreamingCall(
      path: Auth_AuthClientMetadata.Methods.login.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeLoginInterceptors() ?? [],
      handler: handler
    )
  }

  /// api for initially generating api and refresh tokens
  ///
  /// - Parameters:
  ///   - request: Request to send to GenerateApiToken.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func generateApiToken(
    _ request: Auth__GenerateApiTokenRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Auth__GenerateApiTokenRequest, Auth__GenerateApiTokenResponse> {
    return self.makeUnaryCall(
      path: Auth_AuthClientMetadata.Methods.generateApiToken.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGenerateApiTokenInterceptors() ?? []
    )
  }

  /// api for programmatically refreshing api and refresh tokens
  ///
  /// - Parameters:
  ///   - request: Request to send to RefreshApiToken.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func refreshApiToken(
    _ request: Auth__RefreshApiTokenRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Auth__RefreshApiTokenRequest, Auth__RefreshApiTokenResponse> {
    return self.makeUnaryCall(
      path: Auth_AuthClientMetadata.Methods.refreshApiToken.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeRefreshApiTokenInterceptors() ?? []
    )
  }
}

@available(*, deprecated)
extension Auth_AuthClient: @unchecked Sendable {}

@available(*, deprecated, renamed: "Auth_AuthNIOClient")
public final class Auth_AuthClient: Auth_AuthClientProtocol {
  private let lock = Lock()
  private var _defaultCallOptions: CallOptions
  private var _interceptors: Auth_AuthClientInterceptorFactoryProtocol?
  public let channel: GRPCChannel
  public var defaultCallOptions: CallOptions {
    get { self.lock.withLock { return self._defaultCallOptions } }
    set { self.lock.withLockVoid { self._defaultCallOptions = newValue } }
  }
  public var interceptors: Auth_AuthClientInterceptorFactoryProtocol? {
    get { self.lock.withLock { return self._interceptors } }
    set { self.lock.withLockVoid { self._interceptors = newValue } }
  }

  /// Creates a client for the auth.Auth service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  public init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Auth_AuthClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self._defaultCallOptions = defaultCallOptions
    self._interceptors = interceptors
  }
}

public struct Auth_AuthNIOClient: Auth_AuthClientProtocol {
  public var channel: GRPCChannel
  public var defaultCallOptions: CallOptions
  public var interceptors: Auth_AuthClientInterceptorFactoryProtocol?

  /// Creates a client for the auth.Auth service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  public init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Auth_AuthClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
public protocol Auth_AuthAsyncClientProtocol: GRPCClient {
  static var serviceDescriptor: GRPCServiceDescriptor { get }
  var interceptors: Auth_AuthClientInterceptorFactoryProtocol? { get }

  func makeLoginCall(
    _ request: Auth__LoginRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncServerStreamingCall<Auth__LoginRequest, Auth__LoginResponse>

  func makeGenerateApiTokenCall(
    _ request: Auth__GenerateApiTokenRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Auth__GenerateApiTokenRequest, Auth__GenerateApiTokenResponse>

  func makeRefreshApiTokenCall(
    _ request: Auth__RefreshApiTokenRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Auth__RefreshApiTokenRequest, Auth__RefreshApiTokenResponse>
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Auth_AuthAsyncClientProtocol {
  public static var serviceDescriptor: GRPCServiceDescriptor {
    return Auth_AuthClientMetadata.serviceDescriptor
  }

  public var interceptors: Auth_AuthClientInterceptorFactoryProtocol? {
    return nil
  }

  public func makeLoginCall(
    _ request: Auth__LoginRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncServerStreamingCall<Auth__LoginRequest, Auth__LoginResponse> {
    return self.makeAsyncServerStreamingCall(
      path: Auth_AuthClientMetadata.Methods.login.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeLoginInterceptors() ?? []
    )
  }

  public func makeGenerateApiTokenCall(
    _ request: Auth__GenerateApiTokenRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Auth__GenerateApiTokenRequest, Auth__GenerateApiTokenResponse> {
    return self.makeAsyncUnaryCall(
      path: Auth_AuthClientMetadata.Methods.generateApiToken.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGenerateApiTokenInterceptors() ?? []
    )
  }

  public func makeRefreshApiTokenCall(
    _ request: Auth__RefreshApiTokenRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Auth__RefreshApiTokenRequest, Auth__RefreshApiTokenResponse> {
    return self.makeAsyncUnaryCall(
      path: Auth_AuthClientMetadata.Methods.refreshApiToken.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeRefreshApiTokenInterceptors() ?? []
    )
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Auth_AuthAsyncClientProtocol {
  public func login(
    _ request: Auth__LoginRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncResponseStream<Auth__LoginResponse> {
    return self.performAsyncServerStreamingCall(
      path: Auth_AuthClientMetadata.Methods.login.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeLoginInterceptors() ?? []
    )
  }

  public func generateApiToken(
    _ request: Auth__GenerateApiTokenRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Auth__GenerateApiTokenResponse {
    return try await self.performAsyncUnaryCall(
      path: Auth_AuthClientMetadata.Methods.generateApiToken.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGenerateApiTokenInterceptors() ?? []
    )
  }

  public func refreshApiToken(
    _ request: Auth__RefreshApiTokenRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Auth__RefreshApiTokenResponse {
    return try await self.performAsyncUnaryCall(
      path: Auth_AuthClientMetadata.Methods.refreshApiToken.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeRefreshApiTokenInterceptors() ?? []
    )
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
public struct Auth_AuthAsyncClient: Auth_AuthAsyncClientProtocol {
  public var channel: GRPCChannel
  public var defaultCallOptions: CallOptions
  public var interceptors: Auth_AuthClientInterceptorFactoryProtocol?

  public init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Auth_AuthClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

public protocol Auth_AuthClientInterceptorFactoryProtocol: Sendable {

  /// - Returns: Interceptors to use when invoking 'login'.
  func makeLoginInterceptors() -> [ClientInterceptor<Auth__LoginRequest, Auth__LoginResponse>]

  /// - Returns: Interceptors to use when invoking 'generateApiToken'.
  func makeGenerateApiTokenInterceptors() -> [ClientInterceptor<Auth__GenerateApiTokenRequest, Auth__GenerateApiTokenResponse>]

  /// - Returns: Interceptors to use when invoking 'refreshApiToken'.
  func makeRefreshApiTokenInterceptors() -> [ClientInterceptor<Auth__RefreshApiTokenRequest, Auth__RefreshApiTokenResponse>]
}

public enum Auth_AuthClientMetadata {
  public static let serviceDescriptor = GRPCServiceDescriptor(
    name: "Auth",
    fullName: "auth.Auth",
    methods: [
      Auth_AuthClientMetadata.Methods.login,
      Auth_AuthClientMetadata.Methods.generateApiToken,
      Auth_AuthClientMetadata.Methods.refreshApiToken,
    ]
  )

  public enum Methods {
    public static let login = GRPCMethodDescriptor(
      name: "Login",
      path: "/auth.Auth/Login",
      type: GRPCCallType.serverStreaming
    )

    public static let generateApiToken = GRPCMethodDescriptor(
      name: "GenerateApiToken",
      path: "/auth.Auth/GenerateApiToken",
      type: GRPCCallType.unary
    )

    public static let refreshApiToken = GRPCMethodDescriptor(
      name: "RefreshApiToken",
      path: "/auth.Auth/RefreshApiToken",
      type: GRPCCallType.unary
    )
  }
}

/// To build a server, implement a class that conforms to this protocol.
public protocol Auth_AuthProvider: CallHandlerProvider {
  var interceptors: Auth_AuthServerInterceptorFactoryProtocol? { get }

  func login(request: Auth__LoginRequest, context: StreamingResponseCallContext<Auth__LoginResponse>) -> EventLoopFuture<GRPCStatus>

  /// api for initially generating api and refresh tokens
  func generateApiToken(request: Auth__GenerateApiTokenRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Auth__GenerateApiTokenResponse>

  /// api for programmatically refreshing api and refresh tokens
  func refreshApiToken(request: Auth__RefreshApiTokenRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Auth__RefreshApiTokenResponse>
}

extension Auth_AuthProvider {
  public var serviceName: Substring {
    return Auth_AuthServerMetadata.serviceDescriptor.fullName[...]
  }

  /// Determines, calls and returns the appropriate request handler, depending on the request's method.
  /// Returns nil for methods not handled by this service.
  public func handle(
    method name: Substring,
    context: CallHandlerContext
  ) -> GRPCServerHandlerProtocol? {
    switch name {
    case "Login":
      return ServerStreamingServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Auth__LoginRequest>(),
        responseSerializer: ProtobufSerializer<Auth__LoginResponse>(),
        interceptors: self.interceptors?.makeLoginInterceptors() ?? [],
        userFunction: self.login(request:context:)
      )

    case "GenerateApiToken":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Auth__GenerateApiTokenRequest>(),
        responseSerializer: ProtobufSerializer<Auth__GenerateApiTokenResponse>(),
        interceptors: self.interceptors?.makeGenerateApiTokenInterceptors() ?? [],
        userFunction: self.generateApiToken(request:context:)
      )

    case "RefreshApiToken":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Auth__RefreshApiTokenRequest>(),
        responseSerializer: ProtobufSerializer<Auth__RefreshApiTokenResponse>(),
        interceptors: self.interceptors?.makeRefreshApiTokenInterceptors() ?? [],
        userFunction: self.refreshApiToken(request:context:)
      )

    default:
      return nil
    }
  }
}

/// To implement a server, implement an object which conforms to this protocol.
@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
public protocol Auth_AuthAsyncProvider: CallHandlerProvider, Sendable {
  static var serviceDescriptor: GRPCServiceDescriptor { get }
  var interceptors: Auth_AuthServerInterceptorFactoryProtocol? { get }

  func login(
    request: Auth__LoginRequest,
    responseStream: GRPCAsyncResponseStreamWriter<Auth__LoginResponse>,
    context: GRPCAsyncServerCallContext
  ) async throws

  /// api for initially generating api and refresh tokens
  func generateApiToken(
    request: Auth__GenerateApiTokenRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Auth__GenerateApiTokenResponse

  /// api for programmatically refreshing api and refresh tokens
  func refreshApiToken(
    request: Auth__RefreshApiTokenRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Auth__RefreshApiTokenResponse
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Auth_AuthAsyncProvider {
  public static var serviceDescriptor: GRPCServiceDescriptor {
    return Auth_AuthServerMetadata.serviceDescriptor
  }

  public var serviceName: Substring {
    return Auth_AuthServerMetadata.serviceDescriptor.fullName[...]
  }

  public var interceptors: Auth_AuthServerInterceptorFactoryProtocol? {
    return nil
  }

  public func handle(
    method name: Substring,
    context: CallHandlerContext
  ) -> GRPCServerHandlerProtocol? {
    switch name {
    case "Login":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Auth__LoginRequest>(),
        responseSerializer: ProtobufSerializer<Auth__LoginResponse>(),
        interceptors: self.interceptors?.makeLoginInterceptors() ?? [],
        wrapping: { try await self.login(request: $0, responseStream: $1, context: $2) }
      )

    case "GenerateApiToken":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Auth__GenerateApiTokenRequest>(),
        responseSerializer: ProtobufSerializer<Auth__GenerateApiTokenResponse>(),
        interceptors: self.interceptors?.makeGenerateApiTokenInterceptors() ?? [],
        wrapping: { try await self.generateApiToken(request: $0, context: $1) }
      )

    case "RefreshApiToken":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Auth__RefreshApiTokenRequest>(),
        responseSerializer: ProtobufSerializer<Auth__RefreshApiTokenResponse>(),
        interceptors: self.interceptors?.makeRefreshApiTokenInterceptors() ?? [],
        wrapping: { try await self.refreshApiToken(request: $0, context: $1) }
      )

    default:
      return nil
    }
  }
}

public protocol Auth_AuthServerInterceptorFactoryProtocol: Sendable {

  /// - Returns: Interceptors to use when handling 'login'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeLoginInterceptors() -> [ServerInterceptor<Auth__LoginRequest, Auth__LoginResponse>]

  /// - Returns: Interceptors to use when handling 'generateApiToken'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeGenerateApiTokenInterceptors() -> [ServerInterceptor<Auth__GenerateApiTokenRequest, Auth__GenerateApiTokenResponse>]

  /// - Returns: Interceptors to use when handling 'refreshApiToken'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeRefreshApiTokenInterceptors() -> [ServerInterceptor<Auth__RefreshApiTokenRequest, Auth__RefreshApiTokenResponse>]
}

public enum Auth_AuthServerMetadata {
  public static let serviceDescriptor = GRPCServiceDescriptor(
    name: "Auth",
    fullName: "auth.Auth",
    methods: [
      Auth_AuthServerMetadata.Methods.login,
      Auth_AuthServerMetadata.Methods.generateApiToken,
      Auth_AuthServerMetadata.Methods.refreshApiToken,
    ]
  )

  public enum Methods {
    public static let login = GRPCMethodDescriptor(
      name: "Login",
      path: "/auth.Auth/Login",
      type: GRPCCallType.serverStreaming
    )

    public static let generateApiToken = GRPCMethodDescriptor(
      name: "GenerateApiToken",
      path: "/auth.Auth/GenerateApiToken",
      type: GRPCCallType.unary
    )

    public static let refreshApiToken = GRPCMethodDescriptor(
      name: "RefreshApiToken",
      path: "/auth.Auth/RefreshApiToken",
      type: GRPCCallType.unary
    )
  }
}
