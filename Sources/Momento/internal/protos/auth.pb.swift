// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: auth.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

public struct Auth__LoginRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Auth__LoginResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var state: Auth__LoginResponse.OneOf_State? = nil

  public var directBrowser: Auth__LoginResponse.DirectBrowser {
    get {
      if case .directBrowser(let v)? = state {return v}
      return Auth__LoginResponse.DirectBrowser()
    }
    set {state = .directBrowser(newValue)}
  }

  public var loggedIn: Auth__LoginResponse.LoggedIn {
    get {
      if case .loggedIn(let v)? = state {return v}
      return Auth__LoginResponse.LoggedIn()
    }
    set {state = .loggedIn(newValue)}
  }

  public var message: Auth__LoginResponse.Message {
    get {
      if case .message(let v)? = state {return v}
      return Auth__LoginResponse.Message()
    }
    set {state = .message(newValue)}
  }

  public var error: Auth__LoginResponse.Error {
    get {
      if case .error(let v)? = state {return v}
      return Auth__LoginResponse.Error()
    }
    set {state = .error(newValue)}
  }

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public enum OneOf_State: Equatable {
    case directBrowser(Auth__LoginResponse.DirectBrowser)
    case loggedIn(Auth__LoginResponse.LoggedIn)
    case message(Auth__LoginResponse.Message)
    case error(Auth__LoginResponse.Error)

  #if !swift(>=4.1)
    public static func ==(lhs: Auth__LoginResponse.OneOf_State, rhs: Auth__LoginResponse.OneOf_State) -> Bool {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch (lhs, rhs) {
      case (.directBrowser, .directBrowser): return {
        guard case .directBrowser(let l) = lhs, case .directBrowser(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.loggedIn, .loggedIn): return {
        guard case .loggedIn(let l) = lhs, case .loggedIn(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.message, .message): return {
        guard case .message(let l) = lhs, case .message(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.error, .error): return {
        guard case .error(let l) = lhs, case .error(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      default: return false
      }
    }
  #endif
  }

  /// Terminal state, login success
  public struct LoggedIn {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    public var sessionToken: String = String()

    /// How many seconds the token was valid for when issued.
    /// Will vary slightly from reality upon receipt, as
    /// time has passed since the token was minted.
    /// You might expect to see this true to within 10
    /// seconds of client-side timekeeping but as is
    /// ever the case, there are no guarantees with
    /// public network timing.
    public var validForSeconds: UInt32 = 0

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public init() {}
  }

  /// Terminal state, login error
  public struct Error {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    public var description_p: String = String()

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public init() {}
  }

  /// Open a browser to a url, for interactive login
  public struct DirectBrowser {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    public var url: String = String()

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public init() {}
  }

  /// Logging info about the login process
  public struct Message {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    public var text: String = String()

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public init() {}
  }

  public init() {}
}

public struct Auth__GenerateApiTokenRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var expiry: Auth__GenerateApiTokenRequest.OneOf_Expiry? = nil

  public var never: Auth__GenerateApiTokenRequest.Never {
    get {
      if case .never(let v)? = expiry {return v}
      return Auth__GenerateApiTokenRequest.Never()
    }
    set {expiry = .never(newValue)}
  }

  public var expires: Auth__GenerateApiTokenRequest.Expires {
    get {
      if case .expires(let v)? = expiry {return v}
      return Auth__GenerateApiTokenRequest.Expires()
    }
    set {expiry = .expires(newValue)}
  }

  public var authToken: String = String()

  public var permissions: PermissionMessages_Permissions {
    get {return _permissions ?? PermissionMessages_Permissions()}
    set {_permissions = newValue}
  }
  /// Returns true if `permissions` has been explicitly set.
  public var hasPermissions: Bool {return self._permissions != nil}
  /// Clears the value of `permissions`. Subsequent reads from it will return its default value.
  public mutating func clearPermissions() {self._permissions = nil}

  public var tokenID: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public enum OneOf_Expiry: Equatable {
    case never(Auth__GenerateApiTokenRequest.Never)
    case expires(Auth__GenerateApiTokenRequest.Expires)

  #if !swift(>=4.1)
    public static func ==(lhs: Auth__GenerateApiTokenRequest.OneOf_Expiry, rhs: Auth__GenerateApiTokenRequest.OneOf_Expiry) -> Bool {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch (lhs, rhs) {
      case (.never, .never): return {
        guard case .never(let l) = lhs, case .never(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.expires, .expires): return {
        guard case .expires(let l) = lhs, case .expires(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      default: return false
      }
    }
  #endif
  }

  /// generate a token that will never expire
  public struct Never {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public init() {}
  }

  /// generate a token that has an expiry
  public struct Expires {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    /// how many seconds do you want the api token to be valid for?
    public var validForSeconds: UInt32 = 0

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public init() {}
  }

  public init() {}

  fileprivate var _permissions: PermissionMessages_Permissions? = nil
}

public struct Auth__GenerateApiTokenResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// the api key used for authentication against Momento backend
  public var apiKey: String = String()

  /// the token that will allow the api token to be refreshed, which will
  /// give you back a new refresh and api token
  public var refreshToken: String = String()

  /// the Momento endpoint that this token is allowed to make requests against
  public var endpoint: String = String()

  /// epoch seconds when the api token expires
  public var validUntil: UInt64 = 0

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Auth__RefreshApiTokenRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// the existing api token to be refreshed
  public var apiKey: String = String()

  /// the refresh token that was generated with that api token
  public var refreshToken: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Auth__RefreshApiTokenResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// the new api key used for authentication against Momento backend
  public var apiKey: String = String()

  /// the token that will allow the api token to be refreshed, which will
  /// give you back a new refresh and api token
  public var refreshToken: String = String()

  /// the Momento endpoint that this token is allowed to make requests against
  public var endpoint: String = String()

  /// epoch seconds when the api token expires
  public var validUntil: UInt64 = 0

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

#if swift(>=5.5) && canImport(_Concurrency)
extension Auth__LoginRequest: @unchecked Sendable {}
extension Auth__LoginResponse: @unchecked Sendable {}
extension Auth__LoginResponse.OneOf_State: @unchecked Sendable {}
extension Auth__LoginResponse.LoggedIn: @unchecked Sendable {}
extension Auth__LoginResponse.Error: @unchecked Sendable {}
extension Auth__LoginResponse.DirectBrowser: @unchecked Sendable {}
extension Auth__LoginResponse.Message: @unchecked Sendable {}
extension Auth__GenerateApiTokenRequest: @unchecked Sendable {}
extension Auth__GenerateApiTokenRequest.OneOf_Expiry: @unchecked Sendable {}
extension Auth__GenerateApiTokenRequest.Never: @unchecked Sendable {}
extension Auth__GenerateApiTokenRequest.Expires: @unchecked Sendable {}
extension Auth__GenerateApiTokenResponse: @unchecked Sendable {}
extension Auth__RefreshApiTokenRequest: @unchecked Sendable {}
extension Auth__RefreshApiTokenResponse: @unchecked Sendable {}
#endif  // swift(>=5.5) && canImport(_Concurrency)

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "auth"

extension Auth__LoginRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + "._LoginRequest"
  public static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Auth__LoginRequest, rhs: Auth__LoginRequest) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Auth__LoginResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + "._LoginResponse"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "direct_browser"),
    2: .standard(proto: "logged_in"),
    3: .same(proto: "message"),
    4: .same(proto: "error"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try {
        var v: Auth__LoginResponse.DirectBrowser?
        var hadOneofValue = false
        if let current = self.state {
          hadOneofValue = true
          if case .directBrowser(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.state = .directBrowser(v)
        }
      }()
      case 2: try {
        var v: Auth__LoginResponse.LoggedIn?
        var hadOneofValue = false
        if let current = self.state {
          hadOneofValue = true
          if case .loggedIn(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.state = .loggedIn(v)
        }
      }()
      case 3: try {
        var v: Auth__LoginResponse.Message?
        var hadOneofValue = false
        if let current = self.state {
          hadOneofValue = true
          if case .message(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.state = .message(v)
        }
      }()
      case 4: try {
        var v: Auth__LoginResponse.Error?
        var hadOneofValue = false
        if let current = self.state {
          hadOneofValue = true
          if case .error(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.state = .error(v)
        }
      }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    switch self.state {
    case .directBrowser?: try {
      guard case .directBrowser(let v)? = self.state else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }()
    case .loggedIn?: try {
      guard case .loggedIn(let v)? = self.state else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }()
    case .message?: try {
      guard case .message(let v)? = self.state else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    }()
    case .error?: try {
      guard case .error(let v)? = self.state else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
    }()
    case nil: break
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Auth__LoginResponse, rhs: Auth__LoginResponse) -> Bool {
    if lhs.state != rhs.state {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Auth__LoginResponse.LoggedIn: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Auth__LoginResponse.protoMessageName + ".LoggedIn"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "session_token"),
    2: .standard(proto: "valid_for_seconds"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.sessionToken) }()
      case 2: try { try decoder.decodeSingularUInt32Field(value: &self.validForSeconds) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.sessionToken.isEmpty {
      try visitor.visitSingularStringField(value: self.sessionToken, fieldNumber: 1)
    }
    if self.validForSeconds != 0 {
      try visitor.visitSingularUInt32Field(value: self.validForSeconds, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Auth__LoginResponse.LoggedIn, rhs: Auth__LoginResponse.LoggedIn) -> Bool {
    if lhs.sessionToken != rhs.sessionToken {return false}
    if lhs.validForSeconds != rhs.validForSeconds {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Auth__LoginResponse.Error: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Auth__LoginResponse.protoMessageName + ".Error"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "description"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.description_p) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.description_p.isEmpty {
      try visitor.visitSingularStringField(value: self.description_p, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Auth__LoginResponse.Error, rhs: Auth__LoginResponse.Error) -> Bool {
    if lhs.description_p != rhs.description_p {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Auth__LoginResponse.DirectBrowser: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Auth__LoginResponse.protoMessageName + ".DirectBrowser"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "url"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.url) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.url.isEmpty {
      try visitor.visitSingularStringField(value: self.url, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Auth__LoginResponse.DirectBrowser, rhs: Auth__LoginResponse.DirectBrowser) -> Bool {
    if lhs.url != rhs.url {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Auth__LoginResponse.Message: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Auth__LoginResponse.protoMessageName + ".Message"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "text"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.text) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.text.isEmpty {
      try visitor.visitSingularStringField(value: self.text, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Auth__LoginResponse.Message, rhs: Auth__LoginResponse.Message) -> Bool {
    if lhs.text != rhs.text {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Auth__GenerateApiTokenRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + "._GenerateApiTokenRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "never"),
    2: .same(proto: "expires"),
    3: .standard(proto: "auth_token"),
    4: .same(proto: "permissions"),
    5: .standard(proto: "token_id"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try {
        var v: Auth__GenerateApiTokenRequest.Never?
        var hadOneofValue = false
        if let current = self.expiry {
          hadOneofValue = true
          if case .never(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.expiry = .never(v)
        }
      }()
      case 2: try {
        var v: Auth__GenerateApiTokenRequest.Expires?
        var hadOneofValue = false
        if let current = self.expiry {
          hadOneofValue = true
          if case .expires(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.expiry = .expires(v)
        }
      }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.authToken) }()
      case 4: try { try decoder.decodeSingularMessageField(value: &self._permissions) }()
      case 5: try { try decoder.decodeSingularStringField(value: &self.tokenID) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    switch self.expiry {
    case .never?: try {
      guard case .never(let v)? = self.expiry else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }()
    case .expires?: try {
      guard case .expires(let v)? = self.expiry else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }()
    case nil: break
    }
    if !self.authToken.isEmpty {
      try visitor.visitSingularStringField(value: self.authToken, fieldNumber: 3)
    }
    try { if let v = self._permissions {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
    } }()
    if !self.tokenID.isEmpty {
      try visitor.visitSingularStringField(value: self.tokenID, fieldNumber: 5)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Auth__GenerateApiTokenRequest, rhs: Auth__GenerateApiTokenRequest) -> Bool {
    if lhs.expiry != rhs.expiry {return false}
    if lhs.authToken != rhs.authToken {return false}
    if lhs._permissions != rhs._permissions {return false}
    if lhs.tokenID != rhs.tokenID {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Auth__GenerateApiTokenRequest.Never: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Auth__GenerateApiTokenRequest.protoMessageName + ".Never"
  public static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Auth__GenerateApiTokenRequest.Never, rhs: Auth__GenerateApiTokenRequest.Never) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Auth__GenerateApiTokenRequest.Expires: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Auth__GenerateApiTokenRequest.protoMessageName + ".Expires"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "valid_for_seconds"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularUInt32Field(value: &self.validForSeconds) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.validForSeconds != 0 {
      try visitor.visitSingularUInt32Field(value: self.validForSeconds, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Auth__GenerateApiTokenRequest.Expires, rhs: Auth__GenerateApiTokenRequest.Expires) -> Bool {
    if lhs.validForSeconds != rhs.validForSeconds {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Auth__GenerateApiTokenResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + "._GenerateApiTokenResponse"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "api_key"),
    2: .standard(proto: "refresh_token"),
    3: .same(proto: "endpoint"),
    4: .standard(proto: "valid_until"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.apiKey) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.refreshToken) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.endpoint) }()
      case 4: try { try decoder.decodeSingularUInt64Field(value: &self.validUntil) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.apiKey.isEmpty {
      try visitor.visitSingularStringField(value: self.apiKey, fieldNumber: 1)
    }
    if !self.refreshToken.isEmpty {
      try visitor.visitSingularStringField(value: self.refreshToken, fieldNumber: 2)
    }
    if !self.endpoint.isEmpty {
      try visitor.visitSingularStringField(value: self.endpoint, fieldNumber: 3)
    }
    if self.validUntil != 0 {
      try visitor.visitSingularUInt64Field(value: self.validUntil, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Auth__GenerateApiTokenResponse, rhs: Auth__GenerateApiTokenResponse) -> Bool {
    if lhs.apiKey != rhs.apiKey {return false}
    if lhs.refreshToken != rhs.refreshToken {return false}
    if lhs.endpoint != rhs.endpoint {return false}
    if lhs.validUntil != rhs.validUntil {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Auth__RefreshApiTokenRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + "._RefreshApiTokenRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "api_key"),
    2: .standard(proto: "refresh_token"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.apiKey) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.refreshToken) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.apiKey.isEmpty {
      try visitor.visitSingularStringField(value: self.apiKey, fieldNumber: 1)
    }
    if !self.refreshToken.isEmpty {
      try visitor.visitSingularStringField(value: self.refreshToken, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Auth__RefreshApiTokenRequest, rhs: Auth__RefreshApiTokenRequest) -> Bool {
    if lhs.apiKey != rhs.apiKey {return false}
    if lhs.refreshToken != rhs.refreshToken {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Auth__RefreshApiTokenResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + "._RefreshApiTokenResponse"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "api_key"),
    2: .standard(proto: "refresh_token"),
    3: .same(proto: "endpoint"),
    4: .standard(proto: "valid_until"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.apiKey) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.refreshToken) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.endpoint) }()
      case 4: try { try decoder.decodeSingularUInt64Field(value: &self.validUntil) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.apiKey.isEmpty {
      try visitor.visitSingularStringField(value: self.apiKey, fieldNumber: 1)
    }
    if !self.refreshToken.isEmpty {
      try visitor.visitSingularStringField(value: self.refreshToken, fieldNumber: 2)
    }
    if !self.endpoint.isEmpty {
      try visitor.visitSingularStringField(value: self.endpoint, fieldNumber: 3)
    }
    if self.validUntil != 0 {
      try visitor.visitSingularUInt64Field(value: self.validUntil, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Auth__RefreshApiTokenResponse, rhs: Auth__RefreshApiTokenResponse) -> Bool {
    if lhs.apiKey != rhs.apiKey {return false}
    if lhs.refreshToken != rhs.refreshToken {return false}
    if lhs.endpoint != rhs.endpoint {return false}
    if lhs.validUntil != rhs.validUntil {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
