// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: extensions.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

/// A hint so you can decide a little more in the abstract "can this be retried?""
public enum RetrySemantic: SwiftProtobuf.Enum {
  public typealias RawValue = Int

  /// Never retry this message without telling the user. (you should infer this as the default)
  case notRetryable // = 0

  /// You can retry this without surfacing an error to the user.
  case retryable // = 1
  case UNRECOGNIZED(Int)

  public init() {
    self = .notRetryable
  }

  public init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .notRetryable
    case 1: self = .retryable
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  public var rawValue: Int {
    switch self {
    case .notRetryable: return 0
    case .retryable: return 1
    case .UNRECOGNIZED(let i): return i
    }
  }

}

#if swift(>=4.2)

extension RetrySemantic: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static let allCases: [RetrySemantic] = [
    .notRetryable,
    .retryable,
  ]
}

#endif  // swift(>=4.2)

#if swift(>=5.5) && canImport(_Concurrency)
extension RetrySemantic: @unchecked Sendable {}
#endif  // swift(>=5.5) && canImport(_Concurrency)

// MARK: - Extension support defined in extensions.proto.

// MARK: - Extension Properties

// Swift Extensions on the exteneded Messages to add easy access to the declared
// extension fields. The names are based on the extension field name from the proto
// declaration. To avoid naming collisions, the names are prefixed with the name of
// the scope where the extend directive occurs.

extension SwiftProtobuf.Google_Protobuf_MessageOptions {

  /// Can this message be re-driven without an error?
  public var retrySemantic: RetrySemantic {
    get {return getExtensionValue(ext: Extensions_retry_semantic) ?? .notRetryable}
    set {setExtensionValue(ext: Extensions_retry_semantic, value: newValue)}
  }
  /// Returns true if extension `Extensions_retry_semantic`
  /// has been explicitly set.
  public var hasRetrySemantic: Bool {
    return hasExtensionValue(ext: Extensions_retry_semantic)
  }
  /// Clears the value of extension `Extensions_retry_semantic`.
  /// Subsequent reads from it will return its default value.
  public mutating func clearRetrySemantic() {
    clearExtensionValue(ext: Extensions_retry_semantic)
  }

}

// MARK: - File's ExtensionMap: Extensions_Extensions

/// A `SwiftProtobuf.SimpleExtensionMap` that includes all of the extensions defined by
/// this .proto file. It can be used any place an `SwiftProtobuf.ExtensionMap` is needed
/// in parsing, or it can be combined with other `SwiftProtobuf.SimpleExtensionMap`s to create
/// a larger `SwiftProtobuf.SimpleExtensionMap`.
public let Extensions_Extensions: SwiftProtobuf.SimpleExtensionMap = [
  Extensions_retry_semantic
]

// Extension Objects - The only reason these might be needed is when manually
// constructing a `SimpleExtensionMap`, otherwise, use the above _Extension Properties_
// accessors for the extension fields on the messages directly.

/// Can this message be re-driven without an error?
public let Extensions_retry_semantic = SwiftProtobuf.MessageExtension<SwiftProtobuf.OptionalEnumExtensionField<RetrySemantic>, SwiftProtobuf.Google_Protobuf_MessageOptions>(
  _protobuf_fieldNumber: 50000,
  fieldName: "retry_semantic"
)

// MARK: - Code below here is support for the SwiftProtobuf runtime.

extension RetrySemantic: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "NotRetryable"),
    1: .same(proto: "Retryable"),
  ]
}
