//
// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the protocol buffer compiler.
// Source: store.proto
//
import GRPC
import NIO
import NIOConcurrencyHelpers
import SwiftProtobuf


/// Usage: instantiate `Store_StoreClient`, then call methods of this protocol to make API calls.
public protocol Store_StoreClientProtocol: GRPCClient {
  var serviceName: String { get }
  var interceptors: Store_StoreClientInterceptorFactoryProtocol? { get }

  func get(
    _ request: Store__StoreGetRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Store__StoreGetRequest, Store__StoreGetResponse>

  func put(
    _ request: Store__StorePutRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Store__StorePutRequest, Store__StorePutResponse>

  func delete(
    _ request: Store__StoreDeleteRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Store__StoreDeleteRequest, Store__StoreDeleteResponse>
}

extension Store_StoreClientProtocol {
  public var serviceName: String {
    return "store.Store"
  }

  /// Unary call to Get
  ///
  /// - Parameters:
  ///   - request: Request to send to Get.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func get(
    _ request: Store__StoreGetRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Store__StoreGetRequest, Store__StoreGetResponse> {
    return self.makeUnaryCall(
      path: Store_StoreClientMetadata.Methods.get.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetInterceptors() ?? []
    )
  }

  /// Unary call to Put
  ///
  /// - Parameters:
  ///   - request: Request to send to Put.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func put(
    _ request: Store__StorePutRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Store__StorePutRequest, Store__StorePutResponse> {
    return self.makeUnaryCall(
      path: Store_StoreClientMetadata.Methods.put.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makePutInterceptors() ?? []
    )
  }

  /// Unary call to Delete
  ///
  /// - Parameters:
  ///   - request: Request to send to Delete.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func delete(
    _ request: Store__StoreDeleteRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Store__StoreDeleteRequest, Store__StoreDeleteResponse> {
    return self.makeUnaryCall(
      path: Store_StoreClientMetadata.Methods.delete.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeDeleteInterceptors() ?? []
    )
  }
}

@available(*, deprecated)
extension Store_StoreClient: @unchecked Sendable {}

@available(*, deprecated, renamed: "Store_StoreNIOClient")
public final class Store_StoreClient: Store_StoreClientProtocol {
  private let lock = Lock()
  private var _defaultCallOptions: CallOptions
  private var _interceptors: Store_StoreClientInterceptorFactoryProtocol?
  public let channel: GRPCChannel
  public var defaultCallOptions: CallOptions {
    get { self.lock.withLock { return self._defaultCallOptions } }
    set { self.lock.withLockVoid { self._defaultCallOptions = newValue } }
  }
  public var interceptors: Store_StoreClientInterceptorFactoryProtocol? {
    get { self.lock.withLock { return self._interceptors } }
    set { self.lock.withLockVoid { self._interceptors = newValue } }
  }

  /// Creates a client for the store.Store service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  public init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Store_StoreClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self._defaultCallOptions = defaultCallOptions
    self._interceptors = interceptors
  }
}

public struct Store_StoreNIOClient: Store_StoreClientProtocol {
  public var channel: GRPCChannel
  public var defaultCallOptions: CallOptions
  public var interceptors: Store_StoreClientInterceptorFactoryProtocol?

  /// Creates a client for the store.Store service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  public init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Store_StoreClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
public protocol Store_StoreAsyncClientProtocol: GRPCClient {
  static var serviceDescriptor: GRPCServiceDescriptor { get }
  var interceptors: Store_StoreClientInterceptorFactoryProtocol? { get }

  func makeGetCall(
    _ request: Store__StoreGetRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Store__StoreGetRequest, Store__StoreGetResponse>

  func makePutCall(
    _ request: Store__StorePutRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Store__StorePutRequest, Store__StorePutResponse>

  func makeDeleteCall(
    _ request: Store__StoreDeleteRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Store__StoreDeleteRequest, Store__StoreDeleteResponse>
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Store_StoreAsyncClientProtocol {
  public static var serviceDescriptor: GRPCServiceDescriptor {
    return Store_StoreClientMetadata.serviceDescriptor
  }

  public var interceptors: Store_StoreClientInterceptorFactoryProtocol? {
    return nil
  }

  public func makeGetCall(
    _ request: Store__StoreGetRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Store__StoreGetRequest, Store__StoreGetResponse> {
    return self.makeAsyncUnaryCall(
      path: Store_StoreClientMetadata.Methods.get.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetInterceptors() ?? []
    )
  }

  public func makePutCall(
    _ request: Store__StorePutRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Store__StorePutRequest, Store__StorePutResponse> {
    return self.makeAsyncUnaryCall(
      path: Store_StoreClientMetadata.Methods.put.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makePutInterceptors() ?? []
    )
  }

  public func makeDeleteCall(
    _ request: Store__StoreDeleteRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Store__StoreDeleteRequest, Store__StoreDeleteResponse> {
    return self.makeAsyncUnaryCall(
      path: Store_StoreClientMetadata.Methods.delete.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeDeleteInterceptors() ?? []
    )
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Store_StoreAsyncClientProtocol {
  public func get(
    _ request: Store__StoreGetRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Store__StoreGetResponse {
    return try await self.performAsyncUnaryCall(
      path: Store_StoreClientMetadata.Methods.get.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetInterceptors() ?? []
    )
  }

  public func put(
    _ request: Store__StorePutRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Store__StorePutResponse {
    return try await self.performAsyncUnaryCall(
      path: Store_StoreClientMetadata.Methods.put.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makePutInterceptors() ?? []
    )
  }

  public func delete(
    _ request: Store__StoreDeleteRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Store__StoreDeleteResponse {
    return try await self.performAsyncUnaryCall(
      path: Store_StoreClientMetadata.Methods.delete.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeDeleteInterceptors() ?? []
    )
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
public struct Store_StoreAsyncClient: Store_StoreAsyncClientProtocol {
  public var channel: GRPCChannel
  public var defaultCallOptions: CallOptions
  public var interceptors: Store_StoreClientInterceptorFactoryProtocol?

  public init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Store_StoreClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

public protocol Store_StoreClientInterceptorFactoryProtocol: Sendable {

  /// - Returns: Interceptors to use when invoking 'get'.
  func makeGetInterceptors() -> [ClientInterceptor<Store__StoreGetRequest, Store__StoreGetResponse>]

  /// - Returns: Interceptors to use when invoking 'put'.
  func makePutInterceptors() -> [ClientInterceptor<Store__StorePutRequest, Store__StorePutResponse>]

  /// - Returns: Interceptors to use when invoking 'delete'.
  func makeDeleteInterceptors() -> [ClientInterceptor<Store__StoreDeleteRequest, Store__StoreDeleteResponse>]
}

public enum Store_StoreClientMetadata {
  public static let serviceDescriptor = GRPCServiceDescriptor(
    name: "Store",
    fullName: "store.Store",
    methods: [
      Store_StoreClientMetadata.Methods.get,
      Store_StoreClientMetadata.Methods.put,
      Store_StoreClientMetadata.Methods.delete,
    ]
  )

  public enum Methods {
    public static let get = GRPCMethodDescriptor(
      name: "Get",
      path: "/store.Store/Get",
      type: GRPCCallType.unary
    )

    public static let put = GRPCMethodDescriptor(
      name: "Put",
      path: "/store.Store/Put",
      type: GRPCCallType.unary
    )

    public static let delete = GRPCMethodDescriptor(
      name: "Delete",
      path: "/store.Store/Delete",
      type: GRPCCallType.unary
    )
  }
}

/// To build a server, implement a class that conforms to this protocol.
public protocol Store_StoreProvider: CallHandlerProvider {
  var interceptors: Store_StoreServerInterceptorFactoryProtocol? { get }

  func get(request: Store__StoreGetRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Store__StoreGetResponse>

  func put(request: Store__StorePutRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Store__StorePutResponse>

  func delete(request: Store__StoreDeleteRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Store__StoreDeleteResponse>
}

extension Store_StoreProvider {
  public var serviceName: Substring {
    return Store_StoreServerMetadata.serviceDescriptor.fullName[...]
  }

  /// Determines, calls and returns the appropriate request handler, depending on the request's method.
  /// Returns nil for methods not handled by this service.
  public func handle(
    method name: Substring,
    context: CallHandlerContext
  ) -> GRPCServerHandlerProtocol? {
    switch name {
    case "Get":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Store__StoreGetRequest>(),
        responseSerializer: ProtobufSerializer<Store__StoreGetResponse>(),
        interceptors: self.interceptors?.makeGetInterceptors() ?? [],
        userFunction: self.get(request:context:)
      )

    case "Put":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Store__StorePutRequest>(),
        responseSerializer: ProtobufSerializer<Store__StorePutResponse>(),
        interceptors: self.interceptors?.makePutInterceptors() ?? [],
        userFunction: self.put(request:context:)
      )

    case "Delete":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Store__StoreDeleteRequest>(),
        responseSerializer: ProtobufSerializer<Store__StoreDeleteResponse>(),
        interceptors: self.interceptors?.makeDeleteInterceptors() ?? [],
        userFunction: self.delete(request:context:)
      )

    default:
      return nil
    }
  }
}

/// To implement a server, implement an object which conforms to this protocol.
@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
public protocol Store_StoreAsyncProvider: CallHandlerProvider, Sendable {
  static var serviceDescriptor: GRPCServiceDescriptor { get }
  var interceptors: Store_StoreServerInterceptorFactoryProtocol? { get }

  func get(
    request: Store__StoreGetRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Store__StoreGetResponse

  func put(
    request: Store__StorePutRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Store__StorePutResponse

  func delete(
    request: Store__StoreDeleteRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Store__StoreDeleteResponse
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Store_StoreAsyncProvider {
  public static var serviceDescriptor: GRPCServiceDescriptor {
    return Store_StoreServerMetadata.serviceDescriptor
  }

  public var serviceName: Substring {
    return Store_StoreServerMetadata.serviceDescriptor.fullName[...]
  }

  public var interceptors: Store_StoreServerInterceptorFactoryProtocol? {
    return nil
  }

  public func handle(
    method name: Substring,
    context: CallHandlerContext
  ) -> GRPCServerHandlerProtocol? {
    switch name {
    case "Get":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Store__StoreGetRequest>(),
        responseSerializer: ProtobufSerializer<Store__StoreGetResponse>(),
        interceptors: self.interceptors?.makeGetInterceptors() ?? [],
        wrapping: { try await self.get(request: $0, context: $1) }
      )

    case "Put":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Store__StorePutRequest>(),
        responseSerializer: ProtobufSerializer<Store__StorePutResponse>(),
        interceptors: self.interceptors?.makePutInterceptors() ?? [],
        wrapping: { try await self.put(request: $0, context: $1) }
      )

    case "Delete":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Store__StoreDeleteRequest>(),
        responseSerializer: ProtobufSerializer<Store__StoreDeleteResponse>(),
        interceptors: self.interceptors?.makeDeleteInterceptors() ?? [],
        wrapping: { try await self.delete(request: $0, context: $1) }
      )

    default:
      return nil
    }
  }
}

public protocol Store_StoreServerInterceptorFactoryProtocol: Sendable {

  /// - Returns: Interceptors to use when handling 'get'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeGetInterceptors() -> [ServerInterceptor<Store__StoreGetRequest, Store__StoreGetResponse>]

  /// - Returns: Interceptors to use when handling 'put'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makePutInterceptors() -> [ServerInterceptor<Store__StorePutRequest, Store__StorePutResponse>]

  /// - Returns: Interceptors to use when handling 'delete'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeDeleteInterceptors() -> [ServerInterceptor<Store__StoreDeleteRequest, Store__StoreDeleteResponse>]
}

public enum Store_StoreServerMetadata {
  public static let serviceDescriptor = GRPCServiceDescriptor(
    name: "Store",
    fullName: "store.Store",
    methods: [
      Store_StoreServerMetadata.Methods.get,
      Store_StoreServerMetadata.Methods.put,
      Store_StoreServerMetadata.Methods.delete,
    ]
  )

  public enum Methods {
    public static let get = GRPCMethodDescriptor(
      name: "Get",
      path: "/store.Store/Get",
      type: GRPCCallType.unary
    )

    public static let put = GRPCMethodDescriptor(
      name: "Put",
      path: "/store.Store/Put",
      type: GRPCCallType.unary
    )

    public static let delete = GRPCMethodDescriptor(
      name: "Delete",
      path: "/store.Store/Delete",
      type: GRPCCallType.unary
    )
  }
}
