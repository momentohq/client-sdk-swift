//
// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the protocol buffer compiler.
// Source: vectorindex.proto
//
import GRPC
import NIO
import NIOConcurrencyHelpers
import SwiftProtobuf


/// Usage: instantiate `Vectorindex_VectorIndexClient`, then call methods of this protocol to make API calls.
public protocol Vectorindex_VectorIndexClientProtocol: GRPCClient {
  var serviceName: String { get }
  var interceptors: Vectorindex_VectorIndexClientInterceptorFactoryProtocol? { get }

  func upsertItemBatch(
    _ request: Vectorindex__UpsertItemBatchRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Vectorindex__UpsertItemBatchRequest, Vectorindex__UpsertItemBatchResponse>

  func deleteItemBatch(
    _ request: Vectorindex__DeleteItemBatchRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Vectorindex__DeleteItemBatchRequest, Vectorindex__DeleteItemBatchResponse>

  func search(
    _ request: Vectorindex__SearchRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Vectorindex__SearchRequest, Vectorindex__SearchResponse>

  func searchAndFetchVectors(
    _ request: Vectorindex__SearchAndFetchVectorsRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Vectorindex__SearchAndFetchVectorsRequest, Vectorindex__SearchAndFetchVectorsResponse>
}

extension Vectorindex_VectorIndexClientProtocol {
  public var serviceName: String {
    return "vectorindex.VectorIndex"
  }

  /// Unary call to UpsertItemBatch
  ///
  /// - Parameters:
  ///   - request: Request to send to UpsertItemBatch.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func upsertItemBatch(
    _ request: Vectorindex__UpsertItemBatchRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Vectorindex__UpsertItemBatchRequest, Vectorindex__UpsertItemBatchResponse> {
    return self.makeUnaryCall(
      path: Vectorindex_VectorIndexClientMetadata.Methods.upsertItemBatch.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeUpsertItemBatchInterceptors() ?? []
    )
  }

  /// Unary call to DeleteItemBatch
  ///
  /// - Parameters:
  ///   - request: Request to send to DeleteItemBatch.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func deleteItemBatch(
    _ request: Vectorindex__DeleteItemBatchRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Vectorindex__DeleteItemBatchRequest, Vectorindex__DeleteItemBatchResponse> {
    return self.makeUnaryCall(
      path: Vectorindex_VectorIndexClientMetadata.Methods.deleteItemBatch.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeDeleteItemBatchInterceptors() ?? []
    )
  }

  /// Unary call to Search
  ///
  /// - Parameters:
  ///   - request: Request to send to Search.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func search(
    _ request: Vectorindex__SearchRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Vectorindex__SearchRequest, Vectorindex__SearchResponse> {
    return self.makeUnaryCall(
      path: Vectorindex_VectorIndexClientMetadata.Methods.search.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSearchInterceptors() ?? []
    )
  }

  /// Unary call to SearchAndFetchVectors
  ///
  /// - Parameters:
  ///   - request: Request to send to SearchAndFetchVectors.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func searchAndFetchVectors(
    _ request: Vectorindex__SearchAndFetchVectorsRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Vectorindex__SearchAndFetchVectorsRequest, Vectorindex__SearchAndFetchVectorsResponse> {
    return self.makeUnaryCall(
      path: Vectorindex_VectorIndexClientMetadata.Methods.searchAndFetchVectors.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSearchAndFetchVectorsInterceptors() ?? []
    )
  }
}

@available(*, deprecated)
extension Vectorindex_VectorIndexClient: @unchecked Sendable {}

@available(*, deprecated, renamed: "Vectorindex_VectorIndexNIOClient")
public final class Vectorindex_VectorIndexClient: Vectorindex_VectorIndexClientProtocol {
  private let lock = Lock()
  private var _defaultCallOptions: CallOptions
  private var _interceptors: Vectorindex_VectorIndexClientInterceptorFactoryProtocol?
  public let channel: GRPCChannel
  public var defaultCallOptions: CallOptions {
    get { self.lock.withLock { return self._defaultCallOptions } }
    set { self.lock.withLockVoid { self._defaultCallOptions = newValue } }
  }
  public var interceptors: Vectorindex_VectorIndexClientInterceptorFactoryProtocol? {
    get { self.lock.withLock { return self._interceptors } }
    set { self.lock.withLockVoid { self._interceptors = newValue } }
  }

  /// Creates a client for the vectorindex.VectorIndex service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  public init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Vectorindex_VectorIndexClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self._defaultCallOptions = defaultCallOptions
    self._interceptors = interceptors
  }
}

public struct Vectorindex_VectorIndexNIOClient: Vectorindex_VectorIndexClientProtocol {
  public var channel: GRPCChannel
  public var defaultCallOptions: CallOptions
  public var interceptors: Vectorindex_VectorIndexClientInterceptorFactoryProtocol?

  /// Creates a client for the vectorindex.VectorIndex service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  public init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Vectorindex_VectorIndexClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
public protocol Vectorindex_VectorIndexAsyncClientProtocol: GRPCClient {
  static var serviceDescriptor: GRPCServiceDescriptor { get }
  var interceptors: Vectorindex_VectorIndexClientInterceptorFactoryProtocol? { get }

  func makeUpsertItemBatchCall(
    _ request: Vectorindex__UpsertItemBatchRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Vectorindex__UpsertItemBatchRequest, Vectorindex__UpsertItemBatchResponse>

  func makeDeleteItemBatchCall(
    _ request: Vectorindex__DeleteItemBatchRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Vectorindex__DeleteItemBatchRequest, Vectorindex__DeleteItemBatchResponse>

  func makeSearchCall(
    _ request: Vectorindex__SearchRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Vectorindex__SearchRequest, Vectorindex__SearchResponse>

  func makeSearchAndFetchVectorsCall(
    _ request: Vectorindex__SearchAndFetchVectorsRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Vectorindex__SearchAndFetchVectorsRequest, Vectorindex__SearchAndFetchVectorsResponse>
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Vectorindex_VectorIndexAsyncClientProtocol {
  public static var serviceDescriptor: GRPCServiceDescriptor {
    return Vectorindex_VectorIndexClientMetadata.serviceDescriptor
  }

  public var interceptors: Vectorindex_VectorIndexClientInterceptorFactoryProtocol? {
    return nil
  }

  public func makeUpsertItemBatchCall(
    _ request: Vectorindex__UpsertItemBatchRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Vectorindex__UpsertItemBatchRequest, Vectorindex__UpsertItemBatchResponse> {
    return self.makeAsyncUnaryCall(
      path: Vectorindex_VectorIndexClientMetadata.Methods.upsertItemBatch.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeUpsertItemBatchInterceptors() ?? []
    )
  }

  public func makeDeleteItemBatchCall(
    _ request: Vectorindex__DeleteItemBatchRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Vectorindex__DeleteItemBatchRequest, Vectorindex__DeleteItemBatchResponse> {
    return self.makeAsyncUnaryCall(
      path: Vectorindex_VectorIndexClientMetadata.Methods.deleteItemBatch.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeDeleteItemBatchInterceptors() ?? []
    )
  }

  public func makeSearchCall(
    _ request: Vectorindex__SearchRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Vectorindex__SearchRequest, Vectorindex__SearchResponse> {
    return self.makeAsyncUnaryCall(
      path: Vectorindex_VectorIndexClientMetadata.Methods.search.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSearchInterceptors() ?? []
    )
  }

  public func makeSearchAndFetchVectorsCall(
    _ request: Vectorindex__SearchAndFetchVectorsRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Vectorindex__SearchAndFetchVectorsRequest, Vectorindex__SearchAndFetchVectorsResponse> {
    return self.makeAsyncUnaryCall(
      path: Vectorindex_VectorIndexClientMetadata.Methods.searchAndFetchVectors.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSearchAndFetchVectorsInterceptors() ?? []
    )
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Vectorindex_VectorIndexAsyncClientProtocol {
  public func upsertItemBatch(
    _ request: Vectorindex__UpsertItemBatchRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Vectorindex__UpsertItemBatchResponse {
    return try await self.performAsyncUnaryCall(
      path: Vectorindex_VectorIndexClientMetadata.Methods.upsertItemBatch.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeUpsertItemBatchInterceptors() ?? []
    )
  }

  public func deleteItemBatch(
    _ request: Vectorindex__DeleteItemBatchRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Vectorindex__DeleteItemBatchResponse {
    return try await self.performAsyncUnaryCall(
      path: Vectorindex_VectorIndexClientMetadata.Methods.deleteItemBatch.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeDeleteItemBatchInterceptors() ?? []
    )
  }

  public func search(
    _ request: Vectorindex__SearchRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Vectorindex__SearchResponse {
    return try await self.performAsyncUnaryCall(
      path: Vectorindex_VectorIndexClientMetadata.Methods.search.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSearchInterceptors() ?? []
    )
  }

  public func searchAndFetchVectors(
    _ request: Vectorindex__SearchAndFetchVectorsRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Vectorindex__SearchAndFetchVectorsResponse {
    return try await self.performAsyncUnaryCall(
      path: Vectorindex_VectorIndexClientMetadata.Methods.searchAndFetchVectors.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSearchAndFetchVectorsInterceptors() ?? []
    )
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
public struct Vectorindex_VectorIndexAsyncClient: Vectorindex_VectorIndexAsyncClientProtocol {
  public var channel: GRPCChannel
  public var defaultCallOptions: CallOptions
  public var interceptors: Vectorindex_VectorIndexClientInterceptorFactoryProtocol?

  public init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Vectorindex_VectorIndexClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

public protocol Vectorindex_VectorIndexClientInterceptorFactoryProtocol: Sendable {

  /// - Returns: Interceptors to use when invoking 'upsertItemBatch'.
  func makeUpsertItemBatchInterceptors() -> [ClientInterceptor<Vectorindex__UpsertItemBatchRequest, Vectorindex__UpsertItemBatchResponse>]

  /// - Returns: Interceptors to use when invoking 'deleteItemBatch'.
  func makeDeleteItemBatchInterceptors() -> [ClientInterceptor<Vectorindex__DeleteItemBatchRequest, Vectorindex__DeleteItemBatchResponse>]

  /// - Returns: Interceptors to use when invoking 'search'.
  func makeSearchInterceptors() -> [ClientInterceptor<Vectorindex__SearchRequest, Vectorindex__SearchResponse>]

  /// - Returns: Interceptors to use when invoking 'searchAndFetchVectors'.
  func makeSearchAndFetchVectorsInterceptors() -> [ClientInterceptor<Vectorindex__SearchAndFetchVectorsRequest, Vectorindex__SearchAndFetchVectorsResponse>]
}

public enum Vectorindex_VectorIndexClientMetadata {
  public static let serviceDescriptor = GRPCServiceDescriptor(
    name: "VectorIndex",
    fullName: "vectorindex.VectorIndex",
    methods: [
      Vectorindex_VectorIndexClientMetadata.Methods.upsertItemBatch,
      Vectorindex_VectorIndexClientMetadata.Methods.deleteItemBatch,
      Vectorindex_VectorIndexClientMetadata.Methods.search,
      Vectorindex_VectorIndexClientMetadata.Methods.searchAndFetchVectors,
    ]
  )

  public enum Methods {
    public static let upsertItemBatch = GRPCMethodDescriptor(
      name: "UpsertItemBatch",
      path: "/vectorindex.VectorIndex/UpsertItemBatch",
      type: GRPCCallType.unary
    )

    public static let deleteItemBatch = GRPCMethodDescriptor(
      name: "DeleteItemBatch",
      path: "/vectorindex.VectorIndex/DeleteItemBatch",
      type: GRPCCallType.unary
    )

    public static let search = GRPCMethodDescriptor(
      name: "Search",
      path: "/vectorindex.VectorIndex/Search",
      type: GRPCCallType.unary
    )

    public static let searchAndFetchVectors = GRPCMethodDescriptor(
      name: "SearchAndFetchVectors",
      path: "/vectorindex.VectorIndex/SearchAndFetchVectors",
      type: GRPCCallType.unary
    )
  }
}

/// To build a server, implement a class that conforms to this protocol.
public protocol Vectorindex_VectorIndexProvider: CallHandlerProvider {
  var interceptors: Vectorindex_VectorIndexServerInterceptorFactoryProtocol? { get }

  func upsertItemBatch(request: Vectorindex__UpsertItemBatchRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Vectorindex__UpsertItemBatchResponse>

  func deleteItemBatch(request: Vectorindex__DeleteItemBatchRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Vectorindex__DeleteItemBatchResponse>

  func search(request: Vectorindex__SearchRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Vectorindex__SearchResponse>

  func searchAndFetchVectors(request: Vectorindex__SearchAndFetchVectorsRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Vectorindex__SearchAndFetchVectorsResponse>
}

extension Vectorindex_VectorIndexProvider {
  public var serviceName: Substring {
    return Vectorindex_VectorIndexServerMetadata.serviceDescriptor.fullName[...]
  }

  /// Determines, calls and returns the appropriate request handler, depending on the request's method.
  /// Returns nil for methods not handled by this service.
  public func handle(
    method name: Substring,
    context: CallHandlerContext
  ) -> GRPCServerHandlerProtocol? {
    switch name {
    case "UpsertItemBatch":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Vectorindex__UpsertItemBatchRequest>(),
        responseSerializer: ProtobufSerializer<Vectorindex__UpsertItemBatchResponse>(),
        interceptors: self.interceptors?.makeUpsertItemBatchInterceptors() ?? [],
        userFunction: self.upsertItemBatch(request:context:)
      )

    case "DeleteItemBatch":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Vectorindex__DeleteItemBatchRequest>(),
        responseSerializer: ProtobufSerializer<Vectorindex__DeleteItemBatchResponse>(),
        interceptors: self.interceptors?.makeDeleteItemBatchInterceptors() ?? [],
        userFunction: self.deleteItemBatch(request:context:)
      )

    case "Search":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Vectorindex__SearchRequest>(),
        responseSerializer: ProtobufSerializer<Vectorindex__SearchResponse>(),
        interceptors: self.interceptors?.makeSearchInterceptors() ?? [],
        userFunction: self.search(request:context:)
      )

    case "SearchAndFetchVectors":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Vectorindex__SearchAndFetchVectorsRequest>(),
        responseSerializer: ProtobufSerializer<Vectorindex__SearchAndFetchVectorsResponse>(),
        interceptors: self.interceptors?.makeSearchAndFetchVectorsInterceptors() ?? [],
        userFunction: self.searchAndFetchVectors(request:context:)
      )

    default:
      return nil
    }
  }
}

/// To implement a server, implement an object which conforms to this protocol.
@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
public protocol Vectorindex_VectorIndexAsyncProvider: CallHandlerProvider, Sendable {
  static var serviceDescriptor: GRPCServiceDescriptor { get }
  var interceptors: Vectorindex_VectorIndexServerInterceptorFactoryProtocol? { get }

  func upsertItemBatch(
    request: Vectorindex__UpsertItemBatchRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Vectorindex__UpsertItemBatchResponse

  func deleteItemBatch(
    request: Vectorindex__DeleteItemBatchRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Vectorindex__DeleteItemBatchResponse

  func search(
    request: Vectorindex__SearchRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Vectorindex__SearchResponse

  func searchAndFetchVectors(
    request: Vectorindex__SearchAndFetchVectorsRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Vectorindex__SearchAndFetchVectorsResponse
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Vectorindex_VectorIndexAsyncProvider {
  public static var serviceDescriptor: GRPCServiceDescriptor {
    return Vectorindex_VectorIndexServerMetadata.serviceDescriptor
  }

  public var serviceName: Substring {
    return Vectorindex_VectorIndexServerMetadata.serviceDescriptor.fullName[...]
  }

  public var interceptors: Vectorindex_VectorIndexServerInterceptorFactoryProtocol? {
    return nil
  }

  public func handle(
    method name: Substring,
    context: CallHandlerContext
  ) -> GRPCServerHandlerProtocol? {
    switch name {
    case "UpsertItemBatch":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Vectorindex__UpsertItemBatchRequest>(),
        responseSerializer: ProtobufSerializer<Vectorindex__UpsertItemBatchResponse>(),
        interceptors: self.interceptors?.makeUpsertItemBatchInterceptors() ?? [],
        wrapping: { try await self.upsertItemBatch(request: $0, context: $1) }
      )

    case "DeleteItemBatch":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Vectorindex__DeleteItemBatchRequest>(),
        responseSerializer: ProtobufSerializer<Vectorindex__DeleteItemBatchResponse>(),
        interceptors: self.interceptors?.makeDeleteItemBatchInterceptors() ?? [],
        wrapping: { try await self.deleteItemBatch(request: $0, context: $1) }
      )

    case "Search":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Vectorindex__SearchRequest>(),
        responseSerializer: ProtobufSerializer<Vectorindex__SearchResponse>(),
        interceptors: self.interceptors?.makeSearchInterceptors() ?? [],
        wrapping: { try await self.search(request: $0, context: $1) }
      )

    case "SearchAndFetchVectors":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Vectorindex__SearchAndFetchVectorsRequest>(),
        responseSerializer: ProtobufSerializer<Vectorindex__SearchAndFetchVectorsResponse>(),
        interceptors: self.interceptors?.makeSearchAndFetchVectorsInterceptors() ?? [],
        wrapping: { try await self.searchAndFetchVectors(request: $0, context: $1) }
      )

    default:
      return nil
    }
  }
}

public protocol Vectorindex_VectorIndexServerInterceptorFactoryProtocol: Sendable {

  /// - Returns: Interceptors to use when handling 'upsertItemBatch'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeUpsertItemBatchInterceptors() -> [ServerInterceptor<Vectorindex__UpsertItemBatchRequest, Vectorindex__UpsertItemBatchResponse>]

  /// - Returns: Interceptors to use when handling 'deleteItemBatch'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeDeleteItemBatchInterceptors() -> [ServerInterceptor<Vectorindex__DeleteItemBatchRequest, Vectorindex__DeleteItemBatchResponse>]

  /// - Returns: Interceptors to use when handling 'search'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeSearchInterceptors() -> [ServerInterceptor<Vectorindex__SearchRequest, Vectorindex__SearchResponse>]

  /// - Returns: Interceptors to use when handling 'searchAndFetchVectors'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeSearchAndFetchVectorsInterceptors() -> [ServerInterceptor<Vectorindex__SearchAndFetchVectorsRequest, Vectorindex__SearchAndFetchVectorsResponse>]
}

public enum Vectorindex_VectorIndexServerMetadata {
  public static let serviceDescriptor = GRPCServiceDescriptor(
    name: "VectorIndex",
    fullName: "vectorindex.VectorIndex",
    methods: [
      Vectorindex_VectorIndexServerMetadata.Methods.upsertItemBatch,
      Vectorindex_VectorIndexServerMetadata.Methods.deleteItemBatch,
      Vectorindex_VectorIndexServerMetadata.Methods.search,
      Vectorindex_VectorIndexServerMetadata.Methods.searchAndFetchVectors,
    ]
  )

  public enum Methods {
    public static let upsertItemBatch = GRPCMethodDescriptor(
      name: "UpsertItemBatch",
      path: "/vectorindex.VectorIndex/UpsertItemBatch",
      type: GRPCCallType.unary
    )

    public static let deleteItemBatch = GRPCMethodDescriptor(
      name: "DeleteItemBatch",
      path: "/vectorindex.VectorIndex/DeleteItemBatch",
      type: GRPCCallType.unary
    )

    public static let search = GRPCMethodDescriptor(
      name: "Search",
      path: "/vectorindex.VectorIndex/Search",
      type: GRPCCallType.unary
    )

    public static let searchAndFetchVectors = GRPCMethodDescriptor(
      name: "SearchAndFetchVectors",
      path: "/vectorindex.VectorIndex/SearchAndFetchVectors",
      type: GRPCCallType.unary
    )
  }
}
