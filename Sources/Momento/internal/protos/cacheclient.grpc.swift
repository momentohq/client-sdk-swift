//
// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the protocol buffer compiler.
// Source: cacheclient.proto
//
import GRPC
import NIO
import NIOConcurrencyHelpers
import SwiftProtobuf


/// Usage: instantiate `CacheClient_ScsClient`, then call methods of this protocol to make API calls.
public protocol CacheClient_ScsClientProtocol: GRPCClient {
  var serviceName: String { get }
  var interceptors: CacheClient_ScsClientInterceptorFactoryProtocol? { get }

  func get(
    _ request: CacheClient__GetRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<CacheClient__GetRequest, CacheClient__GetResponse>

  func set(
    _ request: CacheClient__SetRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<CacheClient__SetRequest, CacheClient__SetResponse>

  func setIfNotExists(
    _ request: CacheClient__SetIfNotExistsRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<CacheClient__SetIfNotExistsRequest, CacheClient__SetIfNotExistsResponse>

  func delete(
    _ request: CacheClient__DeleteRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<CacheClient__DeleteRequest, CacheClient__DeleteResponse>

  func keysExist(
    _ request: CacheClient__KeysExistRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<CacheClient__KeysExistRequest, CacheClient__KeysExistResponse>

  func increment(
    _ request: CacheClient__IncrementRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<CacheClient__IncrementRequest, CacheClient__IncrementResponse>

  func updateTtl(
    _ request: CacheClient__UpdateTtlRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<CacheClient__UpdateTtlRequest, CacheClient__UpdateTtlResponse>

  func itemGetTtl(
    _ request: CacheClient__ItemGetTtlRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<CacheClient__ItemGetTtlRequest, CacheClient__ItemGetTtlResponse>

  func itemGetType(
    _ request: CacheClient__ItemGetTypeRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<CacheClient__ItemGetTypeRequest, CacheClient__ItemGetTypeResponse>

  func dictionaryGet(
    _ request: CacheClient__DictionaryGetRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<CacheClient__DictionaryGetRequest, CacheClient__DictionaryGetResponse>

  func dictionaryFetch(
    _ request: CacheClient__DictionaryFetchRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<CacheClient__DictionaryFetchRequest, CacheClient__DictionaryFetchResponse>

  func dictionarySet(
    _ request: CacheClient__DictionarySetRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<CacheClient__DictionarySetRequest, CacheClient__DictionarySetResponse>

  func dictionaryIncrement(
    _ request: CacheClient__DictionaryIncrementRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<CacheClient__DictionaryIncrementRequest, CacheClient__DictionaryIncrementResponse>

  func dictionaryDelete(
    _ request: CacheClient__DictionaryDeleteRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<CacheClient__DictionaryDeleteRequest, CacheClient__DictionaryDeleteResponse>

  func dictionaryLength(
    _ request: CacheClient__DictionaryLengthRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<CacheClient__DictionaryLengthRequest, CacheClient__DictionaryLengthResponse>

  func setFetch(
    _ request: CacheClient__SetFetchRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<CacheClient__SetFetchRequest, CacheClient__SetFetchResponse>

  func setUnion(
    _ request: CacheClient__SetUnionRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<CacheClient__SetUnionRequest, CacheClient__SetUnionResponse>

  func setDifference(
    _ request: CacheClient__SetDifferenceRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<CacheClient__SetDifferenceRequest, CacheClient__SetDifferenceResponse>

  func setContains(
    _ request: CacheClient__SetContainsRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<CacheClient__SetContainsRequest, CacheClient__SetContainsResponse>

  func setLength(
    _ request: CacheClient__SetLengthRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<CacheClient__SetLengthRequest, CacheClient__SetLengthResponse>

  func setPop(
    _ request: CacheClient__SetPopRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<CacheClient__SetPopRequest, CacheClient__SetPopResponse>

  func listPushFront(
    _ request: CacheClient__ListPushFrontRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<CacheClient__ListPushFrontRequest, CacheClient__ListPushFrontResponse>

  func listPushBack(
    _ request: CacheClient__ListPushBackRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<CacheClient__ListPushBackRequest, CacheClient__ListPushBackResponse>

  func listPopFront(
    _ request: CacheClient__ListPopFrontRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<CacheClient__ListPopFrontRequest, CacheClient__ListPopFrontResponse>

  func listPopBack(
    _ request: CacheClient__ListPopBackRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<CacheClient__ListPopBackRequest, CacheClient__ListPopBackResponse>

  func listErase(
    _ request: CacheClient__ListEraseRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<CacheClient__ListEraseRequest, CacheClient__ListEraseResponse>

  func listRemove(
    _ request: CacheClient__ListRemoveRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<CacheClient__ListRemoveRequest, CacheClient__ListRemoveResponse>

  func listFetch(
    _ request: CacheClient__ListFetchRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<CacheClient__ListFetchRequest, CacheClient__ListFetchResponse>

  func listLength(
    _ request: CacheClient__ListLengthRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<CacheClient__ListLengthRequest, CacheClient__ListLengthResponse>

  func listConcatenateFront(
    _ request: CacheClient__ListConcatenateFrontRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<CacheClient__ListConcatenateFrontRequest, CacheClient__ListConcatenateFrontResponse>

  func listConcatenateBack(
    _ request: CacheClient__ListConcatenateBackRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<CacheClient__ListConcatenateBackRequest, CacheClient__ListConcatenateBackResponse>

  func listRetain(
    _ request: CacheClient__ListRetainRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<CacheClient__ListRetainRequest, CacheClient__ListRetainResponse>

  func sortedSetPut(
    _ request: CacheClient__SortedSetPutRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<CacheClient__SortedSetPutRequest, CacheClient__SortedSetPutResponse>

  func sortedSetFetch(
    _ request: CacheClient__SortedSetFetchRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<CacheClient__SortedSetFetchRequest, CacheClient__SortedSetFetchResponse>

  func sortedSetGetScore(
    _ request: CacheClient__SortedSetGetScoreRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<CacheClient__SortedSetGetScoreRequest, CacheClient__SortedSetGetScoreResponse>

  func sortedSetRemove(
    _ request: CacheClient__SortedSetRemoveRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<CacheClient__SortedSetRemoveRequest, CacheClient__SortedSetRemoveResponse>

  func sortedSetIncrement(
    _ request: CacheClient__SortedSetIncrementRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<CacheClient__SortedSetIncrementRequest, CacheClient__SortedSetIncrementResponse>

  func sortedSetGetRank(
    _ request: CacheClient__SortedSetGetRankRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<CacheClient__SortedSetGetRankRequest, CacheClient__SortedSetGetRankResponse>

  func sortedSetLength(
    _ request: CacheClient__SortedSetLengthRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<CacheClient__SortedSetLengthRequest, CacheClient__SortedSetLengthResponse>

  func sortedSetLengthByScore(
    _ request: CacheClient__SortedSetLengthByScoreRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<CacheClient__SortedSetLengthByScoreRequest, CacheClient__SortedSetLengthByScoreResponse>
}

extension CacheClient_ScsClientProtocol {
  public var serviceName: String {
    return "cache_client.Scs"
  }

  /// Unary call to Get
  ///
  /// - Parameters:
  ///   - request: Request to send to Get.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func get(
    _ request: CacheClient__GetRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<CacheClient__GetRequest, CacheClient__GetResponse> {
    return self.makeUnaryCall(
      path: CacheClient_ScsClientMetadata.Methods.get.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetInterceptors() ?? []
    )
  }

  /// Unary call to Set
  ///
  /// - Parameters:
  ///   - request: Request to send to Set.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func set(
    _ request: CacheClient__SetRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<CacheClient__SetRequest, CacheClient__SetResponse> {
    return self.makeUnaryCall(
      path: CacheClient_ScsClientMetadata.Methods.set.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSetInterceptors() ?? []
    )
  }

  /// Unary call to SetIfNotExists
  ///
  /// - Parameters:
  ///   - request: Request to send to SetIfNotExists.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func setIfNotExists(
    _ request: CacheClient__SetIfNotExistsRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<CacheClient__SetIfNotExistsRequest, CacheClient__SetIfNotExistsResponse> {
    return self.makeUnaryCall(
      path: CacheClient_ScsClientMetadata.Methods.setIfNotExists.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSetIfNotExistsInterceptors() ?? []
    )
  }

  /// Unary call to Delete
  ///
  /// - Parameters:
  ///   - request: Request to send to Delete.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func delete(
    _ request: CacheClient__DeleteRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<CacheClient__DeleteRequest, CacheClient__DeleteResponse> {
    return self.makeUnaryCall(
      path: CacheClient_ScsClientMetadata.Methods.delete.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeDeleteInterceptors() ?? []
    )
  }

  /// Unary call to KeysExist
  ///
  /// - Parameters:
  ///   - request: Request to send to KeysExist.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func keysExist(
    _ request: CacheClient__KeysExistRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<CacheClient__KeysExistRequest, CacheClient__KeysExistResponse> {
    return self.makeUnaryCall(
      path: CacheClient_ScsClientMetadata.Methods.keysExist.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeKeysExistInterceptors() ?? []
    )
  }

  /// Unary call to Increment
  ///
  /// - Parameters:
  ///   - request: Request to send to Increment.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func increment(
    _ request: CacheClient__IncrementRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<CacheClient__IncrementRequest, CacheClient__IncrementResponse> {
    return self.makeUnaryCall(
      path: CacheClient_ScsClientMetadata.Methods.increment.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeIncrementInterceptors() ?? []
    )
  }

  /// Unary call to UpdateTtl
  ///
  /// - Parameters:
  ///   - request: Request to send to UpdateTtl.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func updateTtl(
    _ request: CacheClient__UpdateTtlRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<CacheClient__UpdateTtlRequest, CacheClient__UpdateTtlResponse> {
    return self.makeUnaryCall(
      path: CacheClient_ScsClientMetadata.Methods.updateTtl.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeUpdateTtlInterceptors() ?? []
    )
  }

  /// Unary call to ItemGetTtl
  ///
  /// - Parameters:
  ///   - request: Request to send to ItemGetTtl.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func itemGetTtl(
    _ request: CacheClient__ItemGetTtlRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<CacheClient__ItemGetTtlRequest, CacheClient__ItemGetTtlResponse> {
    return self.makeUnaryCall(
      path: CacheClient_ScsClientMetadata.Methods.itemGetTtl.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeItemGetTtlInterceptors() ?? []
    )
  }

  /// Unary call to ItemGetType
  ///
  /// - Parameters:
  ///   - request: Request to send to ItemGetType.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func itemGetType(
    _ request: CacheClient__ItemGetTypeRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<CacheClient__ItemGetTypeRequest, CacheClient__ItemGetTypeResponse> {
    return self.makeUnaryCall(
      path: CacheClient_ScsClientMetadata.Methods.itemGetType.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeItemGetTypeInterceptors() ?? []
    )
  }

  /// Unary call to DictionaryGet
  ///
  /// - Parameters:
  ///   - request: Request to send to DictionaryGet.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func dictionaryGet(
    _ request: CacheClient__DictionaryGetRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<CacheClient__DictionaryGetRequest, CacheClient__DictionaryGetResponse> {
    return self.makeUnaryCall(
      path: CacheClient_ScsClientMetadata.Methods.dictionaryGet.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeDictionaryGetInterceptors() ?? []
    )
  }

  /// Unary call to DictionaryFetch
  ///
  /// - Parameters:
  ///   - request: Request to send to DictionaryFetch.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func dictionaryFetch(
    _ request: CacheClient__DictionaryFetchRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<CacheClient__DictionaryFetchRequest, CacheClient__DictionaryFetchResponse> {
    return self.makeUnaryCall(
      path: CacheClient_ScsClientMetadata.Methods.dictionaryFetch.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeDictionaryFetchInterceptors() ?? []
    )
  }

  /// Unary call to DictionarySet
  ///
  /// - Parameters:
  ///   - request: Request to send to DictionarySet.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func dictionarySet(
    _ request: CacheClient__DictionarySetRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<CacheClient__DictionarySetRequest, CacheClient__DictionarySetResponse> {
    return self.makeUnaryCall(
      path: CacheClient_ScsClientMetadata.Methods.dictionarySet.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeDictionarySetInterceptors() ?? []
    )
  }

  /// Unary call to DictionaryIncrement
  ///
  /// - Parameters:
  ///   - request: Request to send to DictionaryIncrement.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func dictionaryIncrement(
    _ request: CacheClient__DictionaryIncrementRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<CacheClient__DictionaryIncrementRequest, CacheClient__DictionaryIncrementResponse> {
    return self.makeUnaryCall(
      path: CacheClient_ScsClientMetadata.Methods.dictionaryIncrement.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeDictionaryIncrementInterceptors() ?? []
    )
  }

  /// Unary call to DictionaryDelete
  ///
  /// - Parameters:
  ///   - request: Request to send to DictionaryDelete.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func dictionaryDelete(
    _ request: CacheClient__DictionaryDeleteRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<CacheClient__DictionaryDeleteRequest, CacheClient__DictionaryDeleteResponse> {
    return self.makeUnaryCall(
      path: CacheClient_ScsClientMetadata.Methods.dictionaryDelete.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeDictionaryDeleteInterceptors() ?? []
    )
  }

  /// Unary call to DictionaryLength
  ///
  /// - Parameters:
  ///   - request: Request to send to DictionaryLength.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func dictionaryLength(
    _ request: CacheClient__DictionaryLengthRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<CacheClient__DictionaryLengthRequest, CacheClient__DictionaryLengthResponse> {
    return self.makeUnaryCall(
      path: CacheClient_ScsClientMetadata.Methods.dictionaryLength.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeDictionaryLengthInterceptors() ?? []
    )
  }

  /// Unary call to SetFetch
  ///
  /// - Parameters:
  ///   - request: Request to send to SetFetch.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func setFetch(
    _ request: CacheClient__SetFetchRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<CacheClient__SetFetchRequest, CacheClient__SetFetchResponse> {
    return self.makeUnaryCall(
      path: CacheClient_ScsClientMetadata.Methods.setFetch.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSetFetchInterceptors() ?? []
    )
  }

  /// Unary call to SetUnion
  ///
  /// - Parameters:
  ///   - request: Request to send to SetUnion.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func setUnion(
    _ request: CacheClient__SetUnionRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<CacheClient__SetUnionRequest, CacheClient__SetUnionResponse> {
    return self.makeUnaryCall(
      path: CacheClient_ScsClientMetadata.Methods.setUnion.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSetUnionInterceptors() ?? []
    )
  }

  /// Unary call to SetDifference
  ///
  /// - Parameters:
  ///   - request: Request to send to SetDifference.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func setDifference(
    _ request: CacheClient__SetDifferenceRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<CacheClient__SetDifferenceRequest, CacheClient__SetDifferenceResponse> {
    return self.makeUnaryCall(
      path: CacheClient_ScsClientMetadata.Methods.setDifference.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSetDifferenceInterceptors() ?? []
    )
  }

  /// Unary call to SetContains
  ///
  /// - Parameters:
  ///   - request: Request to send to SetContains.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func setContains(
    _ request: CacheClient__SetContainsRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<CacheClient__SetContainsRequest, CacheClient__SetContainsResponse> {
    return self.makeUnaryCall(
      path: CacheClient_ScsClientMetadata.Methods.setContains.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSetContainsInterceptors() ?? []
    )
  }

  /// Unary call to SetLength
  ///
  /// - Parameters:
  ///   - request: Request to send to SetLength.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func setLength(
    _ request: CacheClient__SetLengthRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<CacheClient__SetLengthRequest, CacheClient__SetLengthResponse> {
    return self.makeUnaryCall(
      path: CacheClient_ScsClientMetadata.Methods.setLength.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSetLengthInterceptors() ?? []
    )
  }

  /// Unary call to SetPop
  ///
  /// - Parameters:
  ///   - request: Request to send to SetPop.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func setPop(
    _ request: CacheClient__SetPopRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<CacheClient__SetPopRequest, CacheClient__SetPopResponse> {
    return self.makeUnaryCall(
      path: CacheClient_ScsClientMetadata.Methods.setPop.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSetPopInterceptors() ?? []
    )
  }

  /// Unary call to ListPushFront
  ///
  /// - Parameters:
  ///   - request: Request to send to ListPushFront.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func listPushFront(
    _ request: CacheClient__ListPushFrontRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<CacheClient__ListPushFrontRequest, CacheClient__ListPushFrontResponse> {
    return self.makeUnaryCall(
      path: CacheClient_ScsClientMetadata.Methods.listPushFront.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeListPushFrontInterceptors() ?? []
    )
  }

  /// Unary call to ListPushBack
  ///
  /// - Parameters:
  ///   - request: Request to send to ListPushBack.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func listPushBack(
    _ request: CacheClient__ListPushBackRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<CacheClient__ListPushBackRequest, CacheClient__ListPushBackResponse> {
    return self.makeUnaryCall(
      path: CacheClient_ScsClientMetadata.Methods.listPushBack.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeListPushBackInterceptors() ?? []
    )
  }

  /// Unary call to ListPopFront
  ///
  /// - Parameters:
  ///   - request: Request to send to ListPopFront.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func listPopFront(
    _ request: CacheClient__ListPopFrontRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<CacheClient__ListPopFrontRequest, CacheClient__ListPopFrontResponse> {
    return self.makeUnaryCall(
      path: CacheClient_ScsClientMetadata.Methods.listPopFront.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeListPopFrontInterceptors() ?? []
    )
  }

  /// Unary call to ListPopBack
  ///
  /// - Parameters:
  ///   - request: Request to send to ListPopBack.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func listPopBack(
    _ request: CacheClient__ListPopBackRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<CacheClient__ListPopBackRequest, CacheClient__ListPopBackResponse> {
    return self.makeUnaryCall(
      path: CacheClient_ScsClientMetadata.Methods.listPopBack.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeListPopBackInterceptors() ?? []
    )
  }

  /// Unary call to ListErase
  ///
  /// - Parameters:
  ///   - request: Request to send to ListErase.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func listErase(
    _ request: CacheClient__ListEraseRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<CacheClient__ListEraseRequest, CacheClient__ListEraseResponse> {
    return self.makeUnaryCall(
      path: CacheClient_ScsClientMetadata.Methods.listErase.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeListEraseInterceptors() ?? []
    )
  }

  /// Unary call to ListRemove
  ///
  /// - Parameters:
  ///   - request: Request to send to ListRemove.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func listRemove(
    _ request: CacheClient__ListRemoveRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<CacheClient__ListRemoveRequest, CacheClient__ListRemoveResponse> {
    return self.makeUnaryCall(
      path: CacheClient_ScsClientMetadata.Methods.listRemove.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeListRemoveInterceptors() ?? []
    )
  }

  /// Unary call to ListFetch
  ///
  /// - Parameters:
  ///   - request: Request to send to ListFetch.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func listFetch(
    _ request: CacheClient__ListFetchRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<CacheClient__ListFetchRequest, CacheClient__ListFetchResponse> {
    return self.makeUnaryCall(
      path: CacheClient_ScsClientMetadata.Methods.listFetch.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeListFetchInterceptors() ?? []
    )
  }

  /// Unary call to ListLength
  ///
  /// - Parameters:
  ///   - request: Request to send to ListLength.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func listLength(
    _ request: CacheClient__ListLengthRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<CacheClient__ListLengthRequest, CacheClient__ListLengthResponse> {
    return self.makeUnaryCall(
      path: CacheClient_ScsClientMetadata.Methods.listLength.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeListLengthInterceptors() ?? []
    )
  }

  /// Unary call to ListConcatenateFront
  ///
  /// - Parameters:
  ///   - request: Request to send to ListConcatenateFront.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func listConcatenateFront(
    _ request: CacheClient__ListConcatenateFrontRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<CacheClient__ListConcatenateFrontRequest, CacheClient__ListConcatenateFrontResponse> {
    return self.makeUnaryCall(
      path: CacheClient_ScsClientMetadata.Methods.listConcatenateFront.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeListConcatenateFrontInterceptors() ?? []
    )
  }

  /// Unary call to ListConcatenateBack
  ///
  /// - Parameters:
  ///   - request: Request to send to ListConcatenateBack.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func listConcatenateBack(
    _ request: CacheClient__ListConcatenateBackRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<CacheClient__ListConcatenateBackRequest, CacheClient__ListConcatenateBackResponse> {
    return self.makeUnaryCall(
      path: CacheClient_ScsClientMetadata.Methods.listConcatenateBack.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeListConcatenateBackInterceptors() ?? []
    )
  }

  /// Unary call to ListRetain
  ///
  /// - Parameters:
  ///   - request: Request to send to ListRetain.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func listRetain(
    _ request: CacheClient__ListRetainRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<CacheClient__ListRetainRequest, CacheClient__ListRetainResponse> {
    return self.makeUnaryCall(
      path: CacheClient_ScsClientMetadata.Methods.listRetain.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeListRetainInterceptors() ?? []
    )
  }

  /// Add or Updates new element with its score to the Sorted Set.
  /// If sorted set doesn't exist, a new one is created with the specified
  /// element and its associated score.
  /// If an element exists, then its associate score gets overridden with the one
  /// provided in this operation.
  ///
  /// - Parameters:
  ///   - request: Request to send to SortedSetPut.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func sortedSetPut(
    _ request: CacheClient__SortedSetPutRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<CacheClient__SortedSetPutRequest, CacheClient__SortedSetPutResponse> {
    return self.makeUnaryCall(
      path: CacheClient_ScsClientMetadata.Methods.sortedSetPut.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSortedSetPutInterceptors() ?? []
    )
  }

  /// Fetches a subset of elements in the sorted set.
  ///
  /// - Parameters:
  ///   - request: Request to send to SortedSetFetch.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func sortedSetFetch(
    _ request: CacheClient__SortedSetFetchRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<CacheClient__SortedSetFetchRequest, CacheClient__SortedSetFetchResponse> {
    return self.makeUnaryCall(
      path: CacheClient_ScsClientMetadata.Methods.sortedSetFetch.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSortedSetFetchInterceptors() ?? []
    )
  }

  /// Gets the specified element and its associated score if it exists in the
  /// sorted set.
  ///
  /// - Parameters:
  ///   - request: Request to send to SortedSetGetScore.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func sortedSetGetScore(
    _ request: CacheClient__SortedSetGetScoreRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<CacheClient__SortedSetGetScoreRequest, CacheClient__SortedSetGetScoreResponse> {
    return self.makeUnaryCall(
      path: CacheClient_ScsClientMetadata.Methods.sortedSetGetScore.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSortedSetGetScoreInterceptors() ?? []
    )
  }

  /// Removes specified elements and their associated scores
  ///
  /// - Parameters:
  ///   - request: Request to send to SortedSetRemove.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func sortedSetRemove(
    _ request: CacheClient__SortedSetRemoveRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<CacheClient__SortedSetRemoveRequest, CacheClient__SortedSetRemoveResponse> {
    return self.makeUnaryCall(
      path: CacheClient_ScsClientMetadata.Methods.sortedSetRemove.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSortedSetRemoveInterceptors() ?? []
    )
  }

  /// Changes the score associated with the element by specified amount.
  /// If the provided amount is negative, then the score associated with the
  /// element is decremented.
  /// If the element that needs to be incremented isn't present in the sorted
  /// set, it is added with specified number as the score.
  /// If the set itself doesn't exist then a new one with specified element and
  /// score is created.
  ///
  /// - Parameters:
  ///   - request: Request to send to SortedSetIncrement.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func sortedSetIncrement(
    _ request: CacheClient__SortedSetIncrementRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<CacheClient__SortedSetIncrementRequest, CacheClient__SortedSetIncrementResponse> {
    return self.makeUnaryCall(
      path: CacheClient_ScsClientMetadata.Methods.sortedSetIncrement.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSortedSetIncrementInterceptors() ?? []
    )
  }

  /// Gives the rank of an element.
  ///
  /// - Parameters:
  ///   - request: Request to send to SortedSetGetRank.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func sortedSetGetRank(
    _ request: CacheClient__SortedSetGetRankRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<CacheClient__SortedSetGetRankRequest, CacheClient__SortedSetGetRankResponse> {
    return self.makeUnaryCall(
      path: CacheClient_ScsClientMetadata.Methods.sortedSetGetRank.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSortedSetGetRankInterceptors() ?? []
    )
  }

  /// Returns length of the sorted set
  ///
  /// - Parameters:
  ///   - request: Request to send to SortedSetLength.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func sortedSetLength(
    _ request: CacheClient__SortedSetLengthRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<CacheClient__SortedSetLengthRequest, CacheClient__SortedSetLengthResponse> {
    return self.makeUnaryCall(
      path: CacheClient_ScsClientMetadata.Methods.sortedSetLength.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSortedSetLengthInterceptors() ?? []
    )
  }

  /// Returns number of elements in the sorted set between a given min and max score
  ///
  /// - Parameters:
  ///   - request: Request to send to SortedSetLengthByScore.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func sortedSetLengthByScore(
    _ request: CacheClient__SortedSetLengthByScoreRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<CacheClient__SortedSetLengthByScoreRequest, CacheClient__SortedSetLengthByScoreResponse> {
    return self.makeUnaryCall(
      path: CacheClient_ScsClientMetadata.Methods.sortedSetLengthByScore.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSortedSetLengthByScoreInterceptors() ?? []
    )
  }
}

@available(*, deprecated)
extension CacheClient_ScsClient: @unchecked Sendable {}

@available(*, deprecated, renamed: "CacheClient_ScsNIOClient")
public final class CacheClient_ScsClient: CacheClient_ScsClientProtocol {
  private let lock = Lock()
  private var _defaultCallOptions: CallOptions
  private var _interceptors: CacheClient_ScsClientInterceptorFactoryProtocol?
  public let channel: GRPCChannel
  public var defaultCallOptions: CallOptions {
    get { self.lock.withLock { return self._defaultCallOptions } }
    set { self.lock.withLockVoid { self._defaultCallOptions = newValue } }
  }
  public var interceptors: CacheClient_ScsClientInterceptorFactoryProtocol? {
    get { self.lock.withLock { return self._interceptors } }
    set { self.lock.withLockVoid { self._interceptors = newValue } }
  }

  /// Creates a client for the cache_client.Scs service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  public init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: CacheClient_ScsClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self._defaultCallOptions = defaultCallOptions
    self._interceptors = interceptors
  }
}

public struct CacheClient_ScsNIOClient: CacheClient_ScsClientProtocol {
  public var channel: GRPCChannel
  public var defaultCallOptions: CallOptions
  public var interceptors: CacheClient_ScsClientInterceptorFactoryProtocol?

  /// Creates a client for the cache_client.Scs service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  public init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: CacheClient_ScsClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
public protocol CacheClient_ScsAsyncClientProtocol: GRPCClient {
  static var serviceDescriptor: GRPCServiceDescriptor { get }
  var interceptors: CacheClient_ScsClientInterceptorFactoryProtocol? { get }

  func makeGetCall(
    _ request: CacheClient__GetRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<CacheClient__GetRequest, CacheClient__GetResponse>

  func makeSetCall(
    _ request: CacheClient__SetRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<CacheClient__SetRequest, CacheClient__SetResponse>

  func makeSetIfNotExistsCall(
    _ request: CacheClient__SetIfNotExistsRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<CacheClient__SetIfNotExistsRequest, CacheClient__SetIfNotExistsResponse>

  func makeDeleteCall(
    _ request: CacheClient__DeleteRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<CacheClient__DeleteRequest, CacheClient__DeleteResponse>

  func makeKeysExistCall(
    _ request: CacheClient__KeysExistRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<CacheClient__KeysExistRequest, CacheClient__KeysExistResponse>

  func makeIncrementCall(
    _ request: CacheClient__IncrementRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<CacheClient__IncrementRequest, CacheClient__IncrementResponse>

  func makeUpdateTtlCall(
    _ request: CacheClient__UpdateTtlRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<CacheClient__UpdateTtlRequest, CacheClient__UpdateTtlResponse>

  func makeItemGetTtlCall(
    _ request: CacheClient__ItemGetTtlRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<CacheClient__ItemGetTtlRequest, CacheClient__ItemGetTtlResponse>

  func makeItemGetTypeCall(
    _ request: CacheClient__ItemGetTypeRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<CacheClient__ItemGetTypeRequest, CacheClient__ItemGetTypeResponse>

  func makeDictionaryGetCall(
    _ request: CacheClient__DictionaryGetRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<CacheClient__DictionaryGetRequest, CacheClient__DictionaryGetResponse>

  func makeDictionaryFetchCall(
    _ request: CacheClient__DictionaryFetchRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<CacheClient__DictionaryFetchRequest, CacheClient__DictionaryFetchResponse>

  func makeDictionarySetCall(
    _ request: CacheClient__DictionarySetRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<CacheClient__DictionarySetRequest, CacheClient__DictionarySetResponse>

  func makeDictionaryIncrementCall(
    _ request: CacheClient__DictionaryIncrementRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<CacheClient__DictionaryIncrementRequest, CacheClient__DictionaryIncrementResponse>

  func makeDictionaryDeleteCall(
    _ request: CacheClient__DictionaryDeleteRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<CacheClient__DictionaryDeleteRequest, CacheClient__DictionaryDeleteResponse>

  func makeDictionaryLengthCall(
    _ request: CacheClient__DictionaryLengthRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<CacheClient__DictionaryLengthRequest, CacheClient__DictionaryLengthResponse>

  func makeSetFetchCall(
    _ request: CacheClient__SetFetchRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<CacheClient__SetFetchRequest, CacheClient__SetFetchResponse>

  func makeSetUnionCall(
    _ request: CacheClient__SetUnionRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<CacheClient__SetUnionRequest, CacheClient__SetUnionResponse>

  func makeSetDifferenceCall(
    _ request: CacheClient__SetDifferenceRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<CacheClient__SetDifferenceRequest, CacheClient__SetDifferenceResponse>

  func makeSetContainsCall(
    _ request: CacheClient__SetContainsRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<CacheClient__SetContainsRequest, CacheClient__SetContainsResponse>

  func makeSetLengthCall(
    _ request: CacheClient__SetLengthRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<CacheClient__SetLengthRequest, CacheClient__SetLengthResponse>

  func makeSetPopCall(
    _ request: CacheClient__SetPopRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<CacheClient__SetPopRequest, CacheClient__SetPopResponse>

  func makeListPushFrontCall(
    _ request: CacheClient__ListPushFrontRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<CacheClient__ListPushFrontRequest, CacheClient__ListPushFrontResponse>

  func makeListPushBackCall(
    _ request: CacheClient__ListPushBackRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<CacheClient__ListPushBackRequest, CacheClient__ListPushBackResponse>

  func makeListPopFrontCall(
    _ request: CacheClient__ListPopFrontRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<CacheClient__ListPopFrontRequest, CacheClient__ListPopFrontResponse>

  func makeListPopBackCall(
    _ request: CacheClient__ListPopBackRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<CacheClient__ListPopBackRequest, CacheClient__ListPopBackResponse>

  func makeListEraseCall(
    _ request: CacheClient__ListEraseRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<CacheClient__ListEraseRequest, CacheClient__ListEraseResponse>

  func makeListRemoveCall(
    _ request: CacheClient__ListRemoveRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<CacheClient__ListRemoveRequest, CacheClient__ListRemoveResponse>

  func makeListFetchCall(
    _ request: CacheClient__ListFetchRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<CacheClient__ListFetchRequest, CacheClient__ListFetchResponse>

  func makeListLengthCall(
    _ request: CacheClient__ListLengthRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<CacheClient__ListLengthRequest, CacheClient__ListLengthResponse>

  func makeListConcatenateFrontCall(
    _ request: CacheClient__ListConcatenateFrontRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<CacheClient__ListConcatenateFrontRequest, CacheClient__ListConcatenateFrontResponse>

  func makeListConcatenateBackCall(
    _ request: CacheClient__ListConcatenateBackRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<CacheClient__ListConcatenateBackRequest, CacheClient__ListConcatenateBackResponse>

  func makeListRetainCall(
    _ request: CacheClient__ListRetainRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<CacheClient__ListRetainRequest, CacheClient__ListRetainResponse>

  func makeSortedSetPutCall(
    _ request: CacheClient__SortedSetPutRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<CacheClient__SortedSetPutRequest, CacheClient__SortedSetPutResponse>

  func makeSortedSetFetchCall(
    _ request: CacheClient__SortedSetFetchRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<CacheClient__SortedSetFetchRequest, CacheClient__SortedSetFetchResponse>

  func makeSortedSetGetScoreCall(
    _ request: CacheClient__SortedSetGetScoreRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<CacheClient__SortedSetGetScoreRequest, CacheClient__SortedSetGetScoreResponse>

  func makeSortedSetRemoveCall(
    _ request: CacheClient__SortedSetRemoveRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<CacheClient__SortedSetRemoveRequest, CacheClient__SortedSetRemoveResponse>

  func makeSortedSetIncrementCall(
    _ request: CacheClient__SortedSetIncrementRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<CacheClient__SortedSetIncrementRequest, CacheClient__SortedSetIncrementResponse>

  func makeSortedSetGetRankCall(
    _ request: CacheClient__SortedSetGetRankRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<CacheClient__SortedSetGetRankRequest, CacheClient__SortedSetGetRankResponse>

  func makeSortedSetLengthCall(
    _ request: CacheClient__SortedSetLengthRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<CacheClient__SortedSetLengthRequest, CacheClient__SortedSetLengthResponse>

  func makeSortedSetLengthByScoreCall(
    _ request: CacheClient__SortedSetLengthByScoreRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<CacheClient__SortedSetLengthByScoreRequest, CacheClient__SortedSetLengthByScoreResponse>
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension CacheClient_ScsAsyncClientProtocol {
  public static var serviceDescriptor: GRPCServiceDescriptor {
    return CacheClient_ScsClientMetadata.serviceDescriptor
  }

  public var interceptors: CacheClient_ScsClientInterceptorFactoryProtocol? {
    return nil
  }

  public func makeGetCall(
    _ request: CacheClient__GetRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<CacheClient__GetRequest, CacheClient__GetResponse> {
    return self.makeAsyncUnaryCall(
      path: CacheClient_ScsClientMetadata.Methods.get.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetInterceptors() ?? []
    )
  }

  public func makeSetCall(
    _ request: CacheClient__SetRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<CacheClient__SetRequest, CacheClient__SetResponse> {
    return self.makeAsyncUnaryCall(
      path: CacheClient_ScsClientMetadata.Methods.set.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSetInterceptors() ?? []
    )
  }

  public func makeSetIfNotExistsCall(
    _ request: CacheClient__SetIfNotExistsRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<CacheClient__SetIfNotExistsRequest, CacheClient__SetIfNotExistsResponse> {
    return self.makeAsyncUnaryCall(
      path: CacheClient_ScsClientMetadata.Methods.setIfNotExists.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSetIfNotExistsInterceptors() ?? []
    )
  }

  public func makeDeleteCall(
    _ request: CacheClient__DeleteRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<CacheClient__DeleteRequest, CacheClient__DeleteResponse> {
    return self.makeAsyncUnaryCall(
      path: CacheClient_ScsClientMetadata.Methods.delete.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeDeleteInterceptors() ?? []
    )
  }

  public func makeKeysExistCall(
    _ request: CacheClient__KeysExistRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<CacheClient__KeysExistRequest, CacheClient__KeysExistResponse> {
    return self.makeAsyncUnaryCall(
      path: CacheClient_ScsClientMetadata.Methods.keysExist.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeKeysExistInterceptors() ?? []
    )
  }

  public func makeIncrementCall(
    _ request: CacheClient__IncrementRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<CacheClient__IncrementRequest, CacheClient__IncrementResponse> {
    return self.makeAsyncUnaryCall(
      path: CacheClient_ScsClientMetadata.Methods.increment.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeIncrementInterceptors() ?? []
    )
  }

  public func makeUpdateTtlCall(
    _ request: CacheClient__UpdateTtlRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<CacheClient__UpdateTtlRequest, CacheClient__UpdateTtlResponse> {
    return self.makeAsyncUnaryCall(
      path: CacheClient_ScsClientMetadata.Methods.updateTtl.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeUpdateTtlInterceptors() ?? []
    )
  }

  public func makeItemGetTtlCall(
    _ request: CacheClient__ItemGetTtlRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<CacheClient__ItemGetTtlRequest, CacheClient__ItemGetTtlResponse> {
    return self.makeAsyncUnaryCall(
      path: CacheClient_ScsClientMetadata.Methods.itemGetTtl.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeItemGetTtlInterceptors() ?? []
    )
  }

  public func makeItemGetTypeCall(
    _ request: CacheClient__ItemGetTypeRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<CacheClient__ItemGetTypeRequest, CacheClient__ItemGetTypeResponse> {
    return self.makeAsyncUnaryCall(
      path: CacheClient_ScsClientMetadata.Methods.itemGetType.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeItemGetTypeInterceptors() ?? []
    )
  }

  public func makeDictionaryGetCall(
    _ request: CacheClient__DictionaryGetRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<CacheClient__DictionaryGetRequest, CacheClient__DictionaryGetResponse> {
    return self.makeAsyncUnaryCall(
      path: CacheClient_ScsClientMetadata.Methods.dictionaryGet.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeDictionaryGetInterceptors() ?? []
    )
  }

  public func makeDictionaryFetchCall(
    _ request: CacheClient__DictionaryFetchRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<CacheClient__DictionaryFetchRequest, CacheClient__DictionaryFetchResponse> {
    return self.makeAsyncUnaryCall(
      path: CacheClient_ScsClientMetadata.Methods.dictionaryFetch.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeDictionaryFetchInterceptors() ?? []
    )
  }

  public func makeDictionarySetCall(
    _ request: CacheClient__DictionarySetRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<CacheClient__DictionarySetRequest, CacheClient__DictionarySetResponse> {
    return self.makeAsyncUnaryCall(
      path: CacheClient_ScsClientMetadata.Methods.dictionarySet.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeDictionarySetInterceptors() ?? []
    )
  }

  public func makeDictionaryIncrementCall(
    _ request: CacheClient__DictionaryIncrementRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<CacheClient__DictionaryIncrementRequest, CacheClient__DictionaryIncrementResponse> {
    return self.makeAsyncUnaryCall(
      path: CacheClient_ScsClientMetadata.Methods.dictionaryIncrement.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeDictionaryIncrementInterceptors() ?? []
    )
  }

  public func makeDictionaryDeleteCall(
    _ request: CacheClient__DictionaryDeleteRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<CacheClient__DictionaryDeleteRequest, CacheClient__DictionaryDeleteResponse> {
    return self.makeAsyncUnaryCall(
      path: CacheClient_ScsClientMetadata.Methods.dictionaryDelete.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeDictionaryDeleteInterceptors() ?? []
    )
  }

  public func makeDictionaryLengthCall(
    _ request: CacheClient__DictionaryLengthRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<CacheClient__DictionaryLengthRequest, CacheClient__DictionaryLengthResponse> {
    return self.makeAsyncUnaryCall(
      path: CacheClient_ScsClientMetadata.Methods.dictionaryLength.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeDictionaryLengthInterceptors() ?? []
    )
  }

  public func makeSetFetchCall(
    _ request: CacheClient__SetFetchRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<CacheClient__SetFetchRequest, CacheClient__SetFetchResponse> {
    return self.makeAsyncUnaryCall(
      path: CacheClient_ScsClientMetadata.Methods.setFetch.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSetFetchInterceptors() ?? []
    )
  }

  public func makeSetUnionCall(
    _ request: CacheClient__SetUnionRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<CacheClient__SetUnionRequest, CacheClient__SetUnionResponse> {
    return self.makeAsyncUnaryCall(
      path: CacheClient_ScsClientMetadata.Methods.setUnion.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSetUnionInterceptors() ?? []
    )
  }

  public func makeSetDifferenceCall(
    _ request: CacheClient__SetDifferenceRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<CacheClient__SetDifferenceRequest, CacheClient__SetDifferenceResponse> {
    return self.makeAsyncUnaryCall(
      path: CacheClient_ScsClientMetadata.Methods.setDifference.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSetDifferenceInterceptors() ?? []
    )
  }

  public func makeSetContainsCall(
    _ request: CacheClient__SetContainsRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<CacheClient__SetContainsRequest, CacheClient__SetContainsResponse> {
    return self.makeAsyncUnaryCall(
      path: CacheClient_ScsClientMetadata.Methods.setContains.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSetContainsInterceptors() ?? []
    )
  }

  public func makeSetLengthCall(
    _ request: CacheClient__SetLengthRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<CacheClient__SetLengthRequest, CacheClient__SetLengthResponse> {
    return self.makeAsyncUnaryCall(
      path: CacheClient_ScsClientMetadata.Methods.setLength.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSetLengthInterceptors() ?? []
    )
  }

  public func makeSetPopCall(
    _ request: CacheClient__SetPopRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<CacheClient__SetPopRequest, CacheClient__SetPopResponse> {
    return self.makeAsyncUnaryCall(
      path: CacheClient_ScsClientMetadata.Methods.setPop.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSetPopInterceptors() ?? []
    )
  }

  public func makeListPushFrontCall(
    _ request: CacheClient__ListPushFrontRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<CacheClient__ListPushFrontRequest, CacheClient__ListPushFrontResponse> {
    return self.makeAsyncUnaryCall(
      path: CacheClient_ScsClientMetadata.Methods.listPushFront.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeListPushFrontInterceptors() ?? []
    )
  }

  public func makeListPushBackCall(
    _ request: CacheClient__ListPushBackRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<CacheClient__ListPushBackRequest, CacheClient__ListPushBackResponse> {
    return self.makeAsyncUnaryCall(
      path: CacheClient_ScsClientMetadata.Methods.listPushBack.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeListPushBackInterceptors() ?? []
    )
  }

  public func makeListPopFrontCall(
    _ request: CacheClient__ListPopFrontRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<CacheClient__ListPopFrontRequest, CacheClient__ListPopFrontResponse> {
    return self.makeAsyncUnaryCall(
      path: CacheClient_ScsClientMetadata.Methods.listPopFront.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeListPopFrontInterceptors() ?? []
    )
  }

  public func makeListPopBackCall(
    _ request: CacheClient__ListPopBackRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<CacheClient__ListPopBackRequest, CacheClient__ListPopBackResponse> {
    return self.makeAsyncUnaryCall(
      path: CacheClient_ScsClientMetadata.Methods.listPopBack.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeListPopBackInterceptors() ?? []
    )
  }

  public func makeListEraseCall(
    _ request: CacheClient__ListEraseRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<CacheClient__ListEraseRequest, CacheClient__ListEraseResponse> {
    return self.makeAsyncUnaryCall(
      path: CacheClient_ScsClientMetadata.Methods.listErase.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeListEraseInterceptors() ?? []
    )
  }

  public func makeListRemoveCall(
    _ request: CacheClient__ListRemoveRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<CacheClient__ListRemoveRequest, CacheClient__ListRemoveResponse> {
    return self.makeAsyncUnaryCall(
      path: CacheClient_ScsClientMetadata.Methods.listRemove.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeListRemoveInterceptors() ?? []
    )
  }

  public func makeListFetchCall(
    _ request: CacheClient__ListFetchRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<CacheClient__ListFetchRequest, CacheClient__ListFetchResponse> {
    return self.makeAsyncUnaryCall(
      path: CacheClient_ScsClientMetadata.Methods.listFetch.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeListFetchInterceptors() ?? []
    )
  }

  public func makeListLengthCall(
    _ request: CacheClient__ListLengthRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<CacheClient__ListLengthRequest, CacheClient__ListLengthResponse> {
    return self.makeAsyncUnaryCall(
      path: CacheClient_ScsClientMetadata.Methods.listLength.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeListLengthInterceptors() ?? []
    )
  }

  public func makeListConcatenateFrontCall(
    _ request: CacheClient__ListConcatenateFrontRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<CacheClient__ListConcatenateFrontRequest, CacheClient__ListConcatenateFrontResponse> {
    return self.makeAsyncUnaryCall(
      path: CacheClient_ScsClientMetadata.Methods.listConcatenateFront.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeListConcatenateFrontInterceptors() ?? []
    )
  }

  public func makeListConcatenateBackCall(
    _ request: CacheClient__ListConcatenateBackRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<CacheClient__ListConcatenateBackRequest, CacheClient__ListConcatenateBackResponse> {
    return self.makeAsyncUnaryCall(
      path: CacheClient_ScsClientMetadata.Methods.listConcatenateBack.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeListConcatenateBackInterceptors() ?? []
    )
  }

  public func makeListRetainCall(
    _ request: CacheClient__ListRetainRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<CacheClient__ListRetainRequest, CacheClient__ListRetainResponse> {
    return self.makeAsyncUnaryCall(
      path: CacheClient_ScsClientMetadata.Methods.listRetain.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeListRetainInterceptors() ?? []
    )
  }

  public func makeSortedSetPutCall(
    _ request: CacheClient__SortedSetPutRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<CacheClient__SortedSetPutRequest, CacheClient__SortedSetPutResponse> {
    return self.makeAsyncUnaryCall(
      path: CacheClient_ScsClientMetadata.Methods.sortedSetPut.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSortedSetPutInterceptors() ?? []
    )
  }

  public func makeSortedSetFetchCall(
    _ request: CacheClient__SortedSetFetchRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<CacheClient__SortedSetFetchRequest, CacheClient__SortedSetFetchResponse> {
    return self.makeAsyncUnaryCall(
      path: CacheClient_ScsClientMetadata.Methods.sortedSetFetch.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSortedSetFetchInterceptors() ?? []
    )
  }

  public func makeSortedSetGetScoreCall(
    _ request: CacheClient__SortedSetGetScoreRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<CacheClient__SortedSetGetScoreRequest, CacheClient__SortedSetGetScoreResponse> {
    return self.makeAsyncUnaryCall(
      path: CacheClient_ScsClientMetadata.Methods.sortedSetGetScore.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSortedSetGetScoreInterceptors() ?? []
    )
  }

  public func makeSortedSetRemoveCall(
    _ request: CacheClient__SortedSetRemoveRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<CacheClient__SortedSetRemoveRequest, CacheClient__SortedSetRemoveResponse> {
    return self.makeAsyncUnaryCall(
      path: CacheClient_ScsClientMetadata.Methods.sortedSetRemove.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSortedSetRemoveInterceptors() ?? []
    )
  }

  public func makeSortedSetIncrementCall(
    _ request: CacheClient__SortedSetIncrementRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<CacheClient__SortedSetIncrementRequest, CacheClient__SortedSetIncrementResponse> {
    return self.makeAsyncUnaryCall(
      path: CacheClient_ScsClientMetadata.Methods.sortedSetIncrement.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSortedSetIncrementInterceptors() ?? []
    )
  }

  public func makeSortedSetGetRankCall(
    _ request: CacheClient__SortedSetGetRankRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<CacheClient__SortedSetGetRankRequest, CacheClient__SortedSetGetRankResponse> {
    return self.makeAsyncUnaryCall(
      path: CacheClient_ScsClientMetadata.Methods.sortedSetGetRank.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSortedSetGetRankInterceptors() ?? []
    )
  }

  public func makeSortedSetLengthCall(
    _ request: CacheClient__SortedSetLengthRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<CacheClient__SortedSetLengthRequest, CacheClient__SortedSetLengthResponse> {
    return self.makeAsyncUnaryCall(
      path: CacheClient_ScsClientMetadata.Methods.sortedSetLength.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSortedSetLengthInterceptors() ?? []
    )
  }

  public func makeSortedSetLengthByScoreCall(
    _ request: CacheClient__SortedSetLengthByScoreRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<CacheClient__SortedSetLengthByScoreRequest, CacheClient__SortedSetLengthByScoreResponse> {
    return self.makeAsyncUnaryCall(
      path: CacheClient_ScsClientMetadata.Methods.sortedSetLengthByScore.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSortedSetLengthByScoreInterceptors() ?? []
    )
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension CacheClient_ScsAsyncClientProtocol {
  public func get(
    _ request: CacheClient__GetRequest,
    callOptions: CallOptions? = nil
  ) async throws -> CacheClient__GetResponse {
    return try await self.performAsyncUnaryCall(
      path: CacheClient_ScsClientMetadata.Methods.get.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetInterceptors() ?? []
    )
  }

  public func set(
    _ request: CacheClient__SetRequest,
    callOptions: CallOptions? = nil
  ) async throws -> CacheClient__SetResponse {
    return try await self.performAsyncUnaryCall(
      path: CacheClient_ScsClientMetadata.Methods.set.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSetInterceptors() ?? []
    )
  }

  public func setIfNotExists(
    _ request: CacheClient__SetIfNotExistsRequest,
    callOptions: CallOptions? = nil
  ) async throws -> CacheClient__SetIfNotExistsResponse {
    return try await self.performAsyncUnaryCall(
      path: CacheClient_ScsClientMetadata.Methods.setIfNotExists.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSetIfNotExistsInterceptors() ?? []
    )
  }

  public func delete(
    _ request: CacheClient__DeleteRequest,
    callOptions: CallOptions? = nil
  ) async throws -> CacheClient__DeleteResponse {
    return try await self.performAsyncUnaryCall(
      path: CacheClient_ScsClientMetadata.Methods.delete.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeDeleteInterceptors() ?? []
    )
  }

  public func keysExist(
    _ request: CacheClient__KeysExistRequest,
    callOptions: CallOptions? = nil
  ) async throws -> CacheClient__KeysExistResponse {
    return try await self.performAsyncUnaryCall(
      path: CacheClient_ScsClientMetadata.Methods.keysExist.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeKeysExistInterceptors() ?? []
    )
  }

  public func increment(
    _ request: CacheClient__IncrementRequest,
    callOptions: CallOptions? = nil
  ) async throws -> CacheClient__IncrementResponse {
    return try await self.performAsyncUnaryCall(
      path: CacheClient_ScsClientMetadata.Methods.increment.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeIncrementInterceptors() ?? []
    )
  }

  public func updateTtl(
    _ request: CacheClient__UpdateTtlRequest,
    callOptions: CallOptions? = nil
  ) async throws -> CacheClient__UpdateTtlResponse {
    return try await self.performAsyncUnaryCall(
      path: CacheClient_ScsClientMetadata.Methods.updateTtl.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeUpdateTtlInterceptors() ?? []
    )
  }

  public func itemGetTtl(
    _ request: CacheClient__ItemGetTtlRequest,
    callOptions: CallOptions? = nil
  ) async throws -> CacheClient__ItemGetTtlResponse {
    return try await self.performAsyncUnaryCall(
      path: CacheClient_ScsClientMetadata.Methods.itemGetTtl.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeItemGetTtlInterceptors() ?? []
    )
  }

  public func itemGetType(
    _ request: CacheClient__ItemGetTypeRequest,
    callOptions: CallOptions? = nil
  ) async throws -> CacheClient__ItemGetTypeResponse {
    return try await self.performAsyncUnaryCall(
      path: CacheClient_ScsClientMetadata.Methods.itemGetType.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeItemGetTypeInterceptors() ?? []
    )
  }

  public func dictionaryGet(
    _ request: CacheClient__DictionaryGetRequest,
    callOptions: CallOptions? = nil
  ) async throws -> CacheClient__DictionaryGetResponse {
    return try await self.performAsyncUnaryCall(
      path: CacheClient_ScsClientMetadata.Methods.dictionaryGet.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeDictionaryGetInterceptors() ?? []
    )
  }

  public func dictionaryFetch(
    _ request: CacheClient__DictionaryFetchRequest,
    callOptions: CallOptions? = nil
  ) async throws -> CacheClient__DictionaryFetchResponse {
    return try await self.performAsyncUnaryCall(
      path: CacheClient_ScsClientMetadata.Methods.dictionaryFetch.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeDictionaryFetchInterceptors() ?? []
    )
  }

  public func dictionarySet(
    _ request: CacheClient__DictionarySetRequest,
    callOptions: CallOptions? = nil
  ) async throws -> CacheClient__DictionarySetResponse {
    return try await self.performAsyncUnaryCall(
      path: CacheClient_ScsClientMetadata.Methods.dictionarySet.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeDictionarySetInterceptors() ?? []
    )
  }

  public func dictionaryIncrement(
    _ request: CacheClient__DictionaryIncrementRequest,
    callOptions: CallOptions? = nil
  ) async throws -> CacheClient__DictionaryIncrementResponse {
    return try await self.performAsyncUnaryCall(
      path: CacheClient_ScsClientMetadata.Methods.dictionaryIncrement.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeDictionaryIncrementInterceptors() ?? []
    )
  }

  public func dictionaryDelete(
    _ request: CacheClient__DictionaryDeleteRequest,
    callOptions: CallOptions? = nil
  ) async throws -> CacheClient__DictionaryDeleteResponse {
    return try await self.performAsyncUnaryCall(
      path: CacheClient_ScsClientMetadata.Methods.dictionaryDelete.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeDictionaryDeleteInterceptors() ?? []
    )
  }

  public func dictionaryLength(
    _ request: CacheClient__DictionaryLengthRequest,
    callOptions: CallOptions? = nil
  ) async throws -> CacheClient__DictionaryLengthResponse {
    return try await self.performAsyncUnaryCall(
      path: CacheClient_ScsClientMetadata.Methods.dictionaryLength.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeDictionaryLengthInterceptors() ?? []
    )
  }

  public func setFetch(
    _ request: CacheClient__SetFetchRequest,
    callOptions: CallOptions? = nil
  ) async throws -> CacheClient__SetFetchResponse {
    return try await self.performAsyncUnaryCall(
      path: CacheClient_ScsClientMetadata.Methods.setFetch.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSetFetchInterceptors() ?? []
    )
  }

  public func setUnion(
    _ request: CacheClient__SetUnionRequest,
    callOptions: CallOptions? = nil
  ) async throws -> CacheClient__SetUnionResponse {
    return try await self.performAsyncUnaryCall(
      path: CacheClient_ScsClientMetadata.Methods.setUnion.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSetUnionInterceptors() ?? []
    )
  }

  public func setDifference(
    _ request: CacheClient__SetDifferenceRequest,
    callOptions: CallOptions? = nil
  ) async throws -> CacheClient__SetDifferenceResponse {
    return try await self.performAsyncUnaryCall(
      path: CacheClient_ScsClientMetadata.Methods.setDifference.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSetDifferenceInterceptors() ?? []
    )
  }

  public func setContains(
    _ request: CacheClient__SetContainsRequest,
    callOptions: CallOptions? = nil
  ) async throws -> CacheClient__SetContainsResponse {
    return try await self.performAsyncUnaryCall(
      path: CacheClient_ScsClientMetadata.Methods.setContains.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSetContainsInterceptors() ?? []
    )
  }

  public func setLength(
    _ request: CacheClient__SetLengthRequest,
    callOptions: CallOptions? = nil
  ) async throws -> CacheClient__SetLengthResponse {
    return try await self.performAsyncUnaryCall(
      path: CacheClient_ScsClientMetadata.Methods.setLength.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSetLengthInterceptors() ?? []
    )
  }

  public func setPop(
    _ request: CacheClient__SetPopRequest,
    callOptions: CallOptions? = nil
  ) async throws -> CacheClient__SetPopResponse {
    return try await self.performAsyncUnaryCall(
      path: CacheClient_ScsClientMetadata.Methods.setPop.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSetPopInterceptors() ?? []
    )
  }

  public func listPushFront(
    _ request: CacheClient__ListPushFrontRequest,
    callOptions: CallOptions? = nil
  ) async throws -> CacheClient__ListPushFrontResponse {
    return try await self.performAsyncUnaryCall(
      path: CacheClient_ScsClientMetadata.Methods.listPushFront.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeListPushFrontInterceptors() ?? []
    )
  }

  public func listPushBack(
    _ request: CacheClient__ListPushBackRequest,
    callOptions: CallOptions? = nil
  ) async throws -> CacheClient__ListPushBackResponse {
    return try await self.performAsyncUnaryCall(
      path: CacheClient_ScsClientMetadata.Methods.listPushBack.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeListPushBackInterceptors() ?? []
    )
  }

  public func listPopFront(
    _ request: CacheClient__ListPopFrontRequest,
    callOptions: CallOptions? = nil
  ) async throws -> CacheClient__ListPopFrontResponse {
    return try await self.performAsyncUnaryCall(
      path: CacheClient_ScsClientMetadata.Methods.listPopFront.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeListPopFrontInterceptors() ?? []
    )
  }

  public func listPopBack(
    _ request: CacheClient__ListPopBackRequest,
    callOptions: CallOptions? = nil
  ) async throws -> CacheClient__ListPopBackResponse {
    return try await self.performAsyncUnaryCall(
      path: CacheClient_ScsClientMetadata.Methods.listPopBack.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeListPopBackInterceptors() ?? []
    )
  }

  public func listErase(
    _ request: CacheClient__ListEraseRequest,
    callOptions: CallOptions? = nil
  ) async throws -> CacheClient__ListEraseResponse {
    return try await self.performAsyncUnaryCall(
      path: CacheClient_ScsClientMetadata.Methods.listErase.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeListEraseInterceptors() ?? []
    )
  }

  public func listRemove(
    _ request: CacheClient__ListRemoveRequest,
    callOptions: CallOptions? = nil
  ) async throws -> CacheClient__ListRemoveResponse {
    return try await self.performAsyncUnaryCall(
      path: CacheClient_ScsClientMetadata.Methods.listRemove.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeListRemoveInterceptors() ?? []
    )
  }

  public func listFetch(
    _ request: CacheClient__ListFetchRequest,
    callOptions: CallOptions? = nil
  ) async throws -> CacheClient__ListFetchResponse {
    return try await self.performAsyncUnaryCall(
      path: CacheClient_ScsClientMetadata.Methods.listFetch.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeListFetchInterceptors() ?? []
    )
  }

  public func listLength(
    _ request: CacheClient__ListLengthRequest,
    callOptions: CallOptions? = nil
  ) async throws -> CacheClient__ListLengthResponse {
    return try await self.performAsyncUnaryCall(
      path: CacheClient_ScsClientMetadata.Methods.listLength.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeListLengthInterceptors() ?? []
    )
  }

  public func listConcatenateFront(
    _ request: CacheClient__ListConcatenateFrontRequest,
    callOptions: CallOptions? = nil
  ) async throws -> CacheClient__ListConcatenateFrontResponse {
    return try await self.performAsyncUnaryCall(
      path: CacheClient_ScsClientMetadata.Methods.listConcatenateFront.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeListConcatenateFrontInterceptors() ?? []
    )
  }

  public func listConcatenateBack(
    _ request: CacheClient__ListConcatenateBackRequest,
    callOptions: CallOptions? = nil
  ) async throws -> CacheClient__ListConcatenateBackResponse {
    return try await self.performAsyncUnaryCall(
      path: CacheClient_ScsClientMetadata.Methods.listConcatenateBack.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeListConcatenateBackInterceptors() ?? []
    )
  }

  public func listRetain(
    _ request: CacheClient__ListRetainRequest,
    callOptions: CallOptions? = nil
  ) async throws -> CacheClient__ListRetainResponse {
    return try await self.performAsyncUnaryCall(
      path: CacheClient_ScsClientMetadata.Methods.listRetain.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeListRetainInterceptors() ?? []
    )
  }

  public func sortedSetPut(
    _ request: CacheClient__SortedSetPutRequest,
    callOptions: CallOptions? = nil
  ) async throws -> CacheClient__SortedSetPutResponse {
    return try await self.performAsyncUnaryCall(
      path: CacheClient_ScsClientMetadata.Methods.sortedSetPut.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSortedSetPutInterceptors() ?? []
    )
  }

  public func sortedSetFetch(
    _ request: CacheClient__SortedSetFetchRequest,
    callOptions: CallOptions? = nil
  ) async throws -> CacheClient__SortedSetFetchResponse {
    return try await self.performAsyncUnaryCall(
      path: CacheClient_ScsClientMetadata.Methods.sortedSetFetch.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSortedSetFetchInterceptors() ?? []
    )
  }

  public func sortedSetGetScore(
    _ request: CacheClient__SortedSetGetScoreRequest,
    callOptions: CallOptions? = nil
  ) async throws -> CacheClient__SortedSetGetScoreResponse {
    return try await self.performAsyncUnaryCall(
      path: CacheClient_ScsClientMetadata.Methods.sortedSetGetScore.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSortedSetGetScoreInterceptors() ?? []
    )
  }

  public func sortedSetRemove(
    _ request: CacheClient__SortedSetRemoveRequest,
    callOptions: CallOptions? = nil
  ) async throws -> CacheClient__SortedSetRemoveResponse {
    return try await self.performAsyncUnaryCall(
      path: CacheClient_ScsClientMetadata.Methods.sortedSetRemove.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSortedSetRemoveInterceptors() ?? []
    )
  }

  public func sortedSetIncrement(
    _ request: CacheClient__SortedSetIncrementRequest,
    callOptions: CallOptions? = nil
  ) async throws -> CacheClient__SortedSetIncrementResponse {
    return try await self.performAsyncUnaryCall(
      path: CacheClient_ScsClientMetadata.Methods.sortedSetIncrement.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSortedSetIncrementInterceptors() ?? []
    )
  }

  public func sortedSetGetRank(
    _ request: CacheClient__SortedSetGetRankRequest,
    callOptions: CallOptions? = nil
  ) async throws -> CacheClient__SortedSetGetRankResponse {
    return try await self.performAsyncUnaryCall(
      path: CacheClient_ScsClientMetadata.Methods.sortedSetGetRank.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSortedSetGetRankInterceptors() ?? []
    )
  }

  public func sortedSetLength(
    _ request: CacheClient__SortedSetLengthRequest,
    callOptions: CallOptions? = nil
  ) async throws -> CacheClient__SortedSetLengthResponse {
    return try await self.performAsyncUnaryCall(
      path: CacheClient_ScsClientMetadata.Methods.sortedSetLength.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSortedSetLengthInterceptors() ?? []
    )
  }

  public func sortedSetLengthByScore(
    _ request: CacheClient__SortedSetLengthByScoreRequest,
    callOptions: CallOptions? = nil
  ) async throws -> CacheClient__SortedSetLengthByScoreResponse {
    return try await self.performAsyncUnaryCall(
      path: CacheClient_ScsClientMetadata.Methods.sortedSetLengthByScore.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSortedSetLengthByScoreInterceptors() ?? []
    )
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
public struct CacheClient_ScsAsyncClient: CacheClient_ScsAsyncClientProtocol {
  public var channel: GRPCChannel
  public var defaultCallOptions: CallOptions
  public var interceptors: CacheClient_ScsClientInterceptorFactoryProtocol?

  public init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: CacheClient_ScsClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

public protocol CacheClient_ScsClientInterceptorFactoryProtocol: Sendable {

  /// - Returns: Interceptors to use when invoking 'get'.
  func makeGetInterceptors() -> [ClientInterceptor<CacheClient__GetRequest, CacheClient__GetResponse>]

  /// - Returns: Interceptors to use when invoking 'set'.
  func makeSetInterceptors() -> [ClientInterceptor<CacheClient__SetRequest, CacheClient__SetResponse>]

  /// - Returns: Interceptors to use when invoking 'setIfNotExists'.
  func makeSetIfNotExistsInterceptors() -> [ClientInterceptor<CacheClient__SetIfNotExistsRequest, CacheClient__SetIfNotExistsResponse>]

  /// - Returns: Interceptors to use when invoking 'delete'.
  func makeDeleteInterceptors() -> [ClientInterceptor<CacheClient__DeleteRequest, CacheClient__DeleteResponse>]

  /// - Returns: Interceptors to use when invoking 'keysExist'.
  func makeKeysExistInterceptors() -> [ClientInterceptor<CacheClient__KeysExistRequest, CacheClient__KeysExistResponse>]

  /// - Returns: Interceptors to use when invoking 'increment'.
  func makeIncrementInterceptors() -> [ClientInterceptor<CacheClient__IncrementRequest, CacheClient__IncrementResponse>]

  /// - Returns: Interceptors to use when invoking 'updateTtl'.
  func makeUpdateTtlInterceptors() -> [ClientInterceptor<CacheClient__UpdateTtlRequest, CacheClient__UpdateTtlResponse>]

  /// - Returns: Interceptors to use when invoking 'itemGetTtl'.
  func makeItemGetTtlInterceptors() -> [ClientInterceptor<CacheClient__ItemGetTtlRequest, CacheClient__ItemGetTtlResponse>]

  /// - Returns: Interceptors to use when invoking 'itemGetType'.
  func makeItemGetTypeInterceptors() -> [ClientInterceptor<CacheClient__ItemGetTypeRequest, CacheClient__ItemGetTypeResponse>]

  /// - Returns: Interceptors to use when invoking 'dictionaryGet'.
  func makeDictionaryGetInterceptors() -> [ClientInterceptor<CacheClient__DictionaryGetRequest, CacheClient__DictionaryGetResponse>]

  /// - Returns: Interceptors to use when invoking 'dictionaryFetch'.
  func makeDictionaryFetchInterceptors() -> [ClientInterceptor<CacheClient__DictionaryFetchRequest, CacheClient__DictionaryFetchResponse>]

  /// - Returns: Interceptors to use when invoking 'dictionarySet'.
  func makeDictionarySetInterceptors() -> [ClientInterceptor<CacheClient__DictionarySetRequest, CacheClient__DictionarySetResponse>]

  /// - Returns: Interceptors to use when invoking 'dictionaryIncrement'.
  func makeDictionaryIncrementInterceptors() -> [ClientInterceptor<CacheClient__DictionaryIncrementRequest, CacheClient__DictionaryIncrementResponse>]

  /// - Returns: Interceptors to use when invoking 'dictionaryDelete'.
  func makeDictionaryDeleteInterceptors() -> [ClientInterceptor<CacheClient__DictionaryDeleteRequest, CacheClient__DictionaryDeleteResponse>]

  /// - Returns: Interceptors to use when invoking 'dictionaryLength'.
  func makeDictionaryLengthInterceptors() -> [ClientInterceptor<CacheClient__DictionaryLengthRequest, CacheClient__DictionaryLengthResponse>]

  /// - Returns: Interceptors to use when invoking 'setFetch'.
  func makeSetFetchInterceptors() -> [ClientInterceptor<CacheClient__SetFetchRequest, CacheClient__SetFetchResponse>]

  /// - Returns: Interceptors to use when invoking 'setUnion'.
  func makeSetUnionInterceptors() -> [ClientInterceptor<CacheClient__SetUnionRequest, CacheClient__SetUnionResponse>]

  /// - Returns: Interceptors to use when invoking 'setDifference'.
  func makeSetDifferenceInterceptors() -> [ClientInterceptor<CacheClient__SetDifferenceRequest, CacheClient__SetDifferenceResponse>]

  /// - Returns: Interceptors to use when invoking 'setContains'.
  func makeSetContainsInterceptors() -> [ClientInterceptor<CacheClient__SetContainsRequest, CacheClient__SetContainsResponse>]

  /// - Returns: Interceptors to use when invoking 'setLength'.
  func makeSetLengthInterceptors() -> [ClientInterceptor<CacheClient__SetLengthRequest, CacheClient__SetLengthResponse>]

  /// - Returns: Interceptors to use when invoking 'setPop'.
  func makeSetPopInterceptors() -> [ClientInterceptor<CacheClient__SetPopRequest, CacheClient__SetPopResponse>]

  /// - Returns: Interceptors to use when invoking 'listPushFront'.
  func makeListPushFrontInterceptors() -> [ClientInterceptor<CacheClient__ListPushFrontRequest, CacheClient__ListPushFrontResponse>]

  /// - Returns: Interceptors to use when invoking 'listPushBack'.
  func makeListPushBackInterceptors() -> [ClientInterceptor<CacheClient__ListPushBackRequest, CacheClient__ListPushBackResponse>]

  /// - Returns: Interceptors to use when invoking 'listPopFront'.
  func makeListPopFrontInterceptors() -> [ClientInterceptor<CacheClient__ListPopFrontRequest, CacheClient__ListPopFrontResponse>]

  /// - Returns: Interceptors to use when invoking 'listPopBack'.
  func makeListPopBackInterceptors() -> [ClientInterceptor<CacheClient__ListPopBackRequest, CacheClient__ListPopBackResponse>]

  /// - Returns: Interceptors to use when invoking 'listErase'.
  func makeListEraseInterceptors() -> [ClientInterceptor<CacheClient__ListEraseRequest, CacheClient__ListEraseResponse>]

  /// - Returns: Interceptors to use when invoking 'listRemove'.
  func makeListRemoveInterceptors() -> [ClientInterceptor<CacheClient__ListRemoveRequest, CacheClient__ListRemoveResponse>]

  /// - Returns: Interceptors to use when invoking 'listFetch'.
  func makeListFetchInterceptors() -> [ClientInterceptor<CacheClient__ListFetchRequest, CacheClient__ListFetchResponse>]

  /// - Returns: Interceptors to use when invoking 'listLength'.
  func makeListLengthInterceptors() -> [ClientInterceptor<CacheClient__ListLengthRequest, CacheClient__ListLengthResponse>]

  /// - Returns: Interceptors to use when invoking 'listConcatenateFront'.
  func makeListConcatenateFrontInterceptors() -> [ClientInterceptor<CacheClient__ListConcatenateFrontRequest, CacheClient__ListConcatenateFrontResponse>]

  /// - Returns: Interceptors to use when invoking 'listConcatenateBack'.
  func makeListConcatenateBackInterceptors() -> [ClientInterceptor<CacheClient__ListConcatenateBackRequest, CacheClient__ListConcatenateBackResponse>]

  /// - Returns: Interceptors to use when invoking 'listRetain'.
  func makeListRetainInterceptors() -> [ClientInterceptor<CacheClient__ListRetainRequest, CacheClient__ListRetainResponse>]

  /// - Returns: Interceptors to use when invoking 'sortedSetPut'.
  func makeSortedSetPutInterceptors() -> [ClientInterceptor<CacheClient__SortedSetPutRequest, CacheClient__SortedSetPutResponse>]

  /// - Returns: Interceptors to use when invoking 'sortedSetFetch'.
  func makeSortedSetFetchInterceptors() -> [ClientInterceptor<CacheClient__SortedSetFetchRequest, CacheClient__SortedSetFetchResponse>]

  /// - Returns: Interceptors to use when invoking 'sortedSetGetScore'.
  func makeSortedSetGetScoreInterceptors() -> [ClientInterceptor<CacheClient__SortedSetGetScoreRequest, CacheClient__SortedSetGetScoreResponse>]

  /// - Returns: Interceptors to use when invoking 'sortedSetRemove'.
  func makeSortedSetRemoveInterceptors() -> [ClientInterceptor<CacheClient__SortedSetRemoveRequest, CacheClient__SortedSetRemoveResponse>]

  /// - Returns: Interceptors to use when invoking 'sortedSetIncrement'.
  func makeSortedSetIncrementInterceptors() -> [ClientInterceptor<CacheClient__SortedSetIncrementRequest, CacheClient__SortedSetIncrementResponse>]

  /// - Returns: Interceptors to use when invoking 'sortedSetGetRank'.
  func makeSortedSetGetRankInterceptors() -> [ClientInterceptor<CacheClient__SortedSetGetRankRequest, CacheClient__SortedSetGetRankResponse>]

  /// - Returns: Interceptors to use when invoking 'sortedSetLength'.
  func makeSortedSetLengthInterceptors() -> [ClientInterceptor<CacheClient__SortedSetLengthRequest, CacheClient__SortedSetLengthResponse>]

  /// - Returns: Interceptors to use when invoking 'sortedSetLengthByScore'.
  func makeSortedSetLengthByScoreInterceptors() -> [ClientInterceptor<CacheClient__SortedSetLengthByScoreRequest, CacheClient__SortedSetLengthByScoreResponse>]
}

public enum CacheClient_ScsClientMetadata {
  public static let serviceDescriptor = GRPCServiceDescriptor(
    name: "Scs",
    fullName: "cache_client.Scs",
    methods: [
      CacheClient_ScsClientMetadata.Methods.get,
      CacheClient_ScsClientMetadata.Methods.set,
      CacheClient_ScsClientMetadata.Methods.setIfNotExists,
      CacheClient_ScsClientMetadata.Methods.delete,
      CacheClient_ScsClientMetadata.Methods.keysExist,
      CacheClient_ScsClientMetadata.Methods.increment,
      CacheClient_ScsClientMetadata.Methods.updateTtl,
      CacheClient_ScsClientMetadata.Methods.itemGetTtl,
      CacheClient_ScsClientMetadata.Methods.itemGetType,
      CacheClient_ScsClientMetadata.Methods.dictionaryGet,
      CacheClient_ScsClientMetadata.Methods.dictionaryFetch,
      CacheClient_ScsClientMetadata.Methods.dictionarySet,
      CacheClient_ScsClientMetadata.Methods.dictionaryIncrement,
      CacheClient_ScsClientMetadata.Methods.dictionaryDelete,
      CacheClient_ScsClientMetadata.Methods.dictionaryLength,
      CacheClient_ScsClientMetadata.Methods.setFetch,
      CacheClient_ScsClientMetadata.Methods.setUnion,
      CacheClient_ScsClientMetadata.Methods.setDifference,
      CacheClient_ScsClientMetadata.Methods.setContains,
      CacheClient_ScsClientMetadata.Methods.setLength,
      CacheClient_ScsClientMetadata.Methods.setPop,
      CacheClient_ScsClientMetadata.Methods.listPushFront,
      CacheClient_ScsClientMetadata.Methods.listPushBack,
      CacheClient_ScsClientMetadata.Methods.listPopFront,
      CacheClient_ScsClientMetadata.Methods.listPopBack,
      CacheClient_ScsClientMetadata.Methods.listErase,
      CacheClient_ScsClientMetadata.Methods.listRemove,
      CacheClient_ScsClientMetadata.Methods.listFetch,
      CacheClient_ScsClientMetadata.Methods.listLength,
      CacheClient_ScsClientMetadata.Methods.listConcatenateFront,
      CacheClient_ScsClientMetadata.Methods.listConcatenateBack,
      CacheClient_ScsClientMetadata.Methods.listRetain,
      CacheClient_ScsClientMetadata.Methods.sortedSetPut,
      CacheClient_ScsClientMetadata.Methods.sortedSetFetch,
      CacheClient_ScsClientMetadata.Methods.sortedSetGetScore,
      CacheClient_ScsClientMetadata.Methods.sortedSetRemove,
      CacheClient_ScsClientMetadata.Methods.sortedSetIncrement,
      CacheClient_ScsClientMetadata.Methods.sortedSetGetRank,
      CacheClient_ScsClientMetadata.Methods.sortedSetLength,
      CacheClient_ScsClientMetadata.Methods.sortedSetLengthByScore,
    ]
  )

  public enum Methods {
    public static let get = GRPCMethodDescriptor(
      name: "Get",
      path: "/cache_client.Scs/Get",
      type: GRPCCallType.unary
    )

    public static let set = GRPCMethodDescriptor(
      name: "Set",
      path: "/cache_client.Scs/Set",
      type: GRPCCallType.unary
    )

    public static let setIfNotExists = GRPCMethodDescriptor(
      name: "SetIfNotExists",
      path: "/cache_client.Scs/SetIfNotExists",
      type: GRPCCallType.unary
    )

    public static let delete = GRPCMethodDescriptor(
      name: "Delete",
      path: "/cache_client.Scs/Delete",
      type: GRPCCallType.unary
    )

    public static let keysExist = GRPCMethodDescriptor(
      name: "KeysExist",
      path: "/cache_client.Scs/KeysExist",
      type: GRPCCallType.unary
    )

    public static let increment = GRPCMethodDescriptor(
      name: "Increment",
      path: "/cache_client.Scs/Increment",
      type: GRPCCallType.unary
    )

    public static let updateTtl = GRPCMethodDescriptor(
      name: "UpdateTtl",
      path: "/cache_client.Scs/UpdateTtl",
      type: GRPCCallType.unary
    )

    public static let itemGetTtl = GRPCMethodDescriptor(
      name: "ItemGetTtl",
      path: "/cache_client.Scs/ItemGetTtl",
      type: GRPCCallType.unary
    )

    public static let itemGetType = GRPCMethodDescriptor(
      name: "ItemGetType",
      path: "/cache_client.Scs/ItemGetType",
      type: GRPCCallType.unary
    )

    public static let dictionaryGet = GRPCMethodDescriptor(
      name: "DictionaryGet",
      path: "/cache_client.Scs/DictionaryGet",
      type: GRPCCallType.unary
    )

    public static let dictionaryFetch = GRPCMethodDescriptor(
      name: "DictionaryFetch",
      path: "/cache_client.Scs/DictionaryFetch",
      type: GRPCCallType.unary
    )

    public static let dictionarySet = GRPCMethodDescriptor(
      name: "DictionarySet",
      path: "/cache_client.Scs/DictionarySet",
      type: GRPCCallType.unary
    )

    public static let dictionaryIncrement = GRPCMethodDescriptor(
      name: "DictionaryIncrement",
      path: "/cache_client.Scs/DictionaryIncrement",
      type: GRPCCallType.unary
    )

    public static let dictionaryDelete = GRPCMethodDescriptor(
      name: "DictionaryDelete",
      path: "/cache_client.Scs/DictionaryDelete",
      type: GRPCCallType.unary
    )

    public static let dictionaryLength = GRPCMethodDescriptor(
      name: "DictionaryLength",
      path: "/cache_client.Scs/DictionaryLength",
      type: GRPCCallType.unary
    )

    public static let setFetch = GRPCMethodDescriptor(
      name: "SetFetch",
      path: "/cache_client.Scs/SetFetch",
      type: GRPCCallType.unary
    )

    public static let setUnion = GRPCMethodDescriptor(
      name: "SetUnion",
      path: "/cache_client.Scs/SetUnion",
      type: GRPCCallType.unary
    )

    public static let setDifference = GRPCMethodDescriptor(
      name: "SetDifference",
      path: "/cache_client.Scs/SetDifference",
      type: GRPCCallType.unary
    )

    public static let setContains = GRPCMethodDescriptor(
      name: "SetContains",
      path: "/cache_client.Scs/SetContains",
      type: GRPCCallType.unary
    )

    public static let setLength = GRPCMethodDescriptor(
      name: "SetLength",
      path: "/cache_client.Scs/SetLength",
      type: GRPCCallType.unary
    )

    public static let setPop = GRPCMethodDescriptor(
      name: "SetPop",
      path: "/cache_client.Scs/SetPop",
      type: GRPCCallType.unary
    )

    public static let listPushFront = GRPCMethodDescriptor(
      name: "ListPushFront",
      path: "/cache_client.Scs/ListPushFront",
      type: GRPCCallType.unary
    )

    public static let listPushBack = GRPCMethodDescriptor(
      name: "ListPushBack",
      path: "/cache_client.Scs/ListPushBack",
      type: GRPCCallType.unary
    )

    public static let listPopFront = GRPCMethodDescriptor(
      name: "ListPopFront",
      path: "/cache_client.Scs/ListPopFront",
      type: GRPCCallType.unary
    )

    public static let listPopBack = GRPCMethodDescriptor(
      name: "ListPopBack",
      path: "/cache_client.Scs/ListPopBack",
      type: GRPCCallType.unary
    )

    public static let listErase = GRPCMethodDescriptor(
      name: "ListErase",
      path: "/cache_client.Scs/ListErase",
      type: GRPCCallType.unary
    )

    public static let listRemove = GRPCMethodDescriptor(
      name: "ListRemove",
      path: "/cache_client.Scs/ListRemove",
      type: GRPCCallType.unary
    )

    public static let listFetch = GRPCMethodDescriptor(
      name: "ListFetch",
      path: "/cache_client.Scs/ListFetch",
      type: GRPCCallType.unary
    )

    public static let listLength = GRPCMethodDescriptor(
      name: "ListLength",
      path: "/cache_client.Scs/ListLength",
      type: GRPCCallType.unary
    )

    public static let listConcatenateFront = GRPCMethodDescriptor(
      name: "ListConcatenateFront",
      path: "/cache_client.Scs/ListConcatenateFront",
      type: GRPCCallType.unary
    )

    public static let listConcatenateBack = GRPCMethodDescriptor(
      name: "ListConcatenateBack",
      path: "/cache_client.Scs/ListConcatenateBack",
      type: GRPCCallType.unary
    )

    public static let listRetain = GRPCMethodDescriptor(
      name: "ListRetain",
      path: "/cache_client.Scs/ListRetain",
      type: GRPCCallType.unary
    )

    public static let sortedSetPut = GRPCMethodDescriptor(
      name: "SortedSetPut",
      path: "/cache_client.Scs/SortedSetPut",
      type: GRPCCallType.unary
    )

    public static let sortedSetFetch = GRPCMethodDescriptor(
      name: "SortedSetFetch",
      path: "/cache_client.Scs/SortedSetFetch",
      type: GRPCCallType.unary
    )

    public static let sortedSetGetScore = GRPCMethodDescriptor(
      name: "SortedSetGetScore",
      path: "/cache_client.Scs/SortedSetGetScore",
      type: GRPCCallType.unary
    )

    public static let sortedSetRemove = GRPCMethodDescriptor(
      name: "SortedSetRemove",
      path: "/cache_client.Scs/SortedSetRemove",
      type: GRPCCallType.unary
    )

    public static let sortedSetIncrement = GRPCMethodDescriptor(
      name: "SortedSetIncrement",
      path: "/cache_client.Scs/SortedSetIncrement",
      type: GRPCCallType.unary
    )

    public static let sortedSetGetRank = GRPCMethodDescriptor(
      name: "SortedSetGetRank",
      path: "/cache_client.Scs/SortedSetGetRank",
      type: GRPCCallType.unary
    )

    public static let sortedSetLength = GRPCMethodDescriptor(
      name: "SortedSetLength",
      path: "/cache_client.Scs/SortedSetLength",
      type: GRPCCallType.unary
    )

    public static let sortedSetLengthByScore = GRPCMethodDescriptor(
      name: "SortedSetLengthByScore",
      path: "/cache_client.Scs/SortedSetLengthByScore",
      type: GRPCCallType.unary
    )
  }
}

/// To build a server, implement a class that conforms to this protocol.
public protocol CacheClient_ScsProvider: CallHandlerProvider {
  var interceptors: CacheClient_ScsServerInterceptorFactoryProtocol? { get }

  func get(request: CacheClient__GetRequest, context: StatusOnlyCallContext) -> EventLoopFuture<CacheClient__GetResponse>

  func set(request: CacheClient__SetRequest, context: StatusOnlyCallContext) -> EventLoopFuture<CacheClient__SetResponse>

  func setIfNotExists(request: CacheClient__SetIfNotExistsRequest, context: StatusOnlyCallContext) -> EventLoopFuture<CacheClient__SetIfNotExistsResponse>

  func delete(request: CacheClient__DeleteRequest, context: StatusOnlyCallContext) -> EventLoopFuture<CacheClient__DeleteResponse>

  func keysExist(request: CacheClient__KeysExistRequest, context: StatusOnlyCallContext) -> EventLoopFuture<CacheClient__KeysExistResponse>

  func increment(request: CacheClient__IncrementRequest, context: StatusOnlyCallContext) -> EventLoopFuture<CacheClient__IncrementResponse>

  func updateTtl(request: CacheClient__UpdateTtlRequest, context: StatusOnlyCallContext) -> EventLoopFuture<CacheClient__UpdateTtlResponse>

  func itemGetTtl(request: CacheClient__ItemGetTtlRequest, context: StatusOnlyCallContext) -> EventLoopFuture<CacheClient__ItemGetTtlResponse>

  func itemGetType(request: CacheClient__ItemGetTypeRequest, context: StatusOnlyCallContext) -> EventLoopFuture<CacheClient__ItemGetTypeResponse>

  func dictionaryGet(request: CacheClient__DictionaryGetRequest, context: StatusOnlyCallContext) -> EventLoopFuture<CacheClient__DictionaryGetResponse>

  func dictionaryFetch(request: CacheClient__DictionaryFetchRequest, context: StatusOnlyCallContext) -> EventLoopFuture<CacheClient__DictionaryFetchResponse>

  func dictionarySet(request: CacheClient__DictionarySetRequest, context: StatusOnlyCallContext) -> EventLoopFuture<CacheClient__DictionarySetResponse>

  func dictionaryIncrement(request: CacheClient__DictionaryIncrementRequest, context: StatusOnlyCallContext) -> EventLoopFuture<CacheClient__DictionaryIncrementResponse>

  func dictionaryDelete(request: CacheClient__DictionaryDeleteRequest, context: StatusOnlyCallContext) -> EventLoopFuture<CacheClient__DictionaryDeleteResponse>

  func dictionaryLength(request: CacheClient__DictionaryLengthRequest, context: StatusOnlyCallContext) -> EventLoopFuture<CacheClient__DictionaryLengthResponse>

  func setFetch(request: CacheClient__SetFetchRequest, context: StatusOnlyCallContext) -> EventLoopFuture<CacheClient__SetFetchResponse>

  func setUnion(request: CacheClient__SetUnionRequest, context: StatusOnlyCallContext) -> EventLoopFuture<CacheClient__SetUnionResponse>

  func setDifference(request: CacheClient__SetDifferenceRequest, context: StatusOnlyCallContext) -> EventLoopFuture<CacheClient__SetDifferenceResponse>

  func setContains(request: CacheClient__SetContainsRequest, context: StatusOnlyCallContext) -> EventLoopFuture<CacheClient__SetContainsResponse>

  func setLength(request: CacheClient__SetLengthRequest, context: StatusOnlyCallContext) -> EventLoopFuture<CacheClient__SetLengthResponse>

  func setPop(request: CacheClient__SetPopRequest, context: StatusOnlyCallContext) -> EventLoopFuture<CacheClient__SetPopResponse>

  func listPushFront(request: CacheClient__ListPushFrontRequest, context: StatusOnlyCallContext) -> EventLoopFuture<CacheClient__ListPushFrontResponse>

  func listPushBack(request: CacheClient__ListPushBackRequest, context: StatusOnlyCallContext) -> EventLoopFuture<CacheClient__ListPushBackResponse>

  func listPopFront(request: CacheClient__ListPopFrontRequest, context: StatusOnlyCallContext) -> EventLoopFuture<CacheClient__ListPopFrontResponse>

  func listPopBack(request: CacheClient__ListPopBackRequest, context: StatusOnlyCallContext) -> EventLoopFuture<CacheClient__ListPopBackResponse>

  func listErase(request: CacheClient__ListEraseRequest, context: StatusOnlyCallContext) -> EventLoopFuture<CacheClient__ListEraseResponse>

  func listRemove(request: CacheClient__ListRemoveRequest, context: StatusOnlyCallContext) -> EventLoopFuture<CacheClient__ListRemoveResponse>

  func listFetch(request: CacheClient__ListFetchRequest, context: StatusOnlyCallContext) -> EventLoopFuture<CacheClient__ListFetchResponse>

  func listLength(request: CacheClient__ListLengthRequest, context: StatusOnlyCallContext) -> EventLoopFuture<CacheClient__ListLengthResponse>

  func listConcatenateFront(request: CacheClient__ListConcatenateFrontRequest, context: StatusOnlyCallContext) -> EventLoopFuture<CacheClient__ListConcatenateFrontResponse>

  func listConcatenateBack(request: CacheClient__ListConcatenateBackRequest, context: StatusOnlyCallContext) -> EventLoopFuture<CacheClient__ListConcatenateBackResponse>

  func listRetain(request: CacheClient__ListRetainRequest, context: StatusOnlyCallContext) -> EventLoopFuture<CacheClient__ListRetainResponse>

  /// Add or Updates new element with its score to the Sorted Set.
  /// If sorted set doesn't exist, a new one is created with the specified
  /// element and its associated score.
  /// If an element exists, then its associate score gets overridden with the one
  /// provided in this operation.
  func sortedSetPut(request: CacheClient__SortedSetPutRequest, context: StatusOnlyCallContext) -> EventLoopFuture<CacheClient__SortedSetPutResponse>

  /// Fetches a subset of elements in the sorted set.
  func sortedSetFetch(request: CacheClient__SortedSetFetchRequest, context: StatusOnlyCallContext) -> EventLoopFuture<CacheClient__SortedSetFetchResponse>

  /// Gets the specified element and its associated score if it exists in the
  /// sorted set.
  func sortedSetGetScore(request: CacheClient__SortedSetGetScoreRequest, context: StatusOnlyCallContext) -> EventLoopFuture<CacheClient__SortedSetGetScoreResponse>

  /// Removes specified elements and their associated scores
  func sortedSetRemove(request: CacheClient__SortedSetRemoveRequest, context: StatusOnlyCallContext) -> EventLoopFuture<CacheClient__SortedSetRemoveResponse>

  /// Changes the score associated with the element by specified amount.
  /// If the provided amount is negative, then the score associated with the
  /// element is decremented.
  /// If the element that needs to be incremented isn't present in the sorted
  /// set, it is added with specified number as the score.
  /// If the set itself doesn't exist then a new one with specified element and
  /// score is created.
  func sortedSetIncrement(request: CacheClient__SortedSetIncrementRequest, context: StatusOnlyCallContext) -> EventLoopFuture<CacheClient__SortedSetIncrementResponse>

  /// Gives the rank of an element.
  func sortedSetGetRank(request: CacheClient__SortedSetGetRankRequest, context: StatusOnlyCallContext) -> EventLoopFuture<CacheClient__SortedSetGetRankResponse>

  /// Returns length of the sorted set
  func sortedSetLength(request: CacheClient__SortedSetLengthRequest, context: StatusOnlyCallContext) -> EventLoopFuture<CacheClient__SortedSetLengthResponse>

  /// Returns number of elements in the sorted set between a given min and max score
  func sortedSetLengthByScore(request: CacheClient__SortedSetLengthByScoreRequest, context: StatusOnlyCallContext) -> EventLoopFuture<CacheClient__SortedSetLengthByScoreResponse>
}

extension CacheClient_ScsProvider {
  public var serviceName: Substring {
    return CacheClient_ScsServerMetadata.serviceDescriptor.fullName[...]
  }

  /// Determines, calls and returns the appropriate request handler, depending on the request's method.
  /// Returns nil for methods not handled by this service.
  public func handle(
    method name: Substring,
    context: CallHandlerContext
  ) -> GRPCServerHandlerProtocol? {
    switch name {
    case "Get":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<CacheClient__GetRequest>(),
        responseSerializer: ProtobufSerializer<CacheClient__GetResponse>(),
        interceptors: self.interceptors?.makeGetInterceptors() ?? [],
        userFunction: self.get(request:context:)
      )

    case "Set":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<CacheClient__SetRequest>(),
        responseSerializer: ProtobufSerializer<CacheClient__SetResponse>(),
        interceptors: self.interceptors?.makeSetInterceptors() ?? [],
        userFunction: self.set(request:context:)
      )

    case "SetIfNotExists":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<CacheClient__SetIfNotExistsRequest>(),
        responseSerializer: ProtobufSerializer<CacheClient__SetIfNotExistsResponse>(),
        interceptors: self.interceptors?.makeSetIfNotExistsInterceptors() ?? [],
        userFunction: self.setIfNotExists(request:context:)
      )

    case "Delete":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<CacheClient__DeleteRequest>(),
        responseSerializer: ProtobufSerializer<CacheClient__DeleteResponse>(),
        interceptors: self.interceptors?.makeDeleteInterceptors() ?? [],
        userFunction: self.delete(request:context:)
      )

    case "KeysExist":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<CacheClient__KeysExistRequest>(),
        responseSerializer: ProtobufSerializer<CacheClient__KeysExistResponse>(),
        interceptors: self.interceptors?.makeKeysExistInterceptors() ?? [],
        userFunction: self.keysExist(request:context:)
      )

    case "Increment":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<CacheClient__IncrementRequest>(),
        responseSerializer: ProtobufSerializer<CacheClient__IncrementResponse>(),
        interceptors: self.interceptors?.makeIncrementInterceptors() ?? [],
        userFunction: self.increment(request:context:)
      )

    case "UpdateTtl":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<CacheClient__UpdateTtlRequest>(),
        responseSerializer: ProtobufSerializer<CacheClient__UpdateTtlResponse>(),
        interceptors: self.interceptors?.makeUpdateTtlInterceptors() ?? [],
        userFunction: self.updateTtl(request:context:)
      )

    case "ItemGetTtl":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<CacheClient__ItemGetTtlRequest>(),
        responseSerializer: ProtobufSerializer<CacheClient__ItemGetTtlResponse>(),
        interceptors: self.interceptors?.makeItemGetTtlInterceptors() ?? [],
        userFunction: self.itemGetTtl(request:context:)
      )

    case "ItemGetType":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<CacheClient__ItemGetTypeRequest>(),
        responseSerializer: ProtobufSerializer<CacheClient__ItemGetTypeResponse>(),
        interceptors: self.interceptors?.makeItemGetTypeInterceptors() ?? [],
        userFunction: self.itemGetType(request:context:)
      )

    case "DictionaryGet":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<CacheClient__DictionaryGetRequest>(),
        responseSerializer: ProtobufSerializer<CacheClient__DictionaryGetResponse>(),
        interceptors: self.interceptors?.makeDictionaryGetInterceptors() ?? [],
        userFunction: self.dictionaryGet(request:context:)
      )

    case "DictionaryFetch":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<CacheClient__DictionaryFetchRequest>(),
        responseSerializer: ProtobufSerializer<CacheClient__DictionaryFetchResponse>(),
        interceptors: self.interceptors?.makeDictionaryFetchInterceptors() ?? [],
        userFunction: self.dictionaryFetch(request:context:)
      )

    case "DictionarySet":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<CacheClient__DictionarySetRequest>(),
        responseSerializer: ProtobufSerializer<CacheClient__DictionarySetResponse>(),
        interceptors: self.interceptors?.makeDictionarySetInterceptors() ?? [],
        userFunction: self.dictionarySet(request:context:)
      )

    case "DictionaryIncrement":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<CacheClient__DictionaryIncrementRequest>(),
        responseSerializer: ProtobufSerializer<CacheClient__DictionaryIncrementResponse>(),
        interceptors: self.interceptors?.makeDictionaryIncrementInterceptors() ?? [],
        userFunction: self.dictionaryIncrement(request:context:)
      )

    case "DictionaryDelete":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<CacheClient__DictionaryDeleteRequest>(),
        responseSerializer: ProtobufSerializer<CacheClient__DictionaryDeleteResponse>(),
        interceptors: self.interceptors?.makeDictionaryDeleteInterceptors() ?? [],
        userFunction: self.dictionaryDelete(request:context:)
      )

    case "DictionaryLength":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<CacheClient__DictionaryLengthRequest>(),
        responseSerializer: ProtobufSerializer<CacheClient__DictionaryLengthResponse>(),
        interceptors: self.interceptors?.makeDictionaryLengthInterceptors() ?? [],
        userFunction: self.dictionaryLength(request:context:)
      )

    case "SetFetch":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<CacheClient__SetFetchRequest>(),
        responseSerializer: ProtobufSerializer<CacheClient__SetFetchResponse>(),
        interceptors: self.interceptors?.makeSetFetchInterceptors() ?? [],
        userFunction: self.setFetch(request:context:)
      )

    case "SetUnion":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<CacheClient__SetUnionRequest>(),
        responseSerializer: ProtobufSerializer<CacheClient__SetUnionResponse>(),
        interceptors: self.interceptors?.makeSetUnionInterceptors() ?? [],
        userFunction: self.setUnion(request:context:)
      )

    case "SetDifference":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<CacheClient__SetDifferenceRequest>(),
        responseSerializer: ProtobufSerializer<CacheClient__SetDifferenceResponse>(),
        interceptors: self.interceptors?.makeSetDifferenceInterceptors() ?? [],
        userFunction: self.setDifference(request:context:)
      )

    case "SetContains":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<CacheClient__SetContainsRequest>(),
        responseSerializer: ProtobufSerializer<CacheClient__SetContainsResponse>(),
        interceptors: self.interceptors?.makeSetContainsInterceptors() ?? [],
        userFunction: self.setContains(request:context:)
      )

    case "SetLength":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<CacheClient__SetLengthRequest>(),
        responseSerializer: ProtobufSerializer<CacheClient__SetLengthResponse>(),
        interceptors: self.interceptors?.makeSetLengthInterceptors() ?? [],
        userFunction: self.setLength(request:context:)
      )

    case "SetPop":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<CacheClient__SetPopRequest>(),
        responseSerializer: ProtobufSerializer<CacheClient__SetPopResponse>(),
        interceptors: self.interceptors?.makeSetPopInterceptors() ?? [],
        userFunction: self.setPop(request:context:)
      )

    case "ListPushFront":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<CacheClient__ListPushFrontRequest>(),
        responseSerializer: ProtobufSerializer<CacheClient__ListPushFrontResponse>(),
        interceptors: self.interceptors?.makeListPushFrontInterceptors() ?? [],
        userFunction: self.listPushFront(request:context:)
      )

    case "ListPushBack":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<CacheClient__ListPushBackRequest>(),
        responseSerializer: ProtobufSerializer<CacheClient__ListPushBackResponse>(),
        interceptors: self.interceptors?.makeListPushBackInterceptors() ?? [],
        userFunction: self.listPushBack(request:context:)
      )

    case "ListPopFront":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<CacheClient__ListPopFrontRequest>(),
        responseSerializer: ProtobufSerializer<CacheClient__ListPopFrontResponse>(),
        interceptors: self.interceptors?.makeListPopFrontInterceptors() ?? [],
        userFunction: self.listPopFront(request:context:)
      )

    case "ListPopBack":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<CacheClient__ListPopBackRequest>(),
        responseSerializer: ProtobufSerializer<CacheClient__ListPopBackResponse>(),
        interceptors: self.interceptors?.makeListPopBackInterceptors() ?? [],
        userFunction: self.listPopBack(request:context:)
      )

    case "ListErase":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<CacheClient__ListEraseRequest>(),
        responseSerializer: ProtobufSerializer<CacheClient__ListEraseResponse>(),
        interceptors: self.interceptors?.makeListEraseInterceptors() ?? [],
        userFunction: self.listErase(request:context:)
      )

    case "ListRemove":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<CacheClient__ListRemoveRequest>(),
        responseSerializer: ProtobufSerializer<CacheClient__ListRemoveResponse>(),
        interceptors: self.interceptors?.makeListRemoveInterceptors() ?? [],
        userFunction: self.listRemove(request:context:)
      )

    case "ListFetch":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<CacheClient__ListFetchRequest>(),
        responseSerializer: ProtobufSerializer<CacheClient__ListFetchResponse>(),
        interceptors: self.interceptors?.makeListFetchInterceptors() ?? [],
        userFunction: self.listFetch(request:context:)
      )

    case "ListLength":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<CacheClient__ListLengthRequest>(),
        responseSerializer: ProtobufSerializer<CacheClient__ListLengthResponse>(),
        interceptors: self.interceptors?.makeListLengthInterceptors() ?? [],
        userFunction: self.listLength(request:context:)
      )

    case "ListConcatenateFront":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<CacheClient__ListConcatenateFrontRequest>(),
        responseSerializer: ProtobufSerializer<CacheClient__ListConcatenateFrontResponse>(),
        interceptors: self.interceptors?.makeListConcatenateFrontInterceptors() ?? [],
        userFunction: self.listConcatenateFront(request:context:)
      )

    case "ListConcatenateBack":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<CacheClient__ListConcatenateBackRequest>(),
        responseSerializer: ProtobufSerializer<CacheClient__ListConcatenateBackResponse>(),
        interceptors: self.interceptors?.makeListConcatenateBackInterceptors() ?? [],
        userFunction: self.listConcatenateBack(request:context:)
      )

    case "ListRetain":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<CacheClient__ListRetainRequest>(),
        responseSerializer: ProtobufSerializer<CacheClient__ListRetainResponse>(),
        interceptors: self.interceptors?.makeListRetainInterceptors() ?? [],
        userFunction: self.listRetain(request:context:)
      )

    case "SortedSetPut":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<CacheClient__SortedSetPutRequest>(),
        responseSerializer: ProtobufSerializer<CacheClient__SortedSetPutResponse>(),
        interceptors: self.interceptors?.makeSortedSetPutInterceptors() ?? [],
        userFunction: self.sortedSetPut(request:context:)
      )

    case "SortedSetFetch":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<CacheClient__SortedSetFetchRequest>(),
        responseSerializer: ProtobufSerializer<CacheClient__SortedSetFetchResponse>(),
        interceptors: self.interceptors?.makeSortedSetFetchInterceptors() ?? [],
        userFunction: self.sortedSetFetch(request:context:)
      )

    case "SortedSetGetScore":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<CacheClient__SortedSetGetScoreRequest>(),
        responseSerializer: ProtobufSerializer<CacheClient__SortedSetGetScoreResponse>(),
        interceptors: self.interceptors?.makeSortedSetGetScoreInterceptors() ?? [],
        userFunction: self.sortedSetGetScore(request:context:)
      )

    case "SortedSetRemove":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<CacheClient__SortedSetRemoveRequest>(),
        responseSerializer: ProtobufSerializer<CacheClient__SortedSetRemoveResponse>(),
        interceptors: self.interceptors?.makeSortedSetRemoveInterceptors() ?? [],
        userFunction: self.sortedSetRemove(request:context:)
      )

    case "SortedSetIncrement":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<CacheClient__SortedSetIncrementRequest>(),
        responseSerializer: ProtobufSerializer<CacheClient__SortedSetIncrementResponse>(),
        interceptors: self.interceptors?.makeSortedSetIncrementInterceptors() ?? [],
        userFunction: self.sortedSetIncrement(request:context:)
      )

    case "SortedSetGetRank":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<CacheClient__SortedSetGetRankRequest>(),
        responseSerializer: ProtobufSerializer<CacheClient__SortedSetGetRankResponse>(),
        interceptors: self.interceptors?.makeSortedSetGetRankInterceptors() ?? [],
        userFunction: self.sortedSetGetRank(request:context:)
      )

    case "SortedSetLength":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<CacheClient__SortedSetLengthRequest>(),
        responseSerializer: ProtobufSerializer<CacheClient__SortedSetLengthResponse>(),
        interceptors: self.interceptors?.makeSortedSetLengthInterceptors() ?? [],
        userFunction: self.sortedSetLength(request:context:)
      )

    case "SortedSetLengthByScore":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<CacheClient__SortedSetLengthByScoreRequest>(),
        responseSerializer: ProtobufSerializer<CacheClient__SortedSetLengthByScoreResponse>(),
        interceptors: self.interceptors?.makeSortedSetLengthByScoreInterceptors() ?? [],
        userFunction: self.sortedSetLengthByScore(request:context:)
      )

    default:
      return nil
    }
  }
}

/// To implement a server, implement an object which conforms to this protocol.
@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
public protocol CacheClient_ScsAsyncProvider: CallHandlerProvider, Sendable {
  static var serviceDescriptor: GRPCServiceDescriptor { get }
  var interceptors: CacheClient_ScsServerInterceptorFactoryProtocol? { get }

  func get(
    request: CacheClient__GetRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> CacheClient__GetResponse

  func set(
    request: CacheClient__SetRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> CacheClient__SetResponse

  func setIfNotExists(
    request: CacheClient__SetIfNotExistsRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> CacheClient__SetIfNotExistsResponse

  func delete(
    request: CacheClient__DeleteRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> CacheClient__DeleteResponse

  func keysExist(
    request: CacheClient__KeysExistRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> CacheClient__KeysExistResponse

  func increment(
    request: CacheClient__IncrementRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> CacheClient__IncrementResponse

  func updateTtl(
    request: CacheClient__UpdateTtlRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> CacheClient__UpdateTtlResponse

  func itemGetTtl(
    request: CacheClient__ItemGetTtlRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> CacheClient__ItemGetTtlResponse

  func itemGetType(
    request: CacheClient__ItemGetTypeRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> CacheClient__ItemGetTypeResponse

  func dictionaryGet(
    request: CacheClient__DictionaryGetRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> CacheClient__DictionaryGetResponse

  func dictionaryFetch(
    request: CacheClient__DictionaryFetchRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> CacheClient__DictionaryFetchResponse

  func dictionarySet(
    request: CacheClient__DictionarySetRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> CacheClient__DictionarySetResponse

  func dictionaryIncrement(
    request: CacheClient__DictionaryIncrementRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> CacheClient__DictionaryIncrementResponse

  func dictionaryDelete(
    request: CacheClient__DictionaryDeleteRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> CacheClient__DictionaryDeleteResponse

  func dictionaryLength(
    request: CacheClient__DictionaryLengthRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> CacheClient__DictionaryLengthResponse

  func setFetch(
    request: CacheClient__SetFetchRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> CacheClient__SetFetchResponse

  func setUnion(
    request: CacheClient__SetUnionRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> CacheClient__SetUnionResponse

  func setDifference(
    request: CacheClient__SetDifferenceRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> CacheClient__SetDifferenceResponse

  func setContains(
    request: CacheClient__SetContainsRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> CacheClient__SetContainsResponse

  func setLength(
    request: CacheClient__SetLengthRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> CacheClient__SetLengthResponse

  func setPop(
    request: CacheClient__SetPopRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> CacheClient__SetPopResponse

  func listPushFront(
    request: CacheClient__ListPushFrontRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> CacheClient__ListPushFrontResponse

  func listPushBack(
    request: CacheClient__ListPushBackRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> CacheClient__ListPushBackResponse

  func listPopFront(
    request: CacheClient__ListPopFrontRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> CacheClient__ListPopFrontResponse

  func listPopBack(
    request: CacheClient__ListPopBackRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> CacheClient__ListPopBackResponse

  func listErase(
    request: CacheClient__ListEraseRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> CacheClient__ListEraseResponse

  func listRemove(
    request: CacheClient__ListRemoveRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> CacheClient__ListRemoveResponse

  func listFetch(
    request: CacheClient__ListFetchRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> CacheClient__ListFetchResponse

  func listLength(
    request: CacheClient__ListLengthRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> CacheClient__ListLengthResponse

  func listConcatenateFront(
    request: CacheClient__ListConcatenateFrontRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> CacheClient__ListConcatenateFrontResponse

  func listConcatenateBack(
    request: CacheClient__ListConcatenateBackRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> CacheClient__ListConcatenateBackResponse

  func listRetain(
    request: CacheClient__ListRetainRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> CacheClient__ListRetainResponse

  /// Add or Updates new element with its score to the Sorted Set.
  /// If sorted set doesn't exist, a new one is created with the specified
  /// element and its associated score.
  /// If an element exists, then its associate score gets overridden with the one
  /// provided in this operation.
  func sortedSetPut(
    request: CacheClient__SortedSetPutRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> CacheClient__SortedSetPutResponse

  /// Fetches a subset of elements in the sorted set.
  func sortedSetFetch(
    request: CacheClient__SortedSetFetchRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> CacheClient__SortedSetFetchResponse

  /// Gets the specified element and its associated score if it exists in the
  /// sorted set.
  func sortedSetGetScore(
    request: CacheClient__SortedSetGetScoreRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> CacheClient__SortedSetGetScoreResponse

  /// Removes specified elements and their associated scores
  func sortedSetRemove(
    request: CacheClient__SortedSetRemoveRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> CacheClient__SortedSetRemoveResponse

  /// Changes the score associated with the element by specified amount.
  /// If the provided amount is negative, then the score associated with the
  /// element is decremented.
  /// If the element that needs to be incremented isn't present in the sorted
  /// set, it is added with specified number as the score.
  /// If the set itself doesn't exist then a new one with specified element and
  /// score is created.
  func sortedSetIncrement(
    request: CacheClient__SortedSetIncrementRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> CacheClient__SortedSetIncrementResponse

  /// Gives the rank of an element.
  func sortedSetGetRank(
    request: CacheClient__SortedSetGetRankRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> CacheClient__SortedSetGetRankResponse

  /// Returns length of the sorted set
  func sortedSetLength(
    request: CacheClient__SortedSetLengthRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> CacheClient__SortedSetLengthResponse

  /// Returns number of elements in the sorted set between a given min and max score
  func sortedSetLengthByScore(
    request: CacheClient__SortedSetLengthByScoreRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> CacheClient__SortedSetLengthByScoreResponse
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension CacheClient_ScsAsyncProvider {
  public static var serviceDescriptor: GRPCServiceDescriptor {
    return CacheClient_ScsServerMetadata.serviceDescriptor
  }

  public var serviceName: Substring {
    return CacheClient_ScsServerMetadata.serviceDescriptor.fullName[...]
  }

  public var interceptors: CacheClient_ScsServerInterceptorFactoryProtocol? {
    return nil
  }

  public func handle(
    method name: Substring,
    context: CallHandlerContext
  ) -> GRPCServerHandlerProtocol? {
    switch name {
    case "Get":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<CacheClient__GetRequest>(),
        responseSerializer: ProtobufSerializer<CacheClient__GetResponse>(),
        interceptors: self.interceptors?.makeGetInterceptors() ?? [],
        wrapping: { try await self.get(request: $0, context: $1) }
      )

    case "Set":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<CacheClient__SetRequest>(),
        responseSerializer: ProtobufSerializer<CacheClient__SetResponse>(),
        interceptors: self.interceptors?.makeSetInterceptors() ?? [],
        wrapping: { try await self.set(request: $0, context: $1) }
      )

    case "SetIfNotExists":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<CacheClient__SetIfNotExistsRequest>(),
        responseSerializer: ProtobufSerializer<CacheClient__SetIfNotExistsResponse>(),
        interceptors: self.interceptors?.makeSetIfNotExistsInterceptors() ?? [],
        wrapping: { try await self.setIfNotExists(request: $0, context: $1) }
      )

    case "Delete":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<CacheClient__DeleteRequest>(),
        responseSerializer: ProtobufSerializer<CacheClient__DeleteResponse>(),
        interceptors: self.interceptors?.makeDeleteInterceptors() ?? [],
        wrapping: { try await self.delete(request: $0, context: $1) }
      )

    case "KeysExist":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<CacheClient__KeysExistRequest>(),
        responseSerializer: ProtobufSerializer<CacheClient__KeysExistResponse>(),
        interceptors: self.interceptors?.makeKeysExistInterceptors() ?? [],
        wrapping: { try await self.keysExist(request: $0, context: $1) }
      )

    case "Increment":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<CacheClient__IncrementRequest>(),
        responseSerializer: ProtobufSerializer<CacheClient__IncrementResponse>(),
        interceptors: self.interceptors?.makeIncrementInterceptors() ?? [],
        wrapping: { try await self.increment(request: $0, context: $1) }
      )

    case "UpdateTtl":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<CacheClient__UpdateTtlRequest>(),
        responseSerializer: ProtobufSerializer<CacheClient__UpdateTtlResponse>(),
        interceptors: self.interceptors?.makeUpdateTtlInterceptors() ?? [],
        wrapping: { try await self.updateTtl(request: $0, context: $1) }
      )

    case "ItemGetTtl":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<CacheClient__ItemGetTtlRequest>(),
        responseSerializer: ProtobufSerializer<CacheClient__ItemGetTtlResponse>(),
        interceptors: self.interceptors?.makeItemGetTtlInterceptors() ?? [],
        wrapping: { try await self.itemGetTtl(request: $0, context: $1) }
      )

    case "ItemGetType":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<CacheClient__ItemGetTypeRequest>(),
        responseSerializer: ProtobufSerializer<CacheClient__ItemGetTypeResponse>(),
        interceptors: self.interceptors?.makeItemGetTypeInterceptors() ?? [],
        wrapping: { try await self.itemGetType(request: $0, context: $1) }
      )

    case "DictionaryGet":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<CacheClient__DictionaryGetRequest>(),
        responseSerializer: ProtobufSerializer<CacheClient__DictionaryGetResponse>(),
        interceptors: self.interceptors?.makeDictionaryGetInterceptors() ?? [],
        wrapping: { try await self.dictionaryGet(request: $0, context: $1) }
      )

    case "DictionaryFetch":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<CacheClient__DictionaryFetchRequest>(),
        responseSerializer: ProtobufSerializer<CacheClient__DictionaryFetchResponse>(),
        interceptors: self.interceptors?.makeDictionaryFetchInterceptors() ?? [],
        wrapping: { try await self.dictionaryFetch(request: $0, context: $1) }
      )

    case "DictionarySet":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<CacheClient__DictionarySetRequest>(),
        responseSerializer: ProtobufSerializer<CacheClient__DictionarySetResponse>(),
        interceptors: self.interceptors?.makeDictionarySetInterceptors() ?? [],
        wrapping: { try await self.dictionarySet(request: $0, context: $1) }
      )

    case "DictionaryIncrement":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<CacheClient__DictionaryIncrementRequest>(),
        responseSerializer: ProtobufSerializer<CacheClient__DictionaryIncrementResponse>(),
        interceptors: self.interceptors?.makeDictionaryIncrementInterceptors() ?? [],
        wrapping: { try await self.dictionaryIncrement(request: $0, context: $1) }
      )

    case "DictionaryDelete":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<CacheClient__DictionaryDeleteRequest>(),
        responseSerializer: ProtobufSerializer<CacheClient__DictionaryDeleteResponse>(),
        interceptors: self.interceptors?.makeDictionaryDeleteInterceptors() ?? [],
        wrapping: { try await self.dictionaryDelete(request: $0, context: $1) }
      )

    case "DictionaryLength":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<CacheClient__DictionaryLengthRequest>(),
        responseSerializer: ProtobufSerializer<CacheClient__DictionaryLengthResponse>(),
        interceptors: self.interceptors?.makeDictionaryLengthInterceptors() ?? [],
        wrapping: { try await self.dictionaryLength(request: $0, context: $1) }
      )

    case "SetFetch":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<CacheClient__SetFetchRequest>(),
        responseSerializer: ProtobufSerializer<CacheClient__SetFetchResponse>(),
        interceptors: self.interceptors?.makeSetFetchInterceptors() ?? [],
        wrapping: { try await self.setFetch(request: $0, context: $1) }
      )

    case "SetUnion":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<CacheClient__SetUnionRequest>(),
        responseSerializer: ProtobufSerializer<CacheClient__SetUnionResponse>(),
        interceptors: self.interceptors?.makeSetUnionInterceptors() ?? [],
        wrapping: { try await self.setUnion(request: $0, context: $1) }
      )

    case "SetDifference":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<CacheClient__SetDifferenceRequest>(),
        responseSerializer: ProtobufSerializer<CacheClient__SetDifferenceResponse>(),
        interceptors: self.interceptors?.makeSetDifferenceInterceptors() ?? [],
        wrapping: { try await self.setDifference(request: $0, context: $1) }
      )

    case "SetContains":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<CacheClient__SetContainsRequest>(),
        responseSerializer: ProtobufSerializer<CacheClient__SetContainsResponse>(),
        interceptors: self.interceptors?.makeSetContainsInterceptors() ?? [],
        wrapping: { try await self.setContains(request: $0, context: $1) }
      )

    case "SetLength":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<CacheClient__SetLengthRequest>(),
        responseSerializer: ProtobufSerializer<CacheClient__SetLengthResponse>(),
        interceptors: self.interceptors?.makeSetLengthInterceptors() ?? [],
        wrapping: { try await self.setLength(request: $0, context: $1) }
      )

    case "SetPop":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<CacheClient__SetPopRequest>(),
        responseSerializer: ProtobufSerializer<CacheClient__SetPopResponse>(),
        interceptors: self.interceptors?.makeSetPopInterceptors() ?? [],
        wrapping: { try await self.setPop(request: $0, context: $1) }
      )

    case "ListPushFront":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<CacheClient__ListPushFrontRequest>(),
        responseSerializer: ProtobufSerializer<CacheClient__ListPushFrontResponse>(),
        interceptors: self.interceptors?.makeListPushFrontInterceptors() ?? [],
        wrapping: { try await self.listPushFront(request: $0, context: $1) }
      )

    case "ListPushBack":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<CacheClient__ListPushBackRequest>(),
        responseSerializer: ProtobufSerializer<CacheClient__ListPushBackResponse>(),
        interceptors: self.interceptors?.makeListPushBackInterceptors() ?? [],
        wrapping: { try await self.listPushBack(request: $0, context: $1) }
      )

    case "ListPopFront":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<CacheClient__ListPopFrontRequest>(),
        responseSerializer: ProtobufSerializer<CacheClient__ListPopFrontResponse>(),
        interceptors: self.interceptors?.makeListPopFrontInterceptors() ?? [],
        wrapping: { try await self.listPopFront(request: $0, context: $1) }
      )

    case "ListPopBack":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<CacheClient__ListPopBackRequest>(),
        responseSerializer: ProtobufSerializer<CacheClient__ListPopBackResponse>(),
        interceptors: self.interceptors?.makeListPopBackInterceptors() ?? [],
        wrapping: { try await self.listPopBack(request: $0, context: $1) }
      )

    case "ListErase":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<CacheClient__ListEraseRequest>(),
        responseSerializer: ProtobufSerializer<CacheClient__ListEraseResponse>(),
        interceptors: self.interceptors?.makeListEraseInterceptors() ?? [],
        wrapping: { try await self.listErase(request: $0, context: $1) }
      )

    case "ListRemove":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<CacheClient__ListRemoveRequest>(),
        responseSerializer: ProtobufSerializer<CacheClient__ListRemoveResponse>(),
        interceptors: self.interceptors?.makeListRemoveInterceptors() ?? [],
        wrapping: { try await self.listRemove(request: $0, context: $1) }
      )

    case "ListFetch":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<CacheClient__ListFetchRequest>(),
        responseSerializer: ProtobufSerializer<CacheClient__ListFetchResponse>(),
        interceptors: self.interceptors?.makeListFetchInterceptors() ?? [],
        wrapping: { try await self.listFetch(request: $0, context: $1) }
      )

    case "ListLength":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<CacheClient__ListLengthRequest>(),
        responseSerializer: ProtobufSerializer<CacheClient__ListLengthResponse>(),
        interceptors: self.interceptors?.makeListLengthInterceptors() ?? [],
        wrapping: { try await self.listLength(request: $0, context: $1) }
      )

    case "ListConcatenateFront":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<CacheClient__ListConcatenateFrontRequest>(),
        responseSerializer: ProtobufSerializer<CacheClient__ListConcatenateFrontResponse>(),
        interceptors: self.interceptors?.makeListConcatenateFrontInterceptors() ?? [],
        wrapping: { try await self.listConcatenateFront(request: $0, context: $1) }
      )

    case "ListConcatenateBack":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<CacheClient__ListConcatenateBackRequest>(),
        responseSerializer: ProtobufSerializer<CacheClient__ListConcatenateBackResponse>(),
        interceptors: self.interceptors?.makeListConcatenateBackInterceptors() ?? [],
        wrapping: { try await self.listConcatenateBack(request: $0, context: $1) }
      )

    case "ListRetain":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<CacheClient__ListRetainRequest>(),
        responseSerializer: ProtobufSerializer<CacheClient__ListRetainResponse>(),
        interceptors: self.interceptors?.makeListRetainInterceptors() ?? [],
        wrapping: { try await self.listRetain(request: $0, context: $1) }
      )

    case "SortedSetPut":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<CacheClient__SortedSetPutRequest>(),
        responseSerializer: ProtobufSerializer<CacheClient__SortedSetPutResponse>(),
        interceptors: self.interceptors?.makeSortedSetPutInterceptors() ?? [],
        wrapping: { try await self.sortedSetPut(request: $0, context: $1) }
      )

    case "SortedSetFetch":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<CacheClient__SortedSetFetchRequest>(),
        responseSerializer: ProtobufSerializer<CacheClient__SortedSetFetchResponse>(),
        interceptors: self.interceptors?.makeSortedSetFetchInterceptors() ?? [],
        wrapping: { try await self.sortedSetFetch(request: $0, context: $1) }
      )

    case "SortedSetGetScore":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<CacheClient__SortedSetGetScoreRequest>(),
        responseSerializer: ProtobufSerializer<CacheClient__SortedSetGetScoreResponse>(),
        interceptors: self.interceptors?.makeSortedSetGetScoreInterceptors() ?? [],
        wrapping: { try await self.sortedSetGetScore(request: $0, context: $1) }
      )

    case "SortedSetRemove":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<CacheClient__SortedSetRemoveRequest>(),
        responseSerializer: ProtobufSerializer<CacheClient__SortedSetRemoveResponse>(),
        interceptors: self.interceptors?.makeSortedSetRemoveInterceptors() ?? [],
        wrapping: { try await self.sortedSetRemove(request: $0, context: $1) }
      )

    case "SortedSetIncrement":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<CacheClient__SortedSetIncrementRequest>(),
        responseSerializer: ProtobufSerializer<CacheClient__SortedSetIncrementResponse>(),
        interceptors: self.interceptors?.makeSortedSetIncrementInterceptors() ?? [],
        wrapping: { try await self.sortedSetIncrement(request: $0, context: $1) }
      )

    case "SortedSetGetRank":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<CacheClient__SortedSetGetRankRequest>(),
        responseSerializer: ProtobufSerializer<CacheClient__SortedSetGetRankResponse>(),
        interceptors: self.interceptors?.makeSortedSetGetRankInterceptors() ?? [],
        wrapping: { try await self.sortedSetGetRank(request: $0, context: $1) }
      )

    case "SortedSetLength":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<CacheClient__SortedSetLengthRequest>(),
        responseSerializer: ProtobufSerializer<CacheClient__SortedSetLengthResponse>(),
        interceptors: self.interceptors?.makeSortedSetLengthInterceptors() ?? [],
        wrapping: { try await self.sortedSetLength(request: $0, context: $1) }
      )

    case "SortedSetLengthByScore":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<CacheClient__SortedSetLengthByScoreRequest>(),
        responseSerializer: ProtobufSerializer<CacheClient__SortedSetLengthByScoreResponse>(),
        interceptors: self.interceptors?.makeSortedSetLengthByScoreInterceptors() ?? [],
        wrapping: { try await self.sortedSetLengthByScore(request: $0, context: $1) }
      )

    default:
      return nil
    }
  }
}

public protocol CacheClient_ScsServerInterceptorFactoryProtocol: Sendable {

  /// - Returns: Interceptors to use when handling 'get'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeGetInterceptors() -> [ServerInterceptor<CacheClient__GetRequest, CacheClient__GetResponse>]

  /// - Returns: Interceptors to use when handling 'set'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeSetInterceptors() -> [ServerInterceptor<CacheClient__SetRequest, CacheClient__SetResponse>]

  /// - Returns: Interceptors to use when handling 'setIfNotExists'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeSetIfNotExistsInterceptors() -> [ServerInterceptor<CacheClient__SetIfNotExistsRequest, CacheClient__SetIfNotExistsResponse>]

  /// - Returns: Interceptors to use when handling 'delete'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeDeleteInterceptors() -> [ServerInterceptor<CacheClient__DeleteRequest, CacheClient__DeleteResponse>]

  /// - Returns: Interceptors to use when handling 'keysExist'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeKeysExistInterceptors() -> [ServerInterceptor<CacheClient__KeysExistRequest, CacheClient__KeysExistResponse>]

  /// - Returns: Interceptors to use when handling 'increment'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeIncrementInterceptors() -> [ServerInterceptor<CacheClient__IncrementRequest, CacheClient__IncrementResponse>]

  /// - Returns: Interceptors to use when handling 'updateTtl'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeUpdateTtlInterceptors() -> [ServerInterceptor<CacheClient__UpdateTtlRequest, CacheClient__UpdateTtlResponse>]

  /// - Returns: Interceptors to use when handling 'itemGetTtl'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeItemGetTtlInterceptors() -> [ServerInterceptor<CacheClient__ItemGetTtlRequest, CacheClient__ItemGetTtlResponse>]

  /// - Returns: Interceptors to use when handling 'itemGetType'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeItemGetTypeInterceptors() -> [ServerInterceptor<CacheClient__ItemGetTypeRequest, CacheClient__ItemGetTypeResponse>]

  /// - Returns: Interceptors to use when handling 'dictionaryGet'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeDictionaryGetInterceptors() -> [ServerInterceptor<CacheClient__DictionaryGetRequest, CacheClient__DictionaryGetResponse>]

  /// - Returns: Interceptors to use when handling 'dictionaryFetch'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeDictionaryFetchInterceptors() -> [ServerInterceptor<CacheClient__DictionaryFetchRequest, CacheClient__DictionaryFetchResponse>]

  /// - Returns: Interceptors to use when handling 'dictionarySet'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeDictionarySetInterceptors() -> [ServerInterceptor<CacheClient__DictionarySetRequest, CacheClient__DictionarySetResponse>]

  /// - Returns: Interceptors to use when handling 'dictionaryIncrement'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeDictionaryIncrementInterceptors() -> [ServerInterceptor<CacheClient__DictionaryIncrementRequest, CacheClient__DictionaryIncrementResponse>]

  /// - Returns: Interceptors to use when handling 'dictionaryDelete'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeDictionaryDeleteInterceptors() -> [ServerInterceptor<CacheClient__DictionaryDeleteRequest, CacheClient__DictionaryDeleteResponse>]

  /// - Returns: Interceptors to use when handling 'dictionaryLength'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeDictionaryLengthInterceptors() -> [ServerInterceptor<CacheClient__DictionaryLengthRequest, CacheClient__DictionaryLengthResponse>]

  /// - Returns: Interceptors to use when handling 'setFetch'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeSetFetchInterceptors() -> [ServerInterceptor<CacheClient__SetFetchRequest, CacheClient__SetFetchResponse>]

  /// - Returns: Interceptors to use when handling 'setUnion'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeSetUnionInterceptors() -> [ServerInterceptor<CacheClient__SetUnionRequest, CacheClient__SetUnionResponse>]

  /// - Returns: Interceptors to use when handling 'setDifference'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeSetDifferenceInterceptors() -> [ServerInterceptor<CacheClient__SetDifferenceRequest, CacheClient__SetDifferenceResponse>]

  /// - Returns: Interceptors to use when handling 'setContains'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeSetContainsInterceptors() -> [ServerInterceptor<CacheClient__SetContainsRequest, CacheClient__SetContainsResponse>]

  /// - Returns: Interceptors to use when handling 'setLength'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeSetLengthInterceptors() -> [ServerInterceptor<CacheClient__SetLengthRequest, CacheClient__SetLengthResponse>]

  /// - Returns: Interceptors to use when handling 'setPop'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeSetPopInterceptors() -> [ServerInterceptor<CacheClient__SetPopRequest, CacheClient__SetPopResponse>]

  /// - Returns: Interceptors to use when handling 'listPushFront'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeListPushFrontInterceptors() -> [ServerInterceptor<CacheClient__ListPushFrontRequest, CacheClient__ListPushFrontResponse>]

  /// - Returns: Interceptors to use when handling 'listPushBack'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeListPushBackInterceptors() -> [ServerInterceptor<CacheClient__ListPushBackRequest, CacheClient__ListPushBackResponse>]

  /// - Returns: Interceptors to use when handling 'listPopFront'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeListPopFrontInterceptors() -> [ServerInterceptor<CacheClient__ListPopFrontRequest, CacheClient__ListPopFrontResponse>]

  /// - Returns: Interceptors to use when handling 'listPopBack'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeListPopBackInterceptors() -> [ServerInterceptor<CacheClient__ListPopBackRequest, CacheClient__ListPopBackResponse>]

  /// - Returns: Interceptors to use when handling 'listErase'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeListEraseInterceptors() -> [ServerInterceptor<CacheClient__ListEraseRequest, CacheClient__ListEraseResponse>]

  /// - Returns: Interceptors to use when handling 'listRemove'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeListRemoveInterceptors() -> [ServerInterceptor<CacheClient__ListRemoveRequest, CacheClient__ListRemoveResponse>]

  /// - Returns: Interceptors to use when handling 'listFetch'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeListFetchInterceptors() -> [ServerInterceptor<CacheClient__ListFetchRequest, CacheClient__ListFetchResponse>]

  /// - Returns: Interceptors to use when handling 'listLength'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeListLengthInterceptors() -> [ServerInterceptor<CacheClient__ListLengthRequest, CacheClient__ListLengthResponse>]

  /// - Returns: Interceptors to use when handling 'listConcatenateFront'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeListConcatenateFrontInterceptors() -> [ServerInterceptor<CacheClient__ListConcatenateFrontRequest, CacheClient__ListConcatenateFrontResponse>]

  /// - Returns: Interceptors to use when handling 'listConcatenateBack'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeListConcatenateBackInterceptors() -> [ServerInterceptor<CacheClient__ListConcatenateBackRequest, CacheClient__ListConcatenateBackResponse>]

  /// - Returns: Interceptors to use when handling 'listRetain'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeListRetainInterceptors() -> [ServerInterceptor<CacheClient__ListRetainRequest, CacheClient__ListRetainResponse>]

  /// - Returns: Interceptors to use when handling 'sortedSetPut'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeSortedSetPutInterceptors() -> [ServerInterceptor<CacheClient__SortedSetPutRequest, CacheClient__SortedSetPutResponse>]

  /// - Returns: Interceptors to use when handling 'sortedSetFetch'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeSortedSetFetchInterceptors() -> [ServerInterceptor<CacheClient__SortedSetFetchRequest, CacheClient__SortedSetFetchResponse>]

  /// - Returns: Interceptors to use when handling 'sortedSetGetScore'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeSortedSetGetScoreInterceptors() -> [ServerInterceptor<CacheClient__SortedSetGetScoreRequest, CacheClient__SortedSetGetScoreResponse>]

  /// - Returns: Interceptors to use when handling 'sortedSetRemove'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeSortedSetRemoveInterceptors() -> [ServerInterceptor<CacheClient__SortedSetRemoveRequest, CacheClient__SortedSetRemoveResponse>]

  /// - Returns: Interceptors to use when handling 'sortedSetIncrement'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeSortedSetIncrementInterceptors() -> [ServerInterceptor<CacheClient__SortedSetIncrementRequest, CacheClient__SortedSetIncrementResponse>]

  /// - Returns: Interceptors to use when handling 'sortedSetGetRank'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeSortedSetGetRankInterceptors() -> [ServerInterceptor<CacheClient__SortedSetGetRankRequest, CacheClient__SortedSetGetRankResponse>]

  /// - Returns: Interceptors to use when handling 'sortedSetLength'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeSortedSetLengthInterceptors() -> [ServerInterceptor<CacheClient__SortedSetLengthRequest, CacheClient__SortedSetLengthResponse>]

  /// - Returns: Interceptors to use when handling 'sortedSetLengthByScore'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeSortedSetLengthByScoreInterceptors() -> [ServerInterceptor<CacheClient__SortedSetLengthByScoreRequest, CacheClient__SortedSetLengthByScoreResponse>]
}

public enum CacheClient_ScsServerMetadata {
  public static let serviceDescriptor = GRPCServiceDescriptor(
    name: "Scs",
    fullName: "cache_client.Scs",
    methods: [
      CacheClient_ScsServerMetadata.Methods.get,
      CacheClient_ScsServerMetadata.Methods.set,
      CacheClient_ScsServerMetadata.Methods.setIfNotExists,
      CacheClient_ScsServerMetadata.Methods.delete,
      CacheClient_ScsServerMetadata.Methods.keysExist,
      CacheClient_ScsServerMetadata.Methods.increment,
      CacheClient_ScsServerMetadata.Methods.updateTtl,
      CacheClient_ScsServerMetadata.Methods.itemGetTtl,
      CacheClient_ScsServerMetadata.Methods.itemGetType,
      CacheClient_ScsServerMetadata.Methods.dictionaryGet,
      CacheClient_ScsServerMetadata.Methods.dictionaryFetch,
      CacheClient_ScsServerMetadata.Methods.dictionarySet,
      CacheClient_ScsServerMetadata.Methods.dictionaryIncrement,
      CacheClient_ScsServerMetadata.Methods.dictionaryDelete,
      CacheClient_ScsServerMetadata.Methods.dictionaryLength,
      CacheClient_ScsServerMetadata.Methods.setFetch,
      CacheClient_ScsServerMetadata.Methods.setUnion,
      CacheClient_ScsServerMetadata.Methods.setDifference,
      CacheClient_ScsServerMetadata.Methods.setContains,
      CacheClient_ScsServerMetadata.Methods.setLength,
      CacheClient_ScsServerMetadata.Methods.setPop,
      CacheClient_ScsServerMetadata.Methods.listPushFront,
      CacheClient_ScsServerMetadata.Methods.listPushBack,
      CacheClient_ScsServerMetadata.Methods.listPopFront,
      CacheClient_ScsServerMetadata.Methods.listPopBack,
      CacheClient_ScsServerMetadata.Methods.listErase,
      CacheClient_ScsServerMetadata.Methods.listRemove,
      CacheClient_ScsServerMetadata.Methods.listFetch,
      CacheClient_ScsServerMetadata.Methods.listLength,
      CacheClient_ScsServerMetadata.Methods.listConcatenateFront,
      CacheClient_ScsServerMetadata.Methods.listConcatenateBack,
      CacheClient_ScsServerMetadata.Methods.listRetain,
      CacheClient_ScsServerMetadata.Methods.sortedSetPut,
      CacheClient_ScsServerMetadata.Methods.sortedSetFetch,
      CacheClient_ScsServerMetadata.Methods.sortedSetGetScore,
      CacheClient_ScsServerMetadata.Methods.sortedSetRemove,
      CacheClient_ScsServerMetadata.Methods.sortedSetIncrement,
      CacheClient_ScsServerMetadata.Methods.sortedSetGetRank,
      CacheClient_ScsServerMetadata.Methods.sortedSetLength,
      CacheClient_ScsServerMetadata.Methods.sortedSetLengthByScore,
    ]
  )

  public enum Methods {
    public static let get = GRPCMethodDescriptor(
      name: "Get",
      path: "/cache_client.Scs/Get",
      type: GRPCCallType.unary
    )

    public static let set = GRPCMethodDescriptor(
      name: "Set",
      path: "/cache_client.Scs/Set",
      type: GRPCCallType.unary
    )

    public static let setIfNotExists = GRPCMethodDescriptor(
      name: "SetIfNotExists",
      path: "/cache_client.Scs/SetIfNotExists",
      type: GRPCCallType.unary
    )

    public static let delete = GRPCMethodDescriptor(
      name: "Delete",
      path: "/cache_client.Scs/Delete",
      type: GRPCCallType.unary
    )

    public static let keysExist = GRPCMethodDescriptor(
      name: "KeysExist",
      path: "/cache_client.Scs/KeysExist",
      type: GRPCCallType.unary
    )

    public static let increment = GRPCMethodDescriptor(
      name: "Increment",
      path: "/cache_client.Scs/Increment",
      type: GRPCCallType.unary
    )

    public static let updateTtl = GRPCMethodDescriptor(
      name: "UpdateTtl",
      path: "/cache_client.Scs/UpdateTtl",
      type: GRPCCallType.unary
    )

    public static let itemGetTtl = GRPCMethodDescriptor(
      name: "ItemGetTtl",
      path: "/cache_client.Scs/ItemGetTtl",
      type: GRPCCallType.unary
    )

    public static let itemGetType = GRPCMethodDescriptor(
      name: "ItemGetType",
      path: "/cache_client.Scs/ItemGetType",
      type: GRPCCallType.unary
    )

    public static let dictionaryGet = GRPCMethodDescriptor(
      name: "DictionaryGet",
      path: "/cache_client.Scs/DictionaryGet",
      type: GRPCCallType.unary
    )

    public static let dictionaryFetch = GRPCMethodDescriptor(
      name: "DictionaryFetch",
      path: "/cache_client.Scs/DictionaryFetch",
      type: GRPCCallType.unary
    )

    public static let dictionarySet = GRPCMethodDescriptor(
      name: "DictionarySet",
      path: "/cache_client.Scs/DictionarySet",
      type: GRPCCallType.unary
    )

    public static let dictionaryIncrement = GRPCMethodDescriptor(
      name: "DictionaryIncrement",
      path: "/cache_client.Scs/DictionaryIncrement",
      type: GRPCCallType.unary
    )

    public static let dictionaryDelete = GRPCMethodDescriptor(
      name: "DictionaryDelete",
      path: "/cache_client.Scs/DictionaryDelete",
      type: GRPCCallType.unary
    )

    public static let dictionaryLength = GRPCMethodDescriptor(
      name: "DictionaryLength",
      path: "/cache_client.Scs/DictionaryLength",
      type: GRPCCallType.unary
    )

    public static let setFetch = GRPCMethodDescriptor(
      name: "SetFetch",
      path: "/cache_client.Scs/SetFetch",
      type: GRPCCallType.unary
    )

    public static let setUnion = GRPCMethodDescriptor(
      name: "SetUnion",
      path: "/cache_client.Scs/SetUnion",
      type: GRPCCallType.unary
    )

    public static let setDifference = GRPCMethodDescriptor(
      name: "SetDifference",
      path: "/cache_client.Scs/SetDifference",
      type: GRPCCallType.unary
    )

    public static let setContains = GRPCMethodDescriptor(
      name: "SetContains",
      path: "/cache_client.Scs/SetContains",
      type: GRPCCallType.unary
    )

    public static let setLength = GRPCMethodDescriptor(
      name: "SetLength",
      path: "/cache_client.Scs/SetLength",
      type: GRPCCallType.unary
    )

    public static let setPop = GRPCMethodDescriptor(
      name: "SetPop",
      path: "/cache_client.Scs/SetPop",
      type: GRPCCallType.unary
    )

    public static let listPushFront = GRPCMethodDescriptor(
      name: "ListPushFront",
      path: "/cache_client.Scs/ListPushFront",
      type: GRPCCallType.unary
    )

    public static let listPushBack = GRPCMethodDescriptor(
      name: "ListPushBack",
      path: "/cache_client.Scs/ListPushBack",
      type: GRPCCallType.unary
    )

    public static let listPopFront = GRPCMethodDescriptor(
      name: "ListPopFront",
      path: "/cache_client.Scs/ListPopFront",
      type: GRPCCallType.unary
    )

    public static let listPopBack = GRPCMethodDescriptor(
      name: "ListPopBack",
      path: "/cache_client.Scs/ListPopBack",
      type: GRPCCallType.unary
    )

    public static let listErase = GRPCMethodDescriptor(
      name: "ListErase",
      path: "/cache_client.Scs/ListErase",
      type: GRPCCallType.unary
    )

    public static let listRemove = GRPCMethodDescriptor(
      name: "ListRemove",
      path: "/cache_client.Scs/ListRemove",
      type: GRPCCallType.unary
    )

    public static let listFetch = GRPCMethodDescriptor(
      name: "ListFetch",
      path: "/cache_client.Scs/ListFetch",
      type: GRPCCallType.unary
    )

    public static let listLength = GRPCMethodDescriptor(
      name: "ListLength",
      path: "/cache_client.Scs/ListLength",
      type: GRPCCallType.unary
    )

    public static let listConcatenateFront = GRPCMethodDescriptor(
      name: "ListConcatenateFront",
      path: "/cache_client.Scs/ListConcatenateFront",
      type: GRPCCallType.unary
    )

    public static let listConcatenateBack = GRPCMethodDescriptor(
      name: "ListConcatenateBack",
      path: "/cache_client.Scs/ListConcatenateBack",
      type: GRPCCallType.unary
    )

    public static let listRetain = GRPCMethodDescriptor(
      name: "ListRetain",
      path: "/cache_client.Scs/ListRetain",
      type: GRPCCallType.unary
    )

    public static let sortedSetPut = GRPCMethodDescriptor(
      name: "SortedSetPut",
      path: "/cache_client.Scs/SortedSetPut",
      type: GRPCCallType.unary
    )

    public static let sortedSetFetch = GRPCMethodDescriptor(
      name: "SortedSetFetch",
      path: "/cache_client.Scs/SortedSetFetch",
      type: GRPCCallType.unary
    )

    public static let sortedSetGetScore = GRPCMethodDescriptor(
      name: "SortedSetGetScore",
      path: "/cache_client.Scs/SortedSetGetScore",
      type: GRPCCallType.unary
    )

    public static let sortedSetRemove = GRPCMethodDescriptor(
      name: "SortedSetRemove",
      path: "/cache_client.Scs/SortedSetRemove",
      type: GRPCCallType.unary
    )

    public static let sortedSetIncrement = GRPCMethodDescriptor(
      name: "SortedSetIncrement",
      path: "/cache_client.Scs/SortedSetIncrement",
      type: GRPCCallType.unary
    )

    public static let sortedSetGetRank = GRPCMethodDescriptor(
      name: "SortedSetGetRank",
      path: "/cache_client.Scs/SortedSetGetRank",
      type: GRPCCallType.unary
    )

    public static let sortedSetLength = GRPCMethodDescriptor(
      name: "SortedSetLength",
      path: "/cache_client.Scs/SortedSetLength",
      type: GRPCCallType.unary
    )

    public static let sortedSetLengthByScore = GRPCMethodDescriptor(
      name: "SortedSetLengthByScore",
      path: "/cache_client.Scs/SortedSetLengthByScore",
      type: GRPCCallType.unary
    )
  }
}
