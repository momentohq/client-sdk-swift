//
// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the protocol buffer compiler.
// Source: cacheping.proto
//
import GRPC
import NIO
import NIOConcurrencyHelpers
import SwiftProtobuf


/// Usage: instantiate `CacheClient_PingClient`, then call methods of this protocol to make API calls.
public protocol CacheClient_PingClientProtocol: GRPCClient {
  var serviceName: String { get }
  var interceptors: CacheClient_PingClientInterceptorFactoryProtocol? { get }

  func ping(
    _ request: CacheClient__PingRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<CacheClient__PingRequest, CacheClient__PingResponse>
}

extension CacheClient_PingClientProtocol {
  public var serviceName: String {
    return "cache_client.Ping"
  }

  /// Unary call to Ping
  ///
  /// - Parameters:
  ///   - request: Request to send to Ping.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func ping(
    _ request: CacheClient__PingRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<CacheClient__PingRequest, CacheClient__PingResponse> {
    return self.makeUnaryCall(
      path: CacheClient_PingClientMetadata.Methods.ping.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makePingInterceptors() ?? []
    )
  }
}

@available(*, deprecated)
extension CacheClient_PingClient: @unchecked Sendable {}

@available(*, deprecated, renamed: "CacheClient_PingNIOClient")
public final class CacheClient_PingClient: CacheClient_PingClientProtocol {
  private let lock = Lock()
  private var _defaultCallOptions: CallOptions
  private var _interceptors: CacheClient_PingClientInterceptorFactoryProtocol?
  public let channel: GRPCChannel
  public var defaultCallOptions: CallOptions {
    get { self.lock.withLock { return self._defaultCallOptions } }
    set { self.lock.withLockVoid { self._defaultCallOptions = newValue } }
  }
  public var interceptors: CacheClient_PingClientInterceptorFactoryProtocol? {
    get { self.lock.withLock { return self._interceptors } }
    set { self.lock.withLockVoid { self._interceptors = newValue } }
  }

  /// Creates a client for the cache_client.Ping service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  public init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: CacheClient_PingClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self._defaultCallOptions = defaultCallOptions
    self._interceptors = interceptors
  }
}

public struct CacheClient_PingNIOClient: CacheClient_PingClientProtocol {
  public var channel: GRPCChannel
  public var defaultCallOptions: CallOptions
  public var interceptors: CacheClient_PingClientInterceptorFactoryProtocol?

  /// Creates a client for the cache_client.Ping service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  public init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: CacheClient_PingClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
public protocol CacheClient_PingAsyncClientProtocol: GRPCClient {
  static var serviceDescriptor: GRPCServiceDescriptor { get }
  var interceptors: CacheClient_PingClientInterceptorFactoryProtocol? { get }

  func makePingCall(
    _ request: CacheClient__PingRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<CacheClient__PingRequest, CacheClient__PingResponse>
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension CacheClient_PingAsyncClientProtocol {
  public static var serviceDescriptor: GRPCServiceDescriptor {
    return CacheClient_PingClientMetadata.serviceDescriptor
  }

  public var interceptors: CacheClient_PingClientInterceptorFactoryProtocol? {
    return nil
  }

  public func makePingCall(
    _ request: CacheClient__PingRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<CacheClient__PingRequest, CacheClient__PingResponse> {
    return self.makeAsyncUnaryCall(
      path: CacheClient_PingClientMetadata.Methods.ping.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makePingInterceptors() ?? []
    )
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension CacheClient_PingAsyncClientProtocol {
  public func ping(
    _ request: CacheClient__PingRequest,
    callOptions: CallOptions? = nil
  ) async throws -> CacheClient__PingResponse {
    return try await self.performAsyncUnaryCall(
      path: CacheClient_PingClientMetadata.Methods.ping.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makePingInterceptors() ?? []
    )
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
public struct CacheClient_PingAsyncClient: CacheClient_PingAsyncClientProtocol {
  public var channel: GRPCChannel
  public var defaultCallOptions: CallOptions
  public var interceptors: CacheClient_PingClientInterceptorFactoryProtocol?

  public init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: CacheClient_PingClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

public protocol CacheClient_PingClientInterceptorFactoryProtocol: Sendable {

  /// - Returns: Interceptors to use when invoking 'ping'.
  func makePingInterceptors() -> [ClientInterceptor<CacheClient__PingRequest, CacheClient__PingResponse>]
}

public enum CacheClient_PingClientMetadata {
  public static let serviceDescriptor = GRPCServiceDescriptor(
    name: "Ping",
    fullName: "cache_client.Ping",
    methods: [
      CacheClient_PingClientMetadata.Methods.ping,
    ]
  )

  public enum Methods {
    public static let ping = GRPCMethodDescriptor(
      name: "Ping",
      path: "/cache_client.Ping/Ping",
      type: GRPCCallType.unary
    )
  }
}

/// To build a server, implement a class that conforms to this protocol.
public protocol CacheClient_PingProvider: CallHandlerProvider {
  var interceptors: CacheClient_PingServerInterceptorFactoryProtocol? { get }

  func ping(request: CacheClient__PingRequest, context: StatusOnlyCallContext) -> EventLoopFuture<CacheClient__PingResponse>
}

extension CacheClient_PingProvider {
  public var serviceName: Substring {
    return CacheClient_PingServerMetadata.serviceDescriptor.fullName[...]
  }

  /// Determines, calls and returns the appropriate request handler, depending on the request's method.
  /// Returns nil for methods not handled by this service.
  public func handle(
    method name: Substring,
    context: CallHandlerContext
  ) -> GRPCServerHandlerProtocol? {
    switch name {
    case "Ping":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<CacheClient__PingRequest>(),
        responseSerializer: ProtobufSerializer<CacheClient__PingResponse>(),
        interceptors: self.interceptors?.makePingInterceptors() ?? [],
        userFunction: self.ping(request:context:)
      )

    default:
      return nil
    }
  }
}

/// To implement a server, implement an object which conforms to this protocol.
@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
public protocol CacheClient_PingAsyncProvider: CallHandlerProvider, Sendable {
  static var serviceDescriptor: GRPCServiceDescriptor { get }
  var interceptors: CacheClient_PingServerInterceptorFactoryProtocol? { get }

  func ping(
    request: CacheClient__PingRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> CacheClient__PingResponse
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension CacheClient_PingAsyncProvider {
  public static var serviceDescriptor: GRPCServiceDescriptor {
    return CacheClient_PingServerMetadata.serviceDescriptor
  }

  public var serviceName: Substring {
    return CacheClient_PingServerMetadata.serviceDescriptor.fullName[...]
  }

  public var interceptors: CacheClient_PingServerInterceptorFactoryProtocol? {
    return nil
  }

  public func handle(
    method name: Substring,
    context: CallHandlerContext
  ) -> GRPCServerHandlerProtocol? {
    switch name {
    case "Ping":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<CacheClient__PingRequest>(),
        responseSerializer: ProtobufSerializer<CacheClient__PingResponse>(),
        interceptors: self.interceptors?.makePingInterceptors() ?? [],
        wrapping: { try await self.ping(request: $0, context: $1) }
      )

    default:
      return nil
    }
  }
}

public protocol CacheClient_PingServerInterceptorFactoryProtocol: Sendable {

  /// - Returns: Interceptors to use when handling 'ping'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makePingInterceptors() -> [ServerInterceptor<CacheClient__PingRequest, CacheClient__PingResponse>]
}

public enum CacheClient_PingServerMetadata {
  public static let serviceDescriptor = GRPCServiceDescriptor(
    name: "Ping",
    fullName: "cache_client.Ping",
    methods: [
      CacheClient_PingServerMetadata.Methods.ping,
    ]
  )

  public enum Methods {
    public static let ping = GRPCMethodDescriptor(
      name: "Ping",
      path: "/cache_client.Ping/Ping",
      type: GRPCCallType.unary
    )
  }
}
