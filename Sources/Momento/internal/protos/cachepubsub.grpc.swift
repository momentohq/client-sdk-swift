//
// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the protocol buffer compiler.
// Source: cachepubsub.proto
//
import GRPC
import NIO
import NIOConcurrencyHelpers
import SwiftProtobuf


/// For working with topics in a cache.
/// Momento topics are conceptually located on a cache. They are best-effort multicast.
/// To use them, create a cache then start subscribing and publishing!
///
/// Momento topic subscriptions try to give you information about the quality of the
///   stream you are receiving. For example, you might miss messages if your network
///   is slow, or if some intermediate switch fails, or due to rate limiting. It is
///   also possible, though we try to avoid it, that messages could briefly come out
///   of order between subscribers.
///   We try to tell you when things like this happen via a Discontinuity in your
///   subscription stream. If you do not care about occasional discontinuities then
///   don't bother handling them! You might still want to log them just in case ;-)
///
/// Usage: instantiate `CacheClient_Pubsub_PubsubClient`, then call methods of this protocol to make API calls.
public protocol CacheClient_Pubsub_PubsubClientProtocol: GRPCClient {
  var serviceName: String { get }
  var interceptors: CacheClient_Pubsub_PubsubClientInterceptorFactoryProtocol? { get }

  func publish(
    _ request: CacheClient_Pubsub__PublishRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<CacheClient_Pubsub__PublishRequest, CacheClient_Pubsub__Empty>

  func subscribe(
    _ request: CacheClient_Pubsub__SubscriptionRequest,
    callOptions: CallOptions?,
    handler: @escaping (CacheClient_Pubsub__SubscriptionItem) -> Void
  ) -> ServerStreamingCall<CacheClient_Pubsub__SubscriptionRequest, CacheClient_Pubsub__SubscriptionItem>
}

extension CacheClient_Pubsub_PubsubClientProtocol {
  public var serviceName: String {
    return "cache_client.pubsub.Pubsub"
  }

  /// Publish a message to a topic.
  ///
  /// If a topic has no subscribers, then the effect of Publish MAY be either of:
  /// * It is dropped and the topic is nonexistent.
  /// * It is accepted to the topic as the next message.
  ///
  /// Publish() does not wait for subscribers to accept. It returns Ok upon accepting
  /// the topic value. It also returns Ok if there are no subscribers and the value
  /// happens to be dropped. Publish() can not guarantee delivery in theory but in
  /// practice it should almost always deliver to subscribers.
  ///
  /// REQUIRES HEADER authorization: Momento auth token
  ///
  /// - Parameters:
  ///   - request: Request to send to Publish.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func publish(
    _ request: CacheClient_Pubsub__PublishRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<CacheClient_Pubsub__PublishRequest, CacheClient_Pubsub__Empty> {
    return self.makeUnaryCall(
      path: CacheClient_Pubsub_PubsubClientMetadata.Methods.publish.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makePublishInterceptors() ?? []
    )
  }

  /// Subscribe to notifications from a topic.
  ///
  /// You will receive a stream of values and (hopefully occasional) discontinuities.
  /// Values will appear as copies of the payloads you Publish() to the topic.
  ///
  /// REQUIRES HEADER authorization: Momento auth token
  ///
  /// - Parameters:
  ///   - request: Request to send to Subscribe.
  ///   - callOptions: Call options.
  ///   - handler: A closure called when each response is received from the server.
  /// - Returns: A `ServerStreamingCall` with futures for the metadata and status.
  public func subscribe(
    _ request: CacheClient_Pubsub__SubscriptionRequest,
    callOptions: CallOptions? = nil,
    handler: @escaping (CacheClient_Pubsub__SubscriptionItem) -> Void
  ) -> ServerStreamingCall<CacheClient_Pubsub__SubscriptionRequest, CacheClient_Pubsub__SubscriptionItem> {
    return self.makeServerStreamingCall(
      path: CacheClient_Pubsub_PubsubClientMetadata.Methods.subscribe.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSubscribeInterceptors() ?? [],
      handler: handler
    )
  }
}

@available(*, deprecated)
extension CacheClient_Pubsub_PubsubClient: @unchecked Sendable {}

@available(*, deprecated, renamed: "CacheClient_Pubsub_PubsubNIOClient")
public final class CacheClient_Pubsub_PubsubClient: CacheClient_Pubsub_PubsubClientProtocol {
  private let lock = Lock()
  private var _defaultCallOptions: CallOptions
  private var _interceptors: CacheClient_Pubsub_PubsubClientInterceptorFactoryProtocol?
  public let channel: GRPCChannel
  public var defaultCallOptions: CallOptions {
    get { self.lock.withLock { return self._defaultCallOptions } }
    set { self.lock.withLockVoid { self._defaultCallOptions = newValue } }
  }
  public var interceptors: CacheClient_Pubsub_PubsubClientInterceptorFactoryProtocol? {
    get { self.lock.withLock { return self._interceptors } }
    set { self.lock.withLockVoid { self._interceptors = newValue } }
  }

  /// Creates a client for the cache_client.pubsub.Pubsub service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  public init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: CacheClient_Pubsub_PubsubClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self._defaultCallOptions = defaultCallOptions
    self._interceptors = interceptors
  }
}

public struct CacheClient_Pubsub_PubsubNIOClient: CacheClient_Pubsub_PubsubClientProtocol {
  public var channel: GRPCChannel
  public var defaultCallOptions: CallOptions
  public var interceptors: CacheClient_Pubsub_PubsubClientInterceptorFactoryProtocol?

  /// Creates a client for the cache_client.pubsub.Pubsub service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  public init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: CacheClient_Pubsub_PubsubClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

/// For working with topics in a cache.
/// Momento topics are conceptually located on a cache. They are best-effort multicast.
/// To use them, create a cache then start subscribing and publishing!
///
/// Momento topic subscriptions try to give you information about the quality of the
///   stream you are receiving. For example, you might miss messages if your network
///   is slow, or if some intermediate switch fails, or due to rate limiting. It is
///   also possible, though we try to avoid it, that messages could briefly come out
///   of order between subscribers.
///   We try to tell you when things like this happen via a Discontinuity in your
///   subscription stream. If you do not care about occasional discontinuities then
///   don't bother handling them! You might still want to log them just in case ;-)
@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
public protocol CacheClient_Pubsub_PubsubAsyncClientProtocol: GRPCClient {
  static var serviceDescriptor: GRPCServiceDescriptor { get }
  var interceptors: CacheClient_Pubsub_PubsubClientInterceptorFactoryProtocol? { get }

  func makePublishCall(
    _ request: CacheClient_Pubsub__PublishRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<CacheClient_Pubsub__PublishRequest, CacheClient_Pubsub__Empty>

  func makeSubscribeCall(
    _ request: CacheClient_Pubsub__SubscriptionRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncServerStreamingCall<CacheClient_Pubsub__SubscriptionRequest, CacheClient_Pubsub__SubscriptionItem>
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension CacheClient_Pubsub_PubsubAsyncClientProtocol {
  public static var serviceDescriptor: GRPCServiceDescriptor {
    return CacheClient_Pubsub_PubsubClientMetadata.serviceDescriptor
  }

  public var interceptors: CacheClient_Pubsub_PubsubClientInterceptorFactoryProtocol? {
    return nil
  }

  public func makePublishCall(
    _ request: CacheClient_Pubsub__PublishRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<CacheClient_Pubsub__PublishRequest, CacheClient_Pubsub__Empty> {
    return self.makeAsyncUnaryCall(
      path: CacheClient_Pubsub_PubsubClientMetadata.Methods.publish.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makePublishInterceptors() ?? []
    )
  }

  public func makeSubscribeCall(
    _ request: CacheClient_Pubsub__SubscriptionRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncServerStreamingCall<CacheClient_Pubsub__SubscriptionRequest, CacheClient_Pubsub__SubscriptionItem> {
    return self.makeAsyncServerStreamingCall(
      path: CacheClient_Pubsub_PubsubClientMetadata.Methods.subscribe.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSubscribeInterceptors() ?? []
    )
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension CacheClient_Pubsub_PubsubAsyncClientProtocol {
  public func publish(
    _ request: CacheClient_Pubsub__PublishRequest,
    callOptions: CallOptions? = nil
  ) async throws -> CacheClient_Pubsub__Empty {
    return try await self.performAsyncUnaryCall(
      path: CacheClient_Pubsub_PubsubClientMetadata.Methods.publish.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makePublishInterceptors() ?? []
    )
  }

  public func subscribe(
    _ request: CacheClient_Pubsub__SubscriptionRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncResponseStream<CacheClient_Pubsub__SubscriptionItem> {
    return self.performAsyncServerStreamingCall(
      path: CacheClient_Pubsub_PubsubClientMetadata.Methods.subscribe.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSubscribeInterceptors() ?? []
    )
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
public struct CacheClient_Pubsub_PubsubAsyncClient: CacheClient_Pubsub_PubsubAsyncClientProtocol {
  public var channel: GRPCChannel
  public var defaultCallOptions: CallOptions
  public var interceptors: CacheClient_Pubsub_PubsubClientInterceptorFactoryProtocol?

  public init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: CacheClient_Pubsub_PubsubClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

public protocol CacheClient_Pubsub_PubsubClientInterceptorFactoryProtocol: Sendable {

  /// - Returns: Interceptors to use when invoking 'publish'.
  func makePublishInterceptors() -> [ClientInterceptor<CacheClient_Pubsub__PublishRequest, CacheClient_Pubsub__Empty>]

  /// - Returns: Interceptors to use when invoking 'subscribe'.
  func makeSubscribeInterceptors() -> [ClientInterceptor<CacheClient_Pubsub__SubscriptionRequest, CacheClient_Pubsub__SubscriptionItem>]
}

public enum CacheClient_Pubsub_PubsubClientMetadata {
  public static let serviceDescriptor = GRPCServiceDescriptor(
    name: "Pubsub",
    fullName: "cache_client.pubsub.Pubsub",
    methods: [
      CacheClient_Pubsub_PubsubClientMetadata.Methods.publish,
      CacheClient_Pubsub_PubsubClientMetadata.Methods.subscribe,
    ]
  )

  public enum Methods {
    public static let publish = GRPCMethodDescriptor(
      name: "Publish",
      path: "/cache_client.pubsub.Pubsub/Publish",
      type: GRPCCallType.unary
    )

    public static let subscribe = GRPCMethodDescriptor(
      name: "Subscribe",
      path: "/cache_client.pubsub.Pubsub/Subscribe",
      type: GRPCCallType.serverStreaming
    )
  }
}

/// For working with topics in a cache.
/// Momento topics are conceptually located on a cache. They are best-effort multicast.
/// To use them, create a cache then start subscribing and publishing!
///
/// Momento topic subscriptions try to give you information about the quality of the
///   stream you are receiving. For example, you might miss messages if your network
///   is slow, or if some intermediate switch fails, or due to rate limiting. It is
///   also possible, though we try to avoid it, that messages could briefly come out
///   of order between subscribers.
///   We try to tell you when things like this happen via a Discontinuity in your
///   subscription stream. If you do not care about occasional discontinuities then
///   don't bother handling them! You might still want to log them just in case ;-)
///
/// To build a server, implement a class that conforms to this protocol.
public protocol CacheClient_Pubsub_PubsubProvider: CallHandlerProvider {
  var interceptors: CacheClient_Pubsub_PubsubServerInterceptorFactoryProtocol? { get }

  /// Publish a message to a topic.
  ///
  /// If a topic has no subscribers, then the effect of Publish MAY be either of:
  /// * It is dropped and the topic is nonexistent.
  /// * It is accepted to the topic as the next message.
  ///
  /// Publish() does not wait for subscribers to accept. It returns Ok upon accepting
  /// the topic value. It also returns Ok if there are no subscribers and the value
  /// happens to be dropped. Publish() can not guarantee delivery in theory but in
  /// practice it should almost always deliver to subscribers.
  ///
  /// REQUIRES HEADER authorization: Momento auth token
  func publish(request: CacheClient_Pubsub__PublishRequest, context: StatusOnlyCallContext) -> EventLoopFuture<CacheClient_Pubsub__Empty>

  /// Subscribe to notifications from a topic.
  ///
  /// You will receive a stream of values and (hopefully occasional) discontinuities.
  /// Values will appear as copies of the payloads you Publish() to the topic.
  ///
  /// REQUIRES HEADER authorization: Momento auth token
  func subscribe(request: CacheClient_Pubsub__SubscriptionRequest, context: StreamingResponseCallContext<CacheClient_Pubsub__SubscriptionItem>) -> EventLoopFuture<GRPCStatus>
}

extension CacheClient_Pubsub_PubsubProvider {
  public var serviceName: Substring {
    return CacheClient_Pubsub_PubsubServerMetadata.serviceDescriptor.fullName[...]
  }

  /// Determines, calls and returns the appropriate request handler, depending on the request's method.
  /// Returns nil for methods not handled by this service.
  public func handle(
    method name: Substring,
    context: CallHandlerContext
  ) -> GRPCServerHandlerProtocol? {
    switch name {
    case "Publish":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<CacheClient_Pubsub__PublishRequest>(),
        responseSerializer: ProtobufSerializer<CacheClient_Pubsub__Empty>(),
        interceptors: self.interceptors?.makePublishInterceptors() ?? [],
        userFunction: self.publish(request:context:)
      )

    case "Subscribe":
      return ServerStreamingServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<CacheClient_Pubsub__SubscriptionRequest>(),
        responseSerializer: ProtobufSerializer<CacheClient_Pubsub__SubscriptionItem>(),
        interceptors: self.interceptors?.makeSubscribeInterceptors() ?? [],
        userFunction: self.subscribe(request:context:)
      )

    default:
      return nil
    }
  }
}

/// For working with topics in a cache.
/// Momento topics are conceptually located on a cache. They are best-effort multicast.
/// To use them, create a cache then start subscribing and publishing!
///
/// Momento topic subscriptions try to give you information about the quality of the
///   stream you are receiving. For example, you might miss messages if your network
///   is slow, or if some intermediate switch fails, or due to rate limiting. It is
///   also possible, though we try to avoid it, that messages could briefly come out
///   of order between subscribers.
///   We try to tell you when things like this happen via a Discontinuity in your
///   subscription stream. If you do not care about occasional discontinuities then
///   don't bother handling them! You might still want to log them just in case ;-)
///
/// To implement a server, implement an object which conforms to this protocol.
@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
public protocol CacheClient_Pubsub_PubsubAsyncProvider: CallHandlerProvider, Sendable {
  static var serviceDescriptor: GRPCServiceDescriptor { get }
  var interceptors: CacheClient_Pubsub_PubsubServerInterceptorFactoryProtocol? { get }

  /// Publish a message to a topic.
  ///
  /// If a topic has no subscribers, then the effect of Publish MAY be either of:
  /// * It is dropped and the topic is nonexistent.
  /// * It is accepted to the topic as the next message.
  ///
  /// Publish() does not wait for subscribers to accept. It returns Ok upon accepting
  /// the topic value. It also returns Ok if there are no subscribers and the value
  /// happens to be dropped. Publish() can not guarantee delivery in theory but in
  /// practice it should almost always deliver to subscribers.
  ///
  /// REQUIRES HEADER authorization: Momento auth token
  func publish(
    request: CacheClient_Pubsub__PublishRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> CacheClient_Pubsub__Empty

  /// Subscribe to notifications from a topic.
  ///
  /// You will receive a stream of values and (hopefully occasional) discontinuities.
  /// Values will appear as copies of the payloads you Publish() to the topic.
  ///
  /// REQUIRES HEADER authorization: Momento auth token
  func subscribe(
    request: CacheClient_Pubsub__SubscriptionRequest,
    responseStream: GRPCAsyncResponseStreamWriter<CacheClient_Pubsub__SubscriptionItem>,
    context: GRPCAsyncServerCallContext
  ) async throws
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension CacheClient_Pubsub_PubsubAsyncProvider {
  public static var serviceDescriptor: GRPCServiceDescriptor {
    return CacheClient_Pubsub_PubsubServerMetadata.serviceDescriptor
  }

  public var serviceName: Substring {
    return CacheClient_Pubsub_PubsubServerMetadata.serviceDescriptor.fullName[...]
  }

  public var interceptors: CacheClient_Pubsub_PubsubServerInterceptorFactoryProtocol? {
    return nil
  }

  public func handle(
    method name: Substring,
    context: CallHandlerContext
  ) -> GRPCServerHandlerProtocol? {
    switch name {
    case "Publish":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<CacheClient_Pubsub__PublishRequest>(),
        responseSerializer: ProtobufSerializer<CacheClient_Pubsub__Empty>(),
        interceptors: self.interceptors?.makePublishInterceptors() ?? [],
        wrapping: { try await self.publish(request: $0, context: $1) }
      )

    case "Subscribe":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<CacheClient_Pubsub__SubscriptionRequest>(),
        responseSerializer: ProtobufSerializer<CacheClient_Pubsub__SubscriptionItem>(),
        interceptors: self.interceptors?.makeSubscribeInterceptors() ?? [],
        wrapping: { try await self.subscribe(request: $0, responseStream: $1, context: $2) }
      )

    default:
      return nil
    }
  }
}

public protocol CacheClient_Pubsub_PubsubServerInterceptorFactoryProtocol: Sendable {

  /// - Returns: Interceptors to use when handling 'publish'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makePublishInterceptors() -> [ServerInterceptor<CacheClient_Pubsub__PublishRequest, CacheClient_Pubsub__Empty>]

  /// - Returns: Interceptors to use when handling 'subscribe'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeSubscribeInterceptors() -> [ServerInterceptor<CacheClient_Pubsub__SubscriptionRequest, CacheClient_Pubsub__SubscriptionItem>]
}

public enum CacheClient_Pubsub_PubsubServerMetadata {
  public static let serviceDescriptor = GRPCServiceDescriptor(
    name: "Pubsub",
    fullName: "cache_client.pubsub.Pubsub",
    methods: [
      CacheClient_Pubsub_PubsubServerMetadata.Methods.publish,
      CacheClient_Pubsub_PubsubServerMetadata.Methods.subscribe,
    ]
  )

  public enum Methods {
    public static let publish = GRPCMethodDescriptor(
      name: "Publish",
      path: "/cache_client.pubsub.Pubsub/Publish",
      type: GRPCCallType.unary
    )

    public static let subscribe = GRPCMethodDescriptor(
      name: "Subscribe",
      path: "/cache_client.pubsub.Pubsub/Subscribe",
      type: GRPCCallType.serverStreaming
    )
  }
}
