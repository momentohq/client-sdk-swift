// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: leaderboard.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

public enum Leaderboard__Order: SwiftProtobuf.Enum {
  public typealias RawValue = Int

  /// Ascending order (0 is the lowest-scoring rank)
  case ascending // = 0

  /// Descending order (0 is the highest-scoring rank)
  case descending // = 1
  case UNRECOGNIZED(Int)

  public init() {
    self = .ascending
  }

  public init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .ascending
    case 1: self = .descending
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  public var rawValue: Int {
    switch self {
    case .ascending: return 0
    case .descending: return 1
    case .UNRECOGNIZED(let i): return i
    }
  }

}

#if swift(>=4.2)

extension Leaderboard__Order: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static let allCases: [Leaderboard__Order] = [
    .ascending,
    .descending,
  ]
}

#endif  // swift(>=4.2)

/// Leaderboards are made up of many of these.
public struct Leaderboard__Element {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// A player identifier, session identifier, browser identifier or whatever other kind of
  /// identifier you use for this scoreboard. The full unsigned 64 bit range is allowed here,
  /// between 0 and 2^63-1 inclusive.
  /// An id can only appear in a leaderboard one time. You can't have 2 scores for 1 player,
  /// unless that player has 2 ids!
  public var id: UInt32 = 0

  /// The value by which this element is sorted within the leaderboard.
  public var score: Double = 0

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

/// Query APIs returning RankedElement offer the familiar Element id and score tuple, but they
/// also include the rank per the individual API's ranking semantic.
public struct Leaderboard__RankedElement {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var id: UInt32 = 0

  public var rank: UInt32 = 0

  public var score: Double = 0

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

/// Query APIs using RankRange expect a limit of 8192 elements. Requesting a range wider than
/// that is expected to return an error.
///
/// RankRange models half-open ranges: 0..4 refers to elements 0, 1, 2 and 3.
///
/// Example permissible ranges:
/// * 0..8192
/// * 1..8193
/// * 123..8315
/// * 0..1
/// * 1..4
/// * 13..17
///
/// Example error ranges:
/// * 0..0
/// * 4..3
/// * 0..8193
public struct Leaderboard__RankRange {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var startInclusive: UInt32 = 0

  public var endExclusive: UInt32 = 0

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

/// Query APIs using ScoreRange may match more than the limit of 8192 elements. These apis will
/// include an offset and limit parameter pair, which can be used to page through score ranges
/// matching many elements.
///
/// ScoreRange models half-open ranges: 0..4 refers to scores 0, 1.1234, 2.5 and 3.999.
public struct Leaderboard__ScoreRange {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var min: Leaderboard__ScoreRange.OneOf_Min? = nil

  public var unboundedMin: Common__Unbounded {
    get {
      if case .unboundedMin(let v)? = min {return v}
      return Common__Unbounded()
    }
    set {min = .unboundedMin(newValue)}
  }

  /// IEEE 754 single precision 64 bit floating point number.
  /// Momento does not support NaN or Inf in leaderboards.
  public var minInclusive: Double {
    get {
      if case .minInclusive(let v)? = min {return v}
      return 0
    }
    set {min = .minInclusive(newValue)}
  }

  public var max: Leaderboard__ScoreRange.OneOf_Max? = nil

  public var unboundedMax: Common__Unbounded {
    get {
      if case .unboundedMax(let v)? = max {return v}
      return Common__Unbounded()
    }
    set {max = .unboundedMax(newValue)}
  }

  /// IEEE 754 single precision 64 bit floating point number.
  /// Momento does not support NaN or Inf in leaderboards.
  public var maxExclusive: Double {
    get {
      if case .maxExclusive(let v)? = max {return v}
      return 0
    }
    set {max = .maxExclusive(newValue)}
  }

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public enum OneOf_Min: Equatable {
    case unboundedMin(Common__Unbounded)
    /// IEEE 754 single precision 64 bit floating point number.
    /// Momento does not support NaN or Inf in leaderboards.
    case minInclusive(Double)

  #if !swift(>=4.1)
    public static func ==(lhs: Leaderboard__ScoreRange.OneOf_Min, rhs: Leaderboard__ScoreRange.OneOf_Min) -> Bool {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch (lhs, rhs) {
      case (.unboundedMin, .unboundedMin): return {
        guard case .unboundedMin(let l) = lhs, case .unboundedMin(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.minInclusive, .minInclusive): return {
        guard case .minInclusive(let l) = lhs, case .minInclusive(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      default: return false
      }
    }
  #endif
  }

  public enum OneOf_Max: Equatable {
    case unboundedMax(Common__Unbounded)
    /// IEEE 754 single precision 64 bit floating point number.
    /// Momento does not support NaN or Inf in leaderboards.
    case maxExclusive(Double)

  #if !swift(>=4.1)
    public static func ==(lhs: Leaderboard__ScoreRange.OneOf_Max, rhs: Leaderboard__ScoreRange.OneOf_Max) -> Bool {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch (lhs, rhs) {
      case (.unboundedMax, .unboundedMax): return {
        guard case .unboundedMax(let l) = lhs, case .unboundedMax(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.maxExclusive, .maxExclusive): return {
        guard case .maxExclusive(let l) = lhs, case .maxExclusive(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      default: return false
      }
    }
  #endif
  }

  public init() {}
}

public struct Leaderboard__DeleteLeaderboardRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var cacheName: String = String()

  public var leaderboard: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Leaderboard__GetLeaderboardLengthRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var cacheName: String = String()

  public var leaderboard: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Leaderboard__GetLeaderboardLengthResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var count: UInt32 = 0

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Leaderboard__UpsertElementsRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var cacheName: String = String()

  public var leaderboard: String = String()

  /// You can have up to 8192 elements in this list.
  public var elements: [Leaderboard__Element] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Leaderboard__GetByRankRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var cacheName: String = String()

  public var leaderboard: String = String()

  public var rankRange: Leaderboard__RankRange {
    get {return _rankRange ?? Leaderboard__RankRange()}
    set {_rankRange = newValue}
  }
  /// Returns true if `rankRange` has been explicitly set.
  public var hasRankRange: Bool {return self._rankRange != nil}
  /// Clears the value of `rankRange`. Subsequent reads from it will return its default value.
  public mutating func clearRankRange() {self._rankRange = nil}

  public var order: Leaderboard__Order = .ascending

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _rankRange: Leaderboard__RankRange? = nil
}

public struct Leaderboard__GetByRankResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var elements: [Leaderboard__RankedElement] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Leaderboard__GetRankRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var cacheName: String = String()

  public var leaderboard: String = String()

  public var ids: [UInt32] = []

  public var order: Leaderboard__Order = .ascending

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Leaderboard__GetRankResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var elements: [Leaderboard__RankedElement] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Leaderboard__RemoveElementsRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var cacheName: String = String()

  public var leaderboard: String = String()

  /// You can have up to 8192 ids in this list.
  public var ids: [UInt32] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Leaderboard__GetByScoreRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var cacheName: String = String()

  public var leaderboard: String = String()

  public var scoreRange: Leaderboard__ScoreRange {
    get {return _scoreRange ?? Leaderboard__ScoreRange()}
    set {_scoreRange = newValue}
  }
  /// Returns true if `scoreRange` has been explicitly set.
  public var hasScoreRange: Bool {return self._scoreRange != nil}
  /// Clears the value of `scoreRange`. Subsequent reads from it will return its default value.
  public mutating func clearScoreRange() {self._scoreRange = nil}

  /// Where should we start returning scores from in the elements within this range?
  public var offset: UInt32 = 0

  /// How many elements should we limit to returning? (8192 max)
  public var limitElements: UInt32 = 0

  public var order: Leaderboard__Order = .ascending

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _scoreRange: Leaderboard__ScoreRange? = nil
}

public struct Leaderboard__GetByScoreResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var elements: [Leaderboard__RankedElement] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

#if swift(>=5.5) && canImport(_Concurrency)
extension Leaderboard__Order: @unchecked Sendable {}
extension Leaderboard__Element: @unchecked Sendable {}
extension Leaderboard__RankedElement: @unchecked Sendable {}
extension Leaderboard__RankRange: @unchecked Sendable {}
extension Leaderboard__ScoreRange: @unchecked Sendable {}
extension Leaderboard__ScoreRange.OneOf_Min: @unchecked Sendable {}
extension Leaderboard__ScoreRange.OneOf_Max: @unchecked Sendable {}
extension Leaderboard__DeleteLeaderboardRequest: @unchecked Sendable {}
extension Leaderboard__GetLeaderboardLengthRequest: @unchecked Sendable {}
extension Leaderboard__GetLeaderboardLengthResponse: @unchecked Sendable {}
extension Leaderboard__UpsertElementsRequest: @unchecked Sendable {}
extension Leaderboard__GetByRankRequest: @unchecked Sendable {}
extension Leaderboard__GetByRankResponse: @unchecked Sendable {}
extension Leaderboard__GetRankRequest: @unchecked Sendable {}
extension Leaderboard__GetRankResponse: @unchecked Sendable {}
extension Leaderboard__RemoveElementsRequest: @unchecked Sendable {}
extension Leaderboard__GetByScoreRequest: @unchecked Sendable {}
extension Leaderboard__GetByScoreResponse: @unchecked Sendable {}
#endif  // swift(>=5.5) && canImport(_Concurrency)

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "leaderboard"

extension Leaderboard__Order: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "ASCENDING"),
    1: .same(proto: "DESCENDING"),
  ]
}

extension Leaderboard__Element: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + "._Element"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
    3: .same(proto: "score"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularUInt32Field(value: &self.id) }()
      case 3: try { try decoder.decodeSingularDoubleField(value: &self.score) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.id != 0 {
      try visitor.visitSingularUInt32Field(value: self.id, fieldNumber: 1)
    }
    if self.score != 0 {
      try visitor.visitSingularDoubleField(value: self.score, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Leaderboard__Element, rhs: Leaderboard__Element) -> Bool {
    if lhs.id != rhs.id {return false}
    if lhs.score != rhs.score {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Leaderboard__RankedElement: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + "._RankedElement"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
    3: .same(proto: "rank"),
    4: .same(proto: "score"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularUInt32Field(value: &self.id) }()
      case 3: try { try decoder.decodeSingularUInt32Field(value: &self.rank) }()
      case 4: try { try decoder.decodeSingularDoubleField(value: &self.score) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.id != 0 {
      try visitor.visitSingularUInt32Field(value: self.id, fieldNumber: 1)
    }
    if self.rank != 0 {
      try visitor.visitSingularUInt32Field(value: self.rank, fieldNumber: 3)
    }
    if self.score != 0 {
      try visitor.visitSingularDoubleField(value: self.score, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Leaderboard__RankedElement, rhs: Leaderboard__RankedElement) -> Bool {
    if lhs.id != rhs.id {return false}
    if lhs.rank != rhs.rank {return false}
    if lhs.score != rhs.score {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Leaderboard__RankRange: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + "._RankRange"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "start_inclusive"),
    2: .standard(proto: "end_exclusive"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularUInt32Field(value: &self.startInclusive) }()
      case 2: try { try decoder.decodeSingularUInt32Field(value: &self.endExclusive) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.startInclusive != 0 {
      try visitor.visitSingularUInt32Field(value: self.startInclusive, fieldNumber: 1)
    }
    if self.endExclusive != 0 {
      try visitor.visitSingularUInt32Field(value: self.endExclusive, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Leaderboard__RankRange, rhs: Leaderboard__RankRange) -> Bool {
    if lhs.startInclusive != rhs.startInclusive {return false}
    if lhs.endExclusive != rhs.endExclusive {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Leaderboard__ScoreRange: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + "._ScoreRange"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "unbounded_min"),
    5: .standard(proto: "min_inclusive"),
    3: .standard(proto: "unbounded_max"),
    6: .standard(proto: "max_exclusive"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try {
        var v: Common__Unbounded?
        var hadOneofValue = false
        if let current = self.min {
          hadOneofValue = true
          if case .unboundedMin(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.min = .unboundedMin(v)
        }
      }()
      case 3: try {
        var v: Common__Unbounded?
        var hadOneofValue = false
        if let current = self.max {
          hadOneofValue = true
          if case .unboundedMax(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.max = .unboundedMax(v)
        }
      }()
      case 5: try {
        var v: Double?
        try decoder.decodeSingularDoubleField(value: &v)
        if let v = v {
          if self.min != nil {try decoder.handleConflictingOneOf()}
          self.min = .minInclusive(v)
        }
      }()
      case 6: try {
        var v: Double?
        try decoder.decodeSingularDoubleField(value: &v)
        if let v = v {
          if self.max != nil {try decoder.handleConflictingOneOf()}
          self.max = .maxExclusive(v)
        }
      }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if case .unboundedMin(let v)? = self.min {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    try { if case .unboundedMax(let v)? = self.max {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    } }()
    try { if case .minInclusive(let v)? = self.min {
      try visitor.visitSingularDoubleField(value: v, fieldNumber: 5)
    } }()
    try { if case .maxExclusive(let v)? = self.max {
      try visitor.visitSingularDoubleField(value: v, fieldNumber: 6)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Leaderboard__ScoreRange, rhs: Leaderboard__ScoreRange) -> Bool {
    if lhs.min != rhs.min {return false}
    if lhs.max != rhs.max {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Leaderboard__DeleteLeaderboardRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + "._DeleteLeaderboardRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "cache_name"),
    2: .same(proto: "leaderboard"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.cacheName) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.leaderboard) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.cacheName.isEmpty {
      try visitor.visitSingularStringField(value: self.cacheName, fieldNumber: 1)
    }
    if !self.leaderboard.isEmpty {
      try visitor.visitSingularStringField(value: self.leaderboard, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Leaderboard__DeleteLeaderboardRequest, rhs: Leaderboard__DeleteLeaderboardRequest) -> Bool {
    if lhs.cacheName != rhs.cacheName {return false}
    if lhs.leaderboard != rhs.leaderboard {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Leaderboard__GetLeaderboardLengthRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + "._GetLeaderboardLengthRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "cache_name"),
    2: .same(proto: "leaderboard"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.cacheName) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.leaderboard) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.cacheName.isEmpty {
      try visitor.visitSingularStringField(value: self.cacheName, fieldNumber: 1)
    }
    if !self.leaderboard.isEmpty {
      try visitor.visitSingularStringField(value: self.leaderboard, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Leaderboard__GetLeaderboardLengthRequest, rhs: Leaderboard__GetLeaderboardLengthRequest) -> Bool {
    if lhs.cacheName != rhs.cacheName {return false}
    if lhs.leaderboard != rhs.leaderboard {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Leaderboard__GetLeaderboardLengthResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + "._GetLeaderboardLengthResponse"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "count"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularUInt32Field(value: &self.count) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.count != 0 {
      try visitor.visitSingularUInt32Field(value: self.count, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Leaderboard__GetLeaderboardLengthResponse, rhs: Leaderboard__GetLeaderboardLengthResponse) -> Bool {
    if lhs.count != rhs.count {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Leaderboard__UpsertElementsRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + "._UpsertElementsRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "cache_name"),
    2: .same(proto: "leaderboard"),
    3: .same(proto: "elements"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.cacheName) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.leaderboard) }()
      case 3: try { try decoder.decodeRepeatedMessageField(value: &self.elements) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.cacheName.isEmpty {
      try visitor.visitSingularStringField(value: self.cacheName, fieldNumber: 1)
    }
    if !self.leaderboard.isEmpty {
      try visitor.visitSingularStringField(value: self.leaderboard, fieldNumber: 2)
    }
    if !self.elements.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.elements, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Leaderboard__UpsertElementsRequest, rhs: Leaderboard__UpsertElementsRequest) -> Bool {
    if lhs.cacheName != rhs.cacheName {return false}
    if lhs.leaderboard != rhs.leaderboard {return false}
    if lhs.elements != rhs.elements {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Leaderboard__GetByRankRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + "._GetByRankRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "cache_name"),
    2: .same(proto: "leaderboard"),
    3: .standard(proto: "rank_range"),
    4: .same(proto: "order"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.cacheName) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.leaderboard) }()
      case 3: try { try decoder.decodeSingularMessageField(value: &self._rankRange) }()
      case 4: try { try decoder.decodeSingularEnumField(value: &self.order) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if !self.cacheName.isEmpty {
      try visitor.visitSingularStringField(value: self.cacheName, fieldNumber: 1)
    }
    if !self.leaderboard.isEmpty {
      try visitor.visitSingularStringField(value: self.leaderboard, fieldNumber: 2)
    }
    try { if let v = self._rankRange {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    } }()
    if self.order != .ascending {
      try visitor.visitSingularEnumField(value: self.order, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Leaderboard__GetByRankRequest, rhs: Leaderboard__GetByRankRequest) -> Bool {
    if lhs.cacheName != rhs.cacheName {return false}
    if lhs.leaderboard != rhs.leaderboard {return false}
    if lhs._rankRange != rhs._rankRange {return false}
    if lhs.order != rhs.order {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Leaderboard__GetByRankResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + "._GetByRankResponse"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "elements"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeRepeatedMessageField(value: &self.elements) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.elements.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.elements, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Leaderboard__GetByRankResponse, rhs: Leaderboard__GetByRankResponse) -> Bool {
    if lhs.elements != rhs.elements {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Leaderboard__GetRankRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + "._GetRankRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "cache_name"),
    2: .same(proto: "leaderboard"),
    3: .same(proto: "ids"),
    4: .same(proto: "order"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.cacheName) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.leaderboard) }()
      case 3: try { try decoder.decodeRepeatedUInt32Field(value: &self.ids) }()
      case 4: try { try decoder.decodeSingularEnumField(value: &self.order) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.cacheName.isEmpty {
      try visitor.visitSingularStringField(value: self.cacheName, fieldNumber: 1)
    }
    if !self.leaderboard.isEmpty {
      try visitor.visitSingularStringField(value: self.leaderboard, fieldNumber: 2)
    }
    if !self.ids.isEmpty {
      try visitor.visitPackedUInt32Field(value: self.ids, fieldNumber: 3)
    }
    if self.order != .ascending {
      try visitor.visitSingularEnumField(value: self.order, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Leaderboard__GetRankRequest, rhs: Leaderboard__GetRankRequest) -> Bool {
    if lhs.cacheName != rhs.cacheName {return false}
    if lhs.leaderboard != rhs.leaderboard {return false}
    if lhs.ids != rhs.ids {return false}
    if lhs.order != rhs.order {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Leaderboard__GetRankResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + "._GetRankResponse"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "elements"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeRepeatedMessageField(value: &self.elements) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.elements.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.elements, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Leaderboard__GetRankResponse, rhs: Leaderboard__GetRankResponse) -> Bool {
    if lhs.elements != rhs.elements {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Leaderboard__RemoveElementsRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + "._RemoveElementsRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "cache_name"),
    2: .same(proto: "leaderboard"),
    3: .same(proto: "ids"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.cacheName) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.leaderboard) }()
      case 3: try { try decoder.decodeRepeatedUInt32Field(value: &self.ids) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.cacheName.isEmpty {
      try visitor.visitSingularStringField(value: self.cacheName, fieldNumber: 1)
    }
    if !self.leaderboard.isEmpty {
      try visitor.visitSingularStringField(value: self.leaderboard, fieldNumber: 2)
    }
    if !self.ids.isEmpty {
      try visitor.visitPackedUInt32Field(value: self.ids, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Leaderboard__RemoveElementsRequest, rhs: Leaderboard__RemoveElementsRequest) -> Bool {
    if lhs.cacheName != rhs.cacheName {return false}
    if lhs.leaderboard != rhs.leaderboard {return false}
    if lhs.ids != rhs.ids {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Leaderboard__GetByScoreRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + "._GetByScoreRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "cache_name"),
    2: .same(proto: "leaderboard"),
    3: .standard(proto: "score_range"),
    4: .same(proto: "offset"),
    5: .standard(proto: "limit_elements"),
    6: .same(proto: "order"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.cacheName) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.leaderboard) }()
      case 3: try { try decoder.decodeSingularMessageField(value: &self._scoreRange) }()
      case 4: try { try decoder.decodeSingularUInt32Field(value: &self.offset) }()
      case 5: try { try decoder.decodeSingularUInt32Field(value: &self.limitElements) }()
      case 6: try { try decoder.decodeSingularEnumField(value: &self.order) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if !self.cacheName.isEmpty {
      try visitor.visitSingularStringField(value: self.cacheName, fieldNumber: 1)
    }
    if !self.leaderboard.isEmpty {
      try visitor.visitSingularStringField(value: self.leaderboard, fieldNumber: 2)
    }
    try { if let v = self._scoreRange {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    } }()
    if self.offset != 0 {
      try visitor.visitSingularUInt32Field(value: self.offset, fieldNumber: 4)
    }
    if self.limitElements != 0 {
      try visitor.visitSingularUInt32Field(value: self.limitElements, fieldNumber: 5)
    }
    if self.order != .ascending {
      try visitor.visitSingularEnumField(value: self.order, fieldNumber: 6)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Leaderboard__GetByScoreRequest, rhs: Leaderboard__GetByScoreRequest) -> Bool {
    if lhs.cacheName != rhs.cacheName {return false}
    if lhs.leaderboard != rhs.leaderboard {return false}
    if lhs._scoreRange != rhs._scoreRange {return false}
    if lhs.offset != rhs.offset {return false}
    if lhs.limitElements != rhs.limitElements {return false}
    if lhs.order != rhs.order {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Leaderboard__GetByScoreResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + "._GetByScoreResponse"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "elements"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeRepeatedMessageField(value: &self.elements) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.elements.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.elements, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Leaderboard__GetByScoreResponse, rhs: Leaderboard__GetByScoreResponse) -> Bool {
    if lhs.elements != rhs.elements {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
