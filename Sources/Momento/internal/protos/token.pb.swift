// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: token.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

public struct Token__GenerateDisposableTokenRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var expires: Token__GenerateDisposableTokenRequest.Expires {
    get {return _expires ?? Token__GenerateDisposableTokenRequest.Expires()}
    set {_expires = newValue}
  }
  /// Returns true if `expires` has been explicitly set.
  public var hasExpires: Bool {return self._expires != nil}
  /// Clears the value of `expires`. Subsequent reads from it will return its default value.
  public mutating func clearExpires() {self._expires = nil}

  public var authToken: String = String()

  public var permissions: PermissionMessages_Permissions {
    get {return _permissions ?? PermissionMessages_Permissions()}
    set {_permissions = newValue}
  }
  /// Returns true if `permissions` has been explicitly set.
  public var hasPermissions: Bool {return self._permissions != nil}
  /// Clears the value of `permissions`. Subsequent reads from it will return its default value.
  public mutating func clearPermissions() {self._permissions = nil}

  public var tokenID: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  /// generate a token that has an expiry
  public struct Expires {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    /// how many seconds do you want the api token to be valid for?
    public var validForSeconds: UInt32 = 0

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public init() {}
  }

  public init() {}

  fileprivate var _expires: Token__GenerateDisposableTokenRequest.Expires? = nil
  fileprivate var _permissions: PermissionMessages_Permissions? = nil
}

public struct Token__GenerateDisposableTokenResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// the new api key used for authentication against Momento backend
  public var apiKey: String = String()

  /// the Momento endpoint that this token is allowed to make requests against
  public var endpoint: String = String()

  /// epoch seconds when the api token expires
  public var validUntil: UInt64 = 0

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

#if swift(>=5.5) && canImport(_Concurrency)
extension Token__GenerateDisposableTokenRequest: @unchecked Sendable {}
extension Token__GenerateDisposableTokenRequest.Expires: @unchecked Sendable {}
extension Token__GenerateDisposableTokenResponse: @unchecked Sendable {}
#endif  // swift(>=5.5) && canImport(_Concurrency)

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "token"

extension Token__GenerateDisposableTokenRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + "._GenerateDisposableTokenRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "expires"),
    2: .standard(proto: "auth_token"),
    3: .same(proto: "permissions"),
    4: .standard(proto: "token_id"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._expires) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.authToken) }()
      case 3: try { try decoder.decodeSingularMessageField(value: &self._permissions) }()
      case 4: try { try decoder.decodeSingularStringField(value: &self.tokenID) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._expires {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    if !self.authToken.isEmpty {
      try visitor.visitSingularStringField(value: self.authToken, fieldNumber: 2)
    }
    try { if let v = self._permissions {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    } }()
    if !self.tokenID.isEmpty {
      try visitor.visitSingularStringField(value: self.tokenID, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Token__GenerateDisposableTokenRequest, rhs: Token__GenerateDisposableTokenRequest) -> Bool {
    if lhs._expires != rhs._expires {return false}
    if lhs.authToken != rhs.authToken {return false}
    if lhs._permissions != rhs._permissions {return false}
    if lhs.tokenID != rhs.tokenID {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Token__GenerateDisposableTokenRequest.Expires: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Token__GenerateDisposableTokenRequest.protoMessageName + ".Expires"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "valid_for_seconds"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularUInt32Field(value: &self.validForSeconds) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.validForSeconds != 0 {
      try visitor.visitSingularUInt32Field(value: self.validForSeconds, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Token__GenerateDisposableTokenRequest.Expires, rhs: Token__GenerateDisposableTokenRequest.Expires) -> Bool {
    if lhs.validForSeconds != rhs.validForSeconds {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Token__GenerateDisposableTokenResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + "._GenerateDisposableTokenResponse"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "api_key"),
    2: .same(proto: "endpoint"),
    3: .standard(proto: "valid_until"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.apiKey) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.endpoint) }()
      case 3: try { try decoder.decodeSingularUInt64Field(value: &self.validUntil) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.apiKey.isEmpty {
      try visitor.visitSingularStringField(value: self.apiKey, fieldNumber: 1)
    }
    if !self.endpoint.isEmpty {
      try visitor.visitSingularStringField(value: self.endpoint, fieldNumber: 2)
    }
    if self.validUntil != 0 {
      try visitor.visitSingularUInt64Field(value: self.validUntil, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Token__GenerateDisposableTokenResponse, rhs: Token__GenerateDisposableTokenResponse) -> Bool {
    if lhs.apiKey != rhs.apiKey {return false}
    if lhs.endpoint != rhs.endpoint {return false}
    if lhs.validUntil != rhs.validUntil {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
