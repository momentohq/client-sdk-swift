//
// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the protocol buffer compiler.
// Source: leaderboard.proto
//
import GRPC
import NIO
import NIOConcurrencyHelpers
import SwiftProtobuf


/// Like a sorted set, but for leaderboards!
///
/// Elements in a leaderboard are keyed by an ID, which is an unsigned 64 bit integer.
/// Scores are single-precision floating point numbers.
///
/// Each ID can have only 1 score.
///
/// For batchy, multi-element apis, limits are 8192 elements per api call.
///
/// Scores are IEEE 754 single-precision floating point numbers. This has a few
/// implications you should be aware of, but the one most likely to affect you is that
/// below -16777216 and above 16777216, not all integers are able to be represented.
///
/// Usage: instantiate `Leaderboard_LeaderboardClient`, then call methods of this protocol to make API calls.
public protocol Leaderboard_LeaderboardClientProtocol: GRPCClient {
  var serviceName: String { get }
  var interceptors: Leaderboard_LeaderboardClientInterceptorFactoryProtocol? { get }

  func deleteLeaderboard(
    _ request: Leaderboard__DeleteLeaderboardRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Leaderboard__DeleteLeaderboardRequest, Common__Empty>

  func upsertElements(
    _ request: Leaderboard__UpsertElementsRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Leaderboard__UpsertElementsRequest, Common__Empty>

  func removeElements(
    _ request: Leaderboard__RemoveElementsRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Leaderboard__RemoveElementsRequest, Common__Empty>

  func getLeaderboardLength(
    _ request: Leaderboard__GetLeaderboardLengthRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Leaderboard__GetLeaderboardLengthRequest, Leaderboard__GetLeaderboardLengthResponse>

  func getByRank(
    _ request: Leaderboard__GetByRankRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Leaderboard__GetByRankRequest, Leaderboard__GetByRankResponse>

  func getRank(
    _ request: Leaderboard__GetRankRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Leaderboard__GetRankRequest, Leaderboard__GetRankResponse>

  func getByScore(
    _ request: Leaderboard__GetByScoreRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Leaderboard__GetByScoreRequest, Leaderboard__GetByScoreResponse>
}

extension Leaderboard_LeaderboardClientProtocol {
  public var serviceName: String {
    return "leaderboard.Leaderboard"
  }

  /// Deletes a leaderboard. After this call, you're not incurring storage cost for this leaderboard anymore.
  ///
  /// - Parameters:
  ///   - request: Request to send to DeleteLeaderboard.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func deleteLeaderboard(
    _ request: Leaderboard__DeleteLeaderboardRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Leaderboard__DeleteLeaderboardRequest, Common__Empty> {
    return self.makeUnaryCall(
      path: Leaderboard_LeaderboardClientMetadata.Methods.deleteLeaderboard.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeDeleteLeaderboardInterceptors() ?? []
    )
  }

  /// Insert or update elements in a leaderboard. You can do up to 8192 elements per call.
  /// There is no partial failure: Upsert succeeds or fails.
  ///
  /// - Parameters:
  ///   - request: Request to send to UpsertElements.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func upsertElements(
    _ request: Leaderboard__UpsertElementsRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Leaderboard__UpsertElementsRequest, Common__Empty> {
    return self.makeUnaryCall(
      path: Leaderboard_LeaderboardClientMetadata.Methods.upsertElements.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeUpsertElementsInterceptors() ?? []
    )
  }

  /// Remove up to 8192 elements at a time from a leaderboard. Elements are removed by id.
  ///
  /// - Parameters:
  ///   - request: Request to send to RemoveElements.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func removeElements(
    _ request: Leaderboard__RemoveElementsRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Leaderboard__RemoveElementsRequest, Common__Empty> {
    return self.makeUnaryCall(
      path: Leaderboard_LeaderboardClientMetadata.Methods.removeElements.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeRemoveElementsInterceptors() ?? []
    )
  }

  /// Returns the length of a leaderboard in terms of ID count.
  ///
  /// - Parameters:
  ///   - request: Request to send to GetLeaderboardLength.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func getLeaderboardLength(
    _ request: Leaderboard__GetLeaderboardLengthRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Leaderboard__GetLeaderboardLengthRequest, Leaderboard__GetLeaderboardLengthResponse> {
    return self.makeUnaryCall(
      path: Leaderboard_LeaderboardClientMetadata.Methods.getLeaderboardLength.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetLeaderboardLengthInterceptors() ?? []
    )
  }

  /// Get a range of elements.
  /// * Ordinal, 0-based rank.
  /// * Range can span up to 8192 elements.
  /// See RankRange for details about permissible ranges.
  ///
  /// - Parameters:
  ///   - request: Request to send to GetByRank.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func getByRank(
    _ request: Leaderboard__GetByRankRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Leaderboard__GetByRankRequest, Leaderboard__GetByRankResponse> {
    return self.makeUnaryCall(
      path: Leaderboard_LeaderboardClientMetadata.Methods.getByRank.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetByRankInterceptors() ?? []
    )
  }

  /// Get the rank of a list of particular ids in the leaderboard.
  /// * Ordinal, 0-based rank.
  ///
  /// - Parameters:
  ///   - request: Request to send to GetRank.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func getRank(
    _ request: Leaderboard__GetRankRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Leaderboard__GetRankRequest, Leaderboard__GetRankResponse> {
    return self.makeUnaryCall(
      path: Leaderboard_LeaderboardClientMetadata.Methods.getRank.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetRankInterceptors() ?? []
    )
  }

  /// Get a range of elements by a score range.
  /// * Ordinal, 0-based rank.
  ///
  /// You can request up to 8192 elements at a time. To page through many elements that all
  /// fall into a score range you can repeatedly invoke this api with the offset parameter.
  ///
  /// - Parameters:
  ///   - request: Request to send to GetByScore.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func getByScore(
    _ request: Leaderboard__GetByScoreRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Leaderboard__GetByScoreRequest, Leaderboard__GetByScoreResponse> {
    return self.makeUnaryCall(
      path: Leaderboard_LeaderboardClientMetadata.Methods.getByScore.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetByScoreInterceptors() ?? []
    )
  }
}

@available(*, deprecated)
extension Leaderboard_LeaderboardClient: @unchecked Sendable {}

@available(*, deprecated, renamed: "Leaderboard_LeaderboardNIOClient")
public final class Leaderboard_LeaderboardClient: Leaderboard_LeaderboardClientProtocol {
  private let lock = Lock()
  private var _defaultCallOptions: CallOptions
  private var _interceptors: Leaderboard_LeaderboardClientInterceptorFactoryProtocol?
  public let channel: GRPCChannel
  public var defaultCallOptions: CallOptions {
    get { self.lock.withLock { return self._defaultCallOptions } }
    set { self.lock.withLockVoid { self._defaultCallOptions = newValue } }
  }
  public var interceptors: Leaderboard_LeaderboardClientInterceptorFactoryProtocol? {
    get { self.lock.withLock { return self._interceptors } }
    set { self.lock.withLockVoid { self._interceptors = newValue } }
  }

  /// Creates a client for the leaderboard.Leaderboard service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  public init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Leaderboard_LeaderboardClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self._defaultCallOptions = defaultCallOptions
    self._interceptors = interceptors
  }
}

public struct Leaderboard_LeaderboardNIOClient: Leaderboard_LeaderboardClientProtocol {
  public var channel: GRPCChannel
  public var defaultCallOptions: CallOptions
  public var interceptors: Leaderboard_LeaderboardClientInterceptorFactoryProtocol?

  /// Creates a client for the leaderboard.Leaderboard service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  public init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Leaderboard_LeaderboardClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

/// Like a sorted set, but for leaderboards!
///
/// Elements in a leaderboard are keyed by an ID, which is an unsigned 64 bit integer.
/// Scores are single-precision floating point numbers.
///
/// Each ID can have only 1 score.
///
/// For batchy, multi-element apis, limits are 8192 elements per api call.
///
/// Scores are IEEE 754 single-precision floating point numbers. This has a few
/// implications you should be aware of, but the one most likely to affect you is that
/// below -16777216 and above 16777216, not all integers are able to be represented.
@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
public protocol Leaderboard_LeaderboardAsyncClientProtocol: GRPCClient {
  static var serviceDescriptor: GRPCServiceDescriptor { get }
  var interceptors: Leaderboard_LeaderboardClientInterceptorFactoryProtocol? { get }

  func makeDeleteLeaderboardCall(
    _ request: Leaderboard__DeleteLeaderboardRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Leaderboard__DeleteLeaderboardRequest, Common__Empty>

  func makeUpsertElementsCall(
    _ request: Leaderboard__UpsertElementsRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Leaderboard__UpsertElementsRequest, Common__Empty>

  func makeRemoveElementsCall(
    _ request: Leaderboard__RemoveElementsRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Leaderboard__RemoveElementsRequest, Common__Empty>

  func makeGetLeaderboardLengthCall(
    _ request: Leaderboard__GetLeaderboardLengthRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Leaderboard__GetLeaderboardLengthRequest, Leaderboard__GetLeaderboardLengthResponse>

  func makeGetByRankCall(
    _ request: Leaderboard__GetByRankRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Leaderboard__GetByRankRequest, Leaderboard__GetByRankResponse>

  func makeGetRankCall(
    _ request: Leaderboard__GetRankRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Leaderboard__GetRankRequest, Leaderboard__GetRankResponse>

  func makeGetByScoreCall(
    _ request: Leaderboard__GetByScoreRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Leaderboard__GetByScoreRequest, Leaderboard__GetByScoreResponse>
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Leaderboard_LeaderboardAsyncClientProtocol {
  public static var serviceDescriptor: GRPCServiceDescriptor {
    return Leaderboard_LeaderboardClientMetadata.serviceDescriptor
  }

  public var interceptors: Leaderboard_LeaderboardClientInterceptorFactoryProtocol? {
    return nil
  }

  public func makeDeleteLeaderboardCall(
    _ request: Leaderboard__DeleteLeaderboardRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Leaderboard__DeleteLeaderboardRequest, Common__Empty> {
    return self.makeAsyncUnaryCall(
      path: Leaderboard_LeaderboardClientMetadata.Methods.deleteLeaderboard.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeDeleteLeaderboardInterceptors() ?? []
    )
  }

  public func makeUpsertElementsCall(
    _ request: Leaderboard__UpsertElementsRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Leaderboard__UpsertElementsRequest, Common__Empty> {
    return self.makeAsyncUnaryCall(
      path: Leaderboard_LeaderboardClientMetadata.Methods.upsertElements.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeUpsertElementsInterceptors() ?? []
    )
  }

  public func makeRemoveElementsCall(
    _ request: Leaderboard__RemoveElementsRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Leaderboard__RemoveElementsRequest, Common__Empty> {
    return self.makeAsyncUnaryCall(
      path: Leaderboard_LeaderboardClientMetadata.Methods.removeElements.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeRemoveElementsInterceptors() ?? []
    )
  }

  public func makeGetLeaderboardLengthCall(
    _ request: Leaderboard__GetLeaderboardLengthRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Leaderboard__GetLeaderboardLengthRequest, Leaderboard__GetLeaderboardLengthResponse> {
    return self.makeAsyncUnaryCall(
      path: Leaderboard_LeaderboardClientMetadata.Methods.getLeaderboardLength.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetLeaderboardLengthInterceptors() ?? []
    )
  }

  public func makeGetByRankCall(
    _ request: Leaderboard__GetByRankRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Leaderboard__GetByRankRequest, Leaderboard__GetByRankResponse> {
    return self.makeAsyncUnaryCall(
      path: Leaderboard_LeaderboardClientMetadata.Methods.getByRank.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetByRankInterceptors() ?? []
    )
  }

  public func makeGetRankCall(
    _ request: Leaderboard__GetRankRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Leaderboard__GetRankRequest, Leaderboard__GetRankResponse> {
    return self.makeAsyncUnaryCall(
      path: Leaderboard_LeaderboardClientMetadata.Methods.getRank.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetRankInterceptors() ?? []
    )
  }

  public func makeGetByScoreCall(
    _ request: Leaderboard__GetByScoreRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Leaderboard__GetByScoreRequest, Leaderboard__GetByScoreResponse> {
    return self.makeAsyncUnaryCall(
      path: Leaderboard_LeaderboardClientMetadata.Methods.getByScore.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetByScoreInterceptors() ?? []
    )
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Leaderboard_LeaderboardAsyncClientProtocol {
  public func deleteLeaderboard(
    _ request: Leaderboard__DeleteLeaderboardRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Common__Empty {
    return try await self.performAsyncUnaryCall(
      path: Leaderboard_LeaderboardClientMetadata.Methods.deleteLeaderboard.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeDeleteLeaderboardInterceptors() ?? []
    )
  }

  public func upsertElements(
    _ request: Leaderboard__UpsertElementsRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Common__Empty {
    return try await self.performAsyncUnaryCall(
      path: Leaderboard_LeaderboardClientMetadata.Methods.upsertElements.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeUpsertElementsInterceptors() ?? []
    )
  }

  public func removeElements(
    _ request: Leaderboard__RemoveElementsRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Common__Empty {
    return try await self.performAsyncUnaryCall(
      path: Leaderboard_LeaderboardClientMetadata.Methods.removeElements.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeRemoveElementsInterceptors() ?? []
    )
  }

  public func getLeaderboardLength(
    _ request: Leaderboard__GetLeaderboardLengthRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Leaderboard__GetLeaderboardLengthResponse {
    return try await self.performAsyncUnaryCall(
      path: Leaderboard_LeaderboardClientMetadata.Methods.getLeaderboardLength.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetLeaderboardLengthInterceptors() ?? []
    )
  }

  public func getByRank(
    _ request: Leaderboard__GetByRankRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Leaderboard__GetByRankResponse {
    return try await self.performAsyncUnaryCall(
      path: Leaderboard_LeaderboardClientMetadata.Methods.getByRank.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetByRankInterceptors() ?? []
    )
  }

  public func getRank(
    _ request: Leaderboard__GetRankRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Leaderboard__GetRankResponse {
    return try await self.performAsyncUnaryCall(
      path: Leaderboard_LeaderboardClientMetadata.Methods.getRank.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetRankInterceptors() ?? []
    )
  }

  public func getByScore(
    _ request: Leaderboard__GetByScoreRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Leaderboard__GetByScoreResponse {
    return try await self.performAsyncUnaryCall(
      path: Leaderboard_LeaderboardClientMetadata.Methods.getByScore.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetByScoreInterceptors() ?? []
    )
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
public struct Leaderboard_LeaderboardAsyncClient: Leaderboard_LeaderboardAsyncClientProtocol {
  public var channel: GRPCChannel
  public var defaultCallOptions: CallOptions
  public var interceptors: Leaderboard_LeaderboardClientInterceptorFactoryProtocol?

  public init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Leaderboard_LeaderboardClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

public protocol Leaderboard_LeaderboardClientInterceptorFactoryProtocol: Sendable {

  /// - Returns: Interceptors to use when invoking 'deleteLeaderboard'.
  func makeDeleteLeaderboardInterceptors() -> [ClientInterceptor<Leaderboard__DeleteLeaderboardRequest, Common__Empty>]

  /// - Returns: Interceptors to use when invoking 'upsertElements'.
  func makeUpsertElementsInterceptors() -> [ClientInterceptor<Leaderboard__UpsertElementsRequest, Common__Empty>]

  /// - Returns: Interceptors to use when invoking 'removeElements'.
  func makeRemoveElementsInterceptors() -> [ClientInterceptor<Leaderboard__RemoveElementsRequest, Common__Empty>]

  /// - Returns: Interceptors to use when invoking 'getLeaderboardLength'.
  func makeGetLeaderboardLengthInterceptors() -> [ClientInterceptor<Leaderboard__GetLeaderboardLengthRequest, Leaderboard__GetLeaderboardLengthResponse>]

  /// - Returns: Interceptors to use when invoking 'getByRank'.
  func makeGetByRankInterceptors() -> [ClientInterceptor<Leaderboard__GetByRankRequest, Leaderboard__GetByRankResponse>]

  /// - Returns: Interceptors to use when invoking 'getRank'.
  func makeGetRankInterceptors() -> [ClientInterceptor<Leaderboard__GetRankRequest, Leaderboard__GetRankResponse>]

  /// - Returns: Interceptors to use when invoking 'getByScore'.
  func makeGetByScoreInterceptors() -> [ClientInterceptor<Leaderboard__GetByScoreRequest, Leaderboard__GetByScoreResponse>]
}

public enum Leaderboard_LeaderboardClientMetadata {
  public static let serviceDescriptor = GRPCServiceDescriptor(
    name: "Leaderboard",
    fullName: "leaderboard.Leaderboard",
    methods: [
      Leaderboard_LeaderboardClientMetadata.Methods.deleteLeaderboard,
      Leaderboard_LeaderboardClientMetadata.Methods.upsertElements,
      Leaderboard_LeaderboardClientMetadata.Methods.removeElements,
      Leaderboard_LeaderboardClientMetadata.Methods.getLeaderboardLength,
      Leaderboard_LeaderboardClientMetadata.Methods.getByRank,
      Leaderboard_LeaderboardClientMetadata.Methods.getRank,
      Leaderboard_LeaderboardClientMetadata.Methods.getByScore,
    ]
  )

  public enum Methods {
    public static let deleteLeaderboard = GRPCMethodDescriptor(
      name: "DeleteLeaderboard",
      path: "/leaderboard.Leaderboard/DeleteLeaderboard",
      type: GRPCCallType.unary
    )

    public static let upsertElements = GRPCMethodDescriptor(
      name: "UpsertElements",
      path: "/leaderboard.Leaderboard/UpsertElements",
      type: GRPCCallType.unary
    )

    public static let removeElements = GRPCMethodDescriptor(
      name: "RemoveElements",
      path: "/leaderboard.Leaderboard/RemoveElements",
      type: GRPCCallType.unary
    )

    public static let getLeaderboardLength = GRPCMethodDescriptor(
      name: "GetLeaderboardLength",
      path: "/leaderboard.Leaderboard/GetLeaderboardLength",
      type: GRPCCallType.unary
    )

    public static let getByRank = GRPCMethodDescriptor(
      name: "GetByRank",
      path: "/leaderboard.Leaderboard/GetByRank",
      type: GRPCCallType.unary
    )

    public static let getRank = GRPCMethodDescriptor(
      name: "GetRank",
      path: "/leaderboard.Leaderboard/GetRank",
      type: GRPCCallType.unary
    )

    public static let getByScore = GRPCMethodDescriptor(
      name: "GetByScore",
      path: "/leaderboard.Leaderboard/GetByScore",
      type: GRPCCallType.unary
    )
  }
}

/// Like a sorted set, but for leaderboards!
///
/// Elements in a leaderboard are keyed by an ID, which is an unsigned 64 bit integer.
/// Scores are single-precision floating point numbers.
///
/// Each ID can have only 1 score.
///
/// For batchy, multi-element apis, limits are 8192 elements per api call.
///
/// Scores are IEEE 754 single-precision floating point numbers. This has a few
/// implications you should be aware of, but the one most likely to affect you is that
/// below -16777216 and above 16777216, not all integers are able to be represented.
///
/// To build a server, implement a class that conforms to this protocol.
public protocol Leaderboard_LeaderboardProvider: CallHandlerProvider {
  var interceptors: Leaderboard_LeaderboardServerInterceptorFactoryProtocol? { get }

  /// Deletes a leaderboard. After this call, you're not incurring storage cost for this leaderboard anymore.
  func deleteLeaderboard(request: Leaderboard__DeleteLeaderboardRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Common__Empty>

  /// Insert or update elements in a leaderboard. You can do up to 8192 elements per call.
  /// There is no partial failure: Upsert succeeds or fails.
  func upsertElements(request: Leaderboard__UpsertElementsRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Common__Empty>

  /// Remove up to 8192 elements at a time from a leaderboard. Elements are removed by id.
  func removeElements(request: Leaderboard__RemoveElementsRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Common__Empty>

  /// Returns the length of a leaderboard in terms of ID count.
  func getLeaderboardLength(request: Leaderboard__GetLeaderboardLengthRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Leaderboard__GetLeaderboardLengthResponse>

  /// Get a range of elements.
  /// * Ordinal, 0-based rank.
  /// * Range can span up to 8192 elements.
  /// See RankRange for details about permissible ranges.
  func getByRank(request: Leaderboard__GetByRankRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Leaderboard__GetByRankResponse>

  /// Get the rank of a list of particular ids in the leaderboard.
  /// * Ordinal, 0-based rank.
  func getRank(request: Leaderboard__GetRankRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Leaderboard__GetRankResponse>

  /// Get a range of elements by a score range.
  /// * Ordinal, 0-based rank.
  ///
  /// You can request up to 8192 elements at a time. To page through many elements that all
  /// fall into a score range you can repeatedly invoke this api with the offset parameter.
  func getByScore(request: Leaderboard__GetByScoreRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Leaderboard__GetByScoreResponse>
}

extension Leaderboard_LeaderboardProvider {
  public var serviceName: Substring {
    return Leaderboard_LeaderboardServerMetadata.serviceDescriptor.fullName[...]
  }

  /// Determines, calls and returns the appropriate request handler, depending on the request's method.
  /// Returns nil for methods not handled by this service.
  public func handle(
    method name: Substring,
    context: CallHandlerContext
  ) -> GRPCServerHandlerProtocol? {
    switch name {
    case "DeleteLeaderboard":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Leaderboard__DeleteLeaderboardRequest>(),
        responseSerializer: ProtobufSerializer<Common__Empty>(),
        interceptors: self.interceptors?.makeDeleteLeaderboardInterceptors() ?? [],
        userFunction: self.deleteLeaderboard(request:context:)
      )

    case "UpsertElements":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Leaderboard__UpsertElementsRequest>(),
        responseSerializer: ProtobufSerializer<Common__Empty>(),
        interceptors: self.interceptors?.makeUpsertElementsInterceptors() ?? [],
        userFunction: self.upsertElements(request:context:)
      )

    case "RemoveElements":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Leaderboard__RemoveElementsRequest>(),
        responseSerializer: ProtobufSerializer<Common__Empty>(),
        interceptors: self.interceptors?.makeRemoveElementsInterceptors() ?? [],
        userFunction: self.removeElements(request:context:)
      )

    case "GetLeaderboardLength":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Leaderboard__GetLeaderboardLengthRequest>(),
        responseSerializer: ProtobufSerializer<Leaderboard__GetLeaderboardLengthResponse>(),
        interceptors: self.interceptors?.makeGetLeaderboardLengthInterceptors() ?? [],
        userFunction: self.getLeaderboardLength(request:context:)
      )

    case "GetByRank":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Leaderboard__GetByRankRequest>(),
        responseSerializer: ProtobufSerializer<Leaderboard__GetByRankResponse>(),
        interceptors: self.interceptors?.makeGetByRankInterceptors() ?? [],
        userFunction: self.getByRank(request:context:)
      )

    case "GetRank":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Leaderboard__GetRankRequest>(),
        responseSerializer: ProtobufSerializer<Leaderboard__GetRankResponse>(),
        interceptors: self.interceptors?.makeGetRankInterceptors() ?? [],
        userFunction: self.getRank(request:context:)
      )

    case "GetByScore":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Leaderboard__GetByScoreRequest>(),
        responseSerializer: ProtobufSerializer<Leaderboard__GetByScoreResponse>(),
        interceptors: self.interceptors?.makeGetByScoreInterceptors() ?? [],
        userFunction: self.getByScore(request:context:)
      )

    default:
      return nil
    }
  }
}

/// Like a sorted set, but for leaderboards!
///
/// Elements in a leaderboard are keyed by an ID, which is an unsigned 64 bit integer.
/// Scores are single-precision floating point numbers.
///
/// Each ID can have only 1 score.
///
/// For batchy, multi-element apis, limits are 8192 elements per api call.
///
/// Scores are IEEE 754 single-precision floating point numbers. This has a few
/// implications you should be aware of, but the one most likely to affect you is that
/// below -16777216 and above 16777216, not all integers are able to be represented.
///
/// To implement a server, implement an object which conforms to this protocol.
@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
public protocol Leaderboard_LeaderboardAsyncProvider: CallHandlerProvider, Sendable {
  static var serviceDescriptor: GRPCServiceDescriptor { get }
  var interceptors: Leaderboard_LeaderboardServerInterceptorFactoryProtocol? { get }

  /// Deletes a leaderboard. After this call, you're not incurring storage cost for this leaderboard anymore.
  func deleteLeaderboard(
    request: Leaderboard__DeleteLeaderboardRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Common__Empty

  /// Insert or update elements in a leaderboard. You can do up to 8192 elements per call.
  /// There is no partial failure: Upsert succeeds or fails.
  func upsertElements(
    request: Leaderboard__UpsertElementsRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Common__Empty

  /// Remove up to 8192 elements at a time from a leaderboard. Elements are removed by id.
  func removeElements(
    request: Leaderboard__RemoveElementsRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Common__Empty

  /// Returns the length of a leaderboard in terms of ID count.
  func getLeaderboardLength(
    request: Leaderboard__GetLeaderboardLengthRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Leaderboard__GetLeaderboardLengthResponse

  /// Get a range of elements.
  /// * Ordinal, 0-based rank.
  /// * Range can span up to 8192 elements.
  /// See RankRange for details about permissible ranges.
  func getByRank(
    request: Leaderboard__GetByRankRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Leaderboard__GetByRankResponse

  /// Get the rank of a list of particular ids in the leaderboard.
  /// * Ordinal, 0-based rank.
  func getRank(
    request: Leaderboard__GetRankRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Leaderboard__GetRankResponse

  /// Get a range of elements by a score range.
  /// * Ordinal, 0-based rank.
  ///
  /// You can request up to 8192 elements at a time. To page through many elements that all
  /// fall into a score range you can repeatedly invoke this api with the offset parameter.
  func getByScore(
    request: Leaderboard__GetByScoreRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Leaderboard__GetByScoreResponse
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Leaderboard_LeaderboardAsyncProvider {
  public static var serviceDescriptor: GRPCServiceDescriptor {
    return Leaderboard_LeaderboardServerMetadata.serviceDescriptor
  }

  public var serviceName: Substring {
    return Leaderboard_LeaderboardServerMetadata.serviceDescriptor.fullName[...]
  }

  public var interceptors: Leaderboard_LeaderboardServerInterceptorFactoryProtocol? {
    return nil
  }

  public func handle(
    method name: Substring,
    context: CallHandlerContext
  ) -> GRPCServerHandlerProtocol? {
    switch name {
    case "DeleteLeaderboard":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Leaderboard__DeleteLeaderboardRequest>(),
        responseSerializer: ProtobufSerializer<Common__Empty>(),
        interceptors: self.interceptors?.makeDeleteLeaderboardInterceptors() ?? [],
        wrapping: { try await self.deleteLeaderboard(request: $0, context: $1) }
      )

    case "UpsertElements":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Leaderboard__UpsertElementsRequest>(),
        responseSerializer: ProtobufSerializer<Common__Empty>(),
        interceptors: self.interceptors?.makeUpsertElementsInterceptors() ?? [],
        wrapping: { try await self.upsertElements(request: $0, context: $1) }
      )

    case "RemoveElements":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Leaderboard__RemoveElementsRequest>(),
        responseSerializer: ProtobufSerializer<Common__Empty>(),
        interceptors: self.interceptors?.makeRemoveElementsInterceptors() ?? [],
        wrapping: { try await self.removeElements(request: $0, context: $1) }
      )

    case "GetLeaderboardLength":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Leaderboard__GetLeaderboardLengthRequest>(),
        responseSerializer: ProtobufSerializer<Leaderboard__GetLeaderboardLengthResponse>(),
        interceptors: self.interceptors?.makeGetLeaderboardLengthInterceptors() ?? [],
        wrapping: { try await self.getLeaderboardLength(request: $0, context: $1) }
      )

    case "GetByRank":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Leaderboard__GetByRankRequest>(),
        responseSerializer: ProtobufSerializer<Leaderboard__GetByRankResponse>(),
        interceptors: self.interceptors?.makeGetByRankInterceptors() ?? [],
        wrapping: { try await self.getByRank(request: $0, context: $1) }
      )

    case "GetRank":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Leaderboard__GetRankRequest>(),
        responseSerializer: ProtobufSerializer<Leaderboard__GetRankResponse>(),
        interceptors: self.interceptors?.makeGetRankInterceptors() ?? [],
        wrapping: { try await self.getRank(request: $0, context: $1) }
      )

    case "GetByScore":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Leaderboard__GetByScoreRequest>(),
        responseSerializer: ProtobufSerializer<Leaderboard__GetByScoreResponse>(),
        interceptors: self.interceptors?.makeGetByScoreInterceptors() ?? [],
        wrapping: { try await self.getByScore(request: $0, context: $1) }
      )

    default:
      return nil
    }
  }
}

public protocol Leaderboard_LeaderboardServerInterceptorFactoryProtocol: Sendable {

  /// - Returns: Interceptors to use when handling 'deleteLeaderboard'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeDeleteLeaderboardInterceptors() -> [ServerInterceptor<Leaderboard__DeleteLeaderboardRequest, Common__Empty>]

  /// - Returns: Interceptors to use when handling 'upsertElements'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeUpsertElementsInterceptors() -> [ServerInterceptor<Leaderboard__UpsertElementsRequest, Common__Empty>]

  /// - Returns: Interceptors to use when handling 'removeElements'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeRemoveElementsInterceptors() -> [ServerInterceptor<Leaderboard__RemoveElementsRequest, Common__Empty>]

  /// - Returns: Interceptors to use when handling 'getLeaderboardLength'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeGetLeaderboardLengthInterceptors() -> [ServerInterceptor<Leaderboard__GetLeaderboardLengthRequest, Leaderboard__GetLeaderboardLengthResponse>]

  /// - Returns: Interceptors to use when handling 'getByRank'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeGetByRankInterceptors() -> [ServerInterceptor<Leaderboard__GetByRankRequest, Leaderboard__GetByRankResponse>]

  /// - Returns: Interceptors to use when handling 'getRank'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeGetRankInterceptors() -> [ServerInterceptor<Leaderboard__GetRankRequest, Leaderboard__GetRankResponse>]

  /// - Returns: Interceptors to use when handling 'getByScore'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeGetByScoreInterceptors() -> [ServerInterceptor<Leaderboard__GetByScoreRequest, Leaderboard__GetByScoreResponse>]
}

public enum Leaderboard_LeaderboardServerMetadata {
  public static let serviceDescriptor = GRPCServiceDescriptor(
    name: "Leaderboard",
    fullName: "leaderboard.Leaderboard",
    methods: [
      Leaderboard_LeaderboardServerMetadata.Methods.deleteLeaderboard,
      Leaderboard_LeaderboardServerMetadata.Methods.upsertElements,
      Leaderboard_LeaderboardServerMetadata.Methods.removeElements,
      Leaderboard_LeaderboardServerMetadata.Methods.getLeaderboardLength,
      Leaderboard_LeaderboardServerMetadata.Methods.getByRank,
      Leaderboard_LeaderboardServerMetadata.Methods.getRank,
      Leaderboard_LeaderboardServerMetadata.Methods.getByScore,
    ]
  )

  public enum Methods {
    public static let deleteLeaderboard = GRPCMethodDescriptor(
      name: "DeleteLeaderboard",
      path: "/leaderboard.Leaderboard/DeleteLeaderboard",
      type: GRPCCallType.unary
    )

    public static let upsertElements = GRPCMethodDescriptor(
      name: "UpsertElements",
      path: "/leaderboard.Leaderboard/UpsertElements",
      type: GRPCCallType.unary
    )

    public static let removeElements = GRPCMethodDescriptor(
      name: "RemoveElements",
      path: "/leaderboard.Leaderboard/RemoveElements",
      type: GRPCCallType.unary
    )

    public static let getLeaderboardLength = GRPCMethodDescriptor(
      name: "GetLeaderboardLength",
      path: "/leaderboard.Leaderboard/GetLeaderboardLength",
      type: GRPCCallType.unary
    )

    public static let getByRank = GRPCMethodDescriptor(
      name: "GetByRank",
      path: "/leaderboard.Leaderboard/GetByRank",
      type: GRPCCallType.unary
    )

    public static let getRank = GRPCMethodDescriptor(
      name: "GetRank",
      path: "/leaderboard.Leaderboard/GetRank",
      type: GRPCCallType.unary
    )

    public static let getByScore = GRPCMethodDescriptor(
      name: "GetByScore",
      path: "/leaderboard.Leaderboard/GetByScore",
      type: GRPCCallType.unary
    )
  }
}
